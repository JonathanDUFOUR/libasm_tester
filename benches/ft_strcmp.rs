use {
	criterion::{criterion_group, criterion_main, Criterion},
	std::ffi::{c_char, c_int},
};

#[link(name = "asm")]
extern "C" {
	fn ft_strcmp(s0: *const c_char, s1: *const c_char) -> c_int;
}

fn criterion_benchmark(c: &mut Criterion) {
	use std::ffi::CString;

	struct BenchArgs {
		id: String,
		s0: &'static str,
		s1: &'static str,
	}

	impl BenchArgs {
		fn new(s0: &'static str, s1: &'static str) -> Self {
			use std::cmp::Ordering::{Equal, Greater, Less};

			let id: String = format!(
				"ft_strcmp({} {} {})",
				s0.len(),
				match s0.cmp(s1) {
					Equal => "==",
					Greater => ">",
					Less => "<",
				},
				s1.len(),
			);

			Self { id, s0, s1 }
		}
	}

	let args: Vec<BenchArgs> = vec![
		// region: args
		BenchArgs::new("", ""),
		BenchArgs::new("A", ""),
		BenchArgs::new("", "C"),
		BenchArgs::new("D", "C"),
		BenchArgs::new("foo", "bar"),
		BenchArgs::new("koala", "koala"),
		BenchArgs::new("do you know", "da way?"),
		BenchArgs::new("It's a TrAp!", "It's a tRaP!"),
		BenchArgs::new("Don't fall", "Don't fall into it"),
		BenchArgs::new(
			"It will find you. It will catch you. It will hit you... with a spoon... again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...",
			"It will find you. It will catch you. It will hit you... with a spoon... again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...
			and again... and again... and again... and again... and again... and again...",
		),
		// endregion: s
	];

	for arg in args {
		let s0: CString = CString::new(arg.s0).unwrap();
		let s1: CString = CString::new(arg.s1).unwrap();

		c.bench_function(&arg.id, |b| b.iter(|| unsafe { ft_strcmp(s0.as_ptr(), s1.as_ptr()) }));
	}
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
