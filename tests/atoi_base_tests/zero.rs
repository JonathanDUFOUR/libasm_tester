use libasm_tester::atoi_base::helper;

// region: base_is_empty
#[test]
fn base_is_empty() {
	const S: &[u8] = &[
		0x12, 0xD8, 0xA7, 0x9B, 0x82, 0xB3, 0x17, 0xE9, 0xDF, 0xE8, 0xD2, 0xF2, 0x8E, 0xDD, 0x71,
		0xF4, 0xD6, 0xC3, 0x64, 0xA1, 0xA7, 0x69, 0xDC, 0x37, 0x70, 0xEE, 0x72, 0x64, 0x9A, 0x06,
		0x18, 0x6D, 0x8E, 0x36, 0x84, 0x92, 0xD5, 0xCE, 0x88, 0xFA, 0x32, 0xAD,
	];
	const BASE: &[u8] = &[];

	helper(S, BASE, 0);
}
// endregion
// region: base_is_too_small
#[test]
fn base_is_too_small() {
	const S: &[u8] = &[
		0x81, 0x81, 0x81, 0x77, 0x83, 0x2A, 0x6E, 0xDE, 0x52, 0xAF, 0x60, 0x4E, 0xF8, 0xF2, 0xBA,
		0xA7, 0xF9, 0x6B, 0xC6, 0xD2, 0xF6, 0x0D, 0xD8, 0x73, 0xE3, 0x79, 0x77, 0xF9, 0xDD, 0xC9,
		0x73, 0x69, 0xC8, 0x37, 0x88, 0xAE, 0xDA, 0x4E, 0x34, 0x38, 0x61, 0x24,
	];
	const BASE: &[u8] = &[0x81];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_plus
#[test]
fn base_has_a_plus() {
	const S: &[u8] = &[
		0x2B, 0x75, 0x6F, 0x75, 0x03, 0xFA, 0x37, 0xD4, 0x99, 0xA1, 0x2D, 0xF2, 0xCD, 0xF1, 0x2E,
		0x0D, 0x80, 0x7E, 0xD3, 0xD2, 0x78, 0xBA, 0xBD, 0x4C, 0xD6, 0x8A, 0xAE, 0xF7, 0x3A, 0x67,
		0xC4, 0xDE, 0x64, 0xB7, 0xE2, 0x24, 0x80, 0x88, 0x2E, 0x31, 0xE5, 0x74,
	];
	const BASE: &[u8] = &[
		0x59, 0x6F, 0x75, 0x2B, 0x49, 0x3D, 0x3C, 0x33,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_dash
#[test]
fn base_has_a_dash() {
	const S: &[u8] = &[
		0x2D, 0x72, 0x69, 0x69, 0x77, 0x53, 0x5D, 0xCF, 0xD2, 0x79, 0x9F, 0xFE, 0x56, 0xC4, 0x53,
		0x5A, 0xF6, 0x9F, 0x01, 0xC3, 0xFE, 0xB8, 0xD4, 0x67, 0xED, 0x86, 0xA4, 0x57, 0x70, 0xE1,
		0x36, 0x7F, 0x56, 0xE5, 0xFB, 0x29, 0xF0, 0x30, 0x26, 0x01, 0x68, 0xC6,
	];
	const BASE: &[u8] = &[
		0x72, 0x61, 0x69, 0x6E, 0x62, 0x6F, 0x77, 0x2D, 0x44, 0x41, 0x53, 0x48,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_horizontal_tabulation
#[test]
fn base_has_a_horizontal_tabulation() {
	const S: &[u8] = &[
		0x09, 0x09, 0x50, 0x49, 0x50, 0x52, 0x0D, 0xD5, 0x81, 0xD9, 0x47, 0xF6, 0x07, 0xC8, 0x23,
		0x99, 0xFE, 0xC8, 0xB2, 0xA0, 0x6E, 0x91, 0x93, 0x1B, 0xDC, 0xAB, 0xA5, 0x3B, 0x26, 0x4E,
		0x7E, 0xE7, 0x89, 0x02, 0x5C, 0x1B, 0xDB, 0xE9, 0x33, 0x18, 0xF0, 0x85,
	];
	const BASE: &[u8] = &[
		0x52, 0x49, 0x50, 0x09,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_line_feed
#[test]
fn base_has_a_line_feed() {
	const S: &[u8] = &[
		0x0A, 0x0A, 0x0A, 0x70, 0x76, 0x6E, 0x7E, 0xFE, 0x2F, 0x26, 0x38, 0x4E, 0x32, 0x2B, 0xE2,
		0x3F, 0x9F, 0xD7, 0x47, 0x28, 0x76, 0x4B, 0x77, 0x8D, 0xB9, 0x3E, 0x20, 0x12, 0x98, 0x65,
		0xDD, 0x9F, 0xBD, 0xD6, 0xFD, 0xCE, 0xA2, 0x4B, 0xCE, 0x57, 0x50, 0x2C,
	];
	const BASE: &[u8] = &[
		0x70, 0x6F, 0x6E, 0x65, 0x79, 0x0A, 0x76, 0x69, 0x66,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_vertical_tabulation
#[test]
fn base_has_a_vertical_tabulation() {
	const S: &[u8] = &[
		0x0B, 0x3F, 0x68, 0x65, 0x65, 0x41, 0xF3, 0x91, 0x08, 0xF0, 0xBB, 0xBF, 0x02, 0xB3, 0x77,
		0xE1, 0xD9, 0x0F, 0xC6, 0x4E, 0x79, 0x14, 0x0A, 0xDB, 0x3F, 0x80, 0x45, 0x33, 0x19, 0xF4,
		0x49, 0xA5, 0xDF, 0xC8, 0x36, 0x9B, 0xA9, 0x3F, 0x23, 0xFA, 0xC7, 0xD4,
	];
	const BASE: &[u8] = &[
		0x68, 0x6F, 0x6E, 0x65, 0x73, 0x74, 0x6C, 0x79, 0x0B, 0x3F,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_form_feed
#[test]
fn base_has_a_form_feed() {
	const S: &[u8] = &[
		0x0C, 0x62, 0x72, 0x62, 0x61, 0x61, 0x9A, 0x56, 0xA6, 0xA9, 0xC3, 0x20, 0x15, 0x2F, 0xD7,
		0xDF, 0x7F, 0x58, 0x7B, 0x82, 0xC7, 0xE7, 0x02, 0xD0, 0x93, 0xE1, 0x49, 0xC9, 0xED, 0x72,
		0xAB, 0x71, 0xA3, 0xE7, 0xF6, 0x90, 0x44, 0x2C, 0x63, 0x1F, 0x29, 0xE9,
	];
	const BASE: &[u8] = &[
		0x62, 0x72, 0x6F, 0x64, 0x61, 0x27, 0x0C, 0x75, 0x68,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_carriage_return
#[test]
fn base_has_a_carriage_return() {
	const S: &[u8] = &[
		0x0D, 0x0D, 0x0D, 0x0D, 0x75, 0x65, 0x75, 0x47, 0x6F, 0xFC, 0x23, 0x42, 0xAA, 0x4C, 0x2B,
		0xEE, 0x67, 0xA5, 0x13, 0xE0, 0x9E, 0x23, 0x24, 0xCC, 0x2B, 0x9E, 0x86, 0x0C, 0xA0, 0x59,
		0xE4, 0xC1, 0xCF, 0xC5, 0x4C, 0x5F, 0x12, 0xEA, 0xCE, 0x8A, 0xC0, 0xC6,
	];
	const BASE: &[u8] = &[
		0x47, 0x69, 0x76, 0x65, 0x0D, 0x75, 0x70,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_space
#[test]
fn base_has_a_space() {
	const S: &[u8] = &[
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6E, 0x45, 0x68, 0x44, 0x44, 0xAF, 0x4A, 0xA1,
		0x2E, 0x45, 0xF6, 0xC8, 0xAE, 0x96, 0x36, 0x18, 0x83, 0xF4, 0x66, 0xD0, 0xA2, 0x28, 0x04,
		0x94, 0x1F, 0xCE, 0xF1, 0xC1, 0x28, 0xC8, 0xB5, 0x88, 0xB3, 0xCA, 0x5D,
	];
	const BASE: &[u8] = &[
		0x4A, 0x6F, 0x68, 0x6E, 0x20, 0x44, 0x4F, 0x45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_duplicates
#[test]
fn base_has_duplicates() {
	const S: &[u8] = &[
		0x77, 0x65, 0x50, 0x72, 0xFA, 0xE2, 0xE8, 0x1E, 0xF6, 0x0A, 0x35, 0x4E, 0x0C, 0x23, 0xAC,
		0xFC, 0x70, 0xE9, 0xAB, 0xDF, 0x6D, 0xCD, 0x24, 0x37, 0x76, 0x26, 0xC4, 0xCD, 0x93, 0xC8,
		0xBD, 0x05, 0xD0, 0x99, 0x19, 0x0B, 0x47, 0x60, 0xF7, 0xD1, 0x7A, 0x0C,
	];
	const BASE: &[u8] = &[
		0x50, 0x6F, 0x77, 0x65, 0x72, 0x53, 0x6E, 0x61, 0x6B, 0x65,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_is_empty
#[test]
fn s_is_empty() {
	const S: &[u8] = &[];
	const BASE: &[u8] = &[
		// region: BASE
		0xF7, 0x0F, 0xD9, 0x45, 0x46, 0xB2, 0xC6, 0xA6, 0x63, 0x98, 0xD3, 0x1D, 0x53,
		0x7D,
		// endregion
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces
#[test]
fn s_has_whitespaces() {
	const S: &[u8] = &[
		0x20, 0x0A, 0x09, 0x0B, 0x0D, 0x0A, 0x0B, 0x0D, 0x09, 0x0A, 0x0C, 0x09,
	];
	const BASE: &[u8] = &[
		0x57, 0x48, 0x49, 0x54, 0x45, 0x73, 0x70, 0x61, 0x63, 0x65, 0x24,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs
#[test]
fn s_has_signs() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
	];
	const BASE: &[u8] = &[
		0x53, 0x69, 0x67, 0x6E, 0x73, 0x3F,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_zeros
#[test]
fn s_has_zeros() {
	const S: &[u8] = &[
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
	];
	const BASE: &[u8] = &[
		0x23, 0x24, 0x40, 0x21,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_insignificant_bytes
#[test]
fn s_has_insignificant_bytes() {
	const S: &[u8] = &[
		0xCB, 0x0F, 0x9A, 0xD4, 0x6C, 0x56, 0x70, 0xEF, 0x4A, 0xFD, 0xA2, 0xB0, 0x49, 0x8A, 0x2C,
		0x5E, 0xC2, 0x44, 0x30, 0xE3, 0x1D, 0x4A, 0xF9, 0x67, 0xE2, 0xF1, 0xCB, 0x8D, 0x78, 0xE1,
		0x05, 0xB0, 0xC9, 0x20, 0xB2, 0x9E, 0xAF, 0xF9, 0xD3, 0x36, 0xAA, 0xFD, 0xFC, 0x59, 0x0E,
		0xC1, 0x7E, 0x15, 0x0F, 0x0E, 0xFD, 0xA3, 0x73, 0x8B, 0x7A, 0x8F, 0xB0, 0xF5, 0x5E, 0x63,
		0x7E, 0xF8,
	];
	const BASE: &[u8] = &[
		0x84, 0xA1,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs
#[test]
fn s_has_whitespaces_and_signs() {
	const S: &[u8] = &[
		0x0B, 0x09, 0x0C, 0x0C, 0x0B, 0x0C, 0x09, 0x0A, 0x0D, 0x20, 0x0D, 0x09, 0x0D, 0x0C, 0x0C,
		0x0A, 0x0A, 0x0A, 0x20, 0x09, 0x0D, 0x0A, 0x0D, 0x09, 0x0B, 0x0C, 0x0C, 0x0A, 0x0C, 0x20,
		0x0B, 0x0A, 0x0A, 0x0B, 0x0D, 0x20, 0x0C, 0x20, 0x0B, 0x0A, 0x0A, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
	];
	const BASE: &[u8] = &[
		0x4B, 0x61, 0x6B, 0x40,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_zeros
#[test]
fn s_has_whitespaces_and_zeros() {
	const S: &[u8] = &[
		0x09, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x09, 0x20, 0x0B, 0x20, 0x09, 0x0D, 0x0D, 0x0A, 0x0D,
		0x0D, 0x09, 0x0B, 0x0B, 0x0B, 0x0D, 0x0D, 0x0B, 0x0B, 0x0A, 0x0A, 0x20, 0x09, 0x20, 0x0B,
		0x09, 0x20, 0x0D, 0x20, 0x0D, 0x09, 0x20, 0x0C, 0x0A, 0x09, 0x72, 0x72, 0x72, 0x72, 0x72,
		0x72, 0x72, 0x72, 0x72, 0x72,
	];
	const BASE: &[u8] = &[
		0x72, 0x65, 0x63, 0x68, 0x45, 0x52, 0x43, 0x48, 0x33, 0x73,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0C, 0x20, 0x0D, 0x0C, 0x0A, 0x0B, 0x0D, 0x0B, 0x09, 0x0B, 0x0D, 0x0A, 0x09, 0x20,
		0x55, 0x55, 0x4F, 0x54, 0x5A, 0x4F, 0x41, 0x4F, 0x55, 0x41, 0x54, 0x54, 0x53, 0x55, 0x53,
		0x53, 0x4F, 0x54, 0x55, 0x52, 0x4F, 0x53, 0x41, 0x4F, 0x54, 0x55, 0x52, 0x53, 0x4F, 0x4C,
		0x54, 0x4C, 0x5A, 0x4C, 0x54, 0x4C, 0x54, 0x5A,
	];
	const BASE: &[u8] = &[
		0x70, 0x6F, 0x74, 0x61, 0x67, 0x65, 0x72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_zeros
#[test]
fn s_has_signs_and_zeros() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69,
	];
	const BASE: &[u8] = &[
		0x69, 0x6E, 0x74, 0x65, 0x72, 0x4E, 0x45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_insignificant_bytes
#[test]
fn s_has_signs_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x59, 0x6F,
		0x6D, 0x47, 0x54, 0x61, 0x54, 0x49, 0x59, 0x74,
	];
	const BASE: &[u8] = &[
		0x48, 0x65, 0x6C, 0x31, 0x30, 0x57, 0x6F, 0x72, 0x21, 0x64, 0x7C, 0x3D, 0x44,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_zeros_and_insignificant_bytes
#[test]
fn s_has_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62,
		0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62,
		0x62, 0x62, 0x75, 0x75, 0x6D, 0x75, 0x6D, 0x66, 0x6D, 0x6D, 0x6D, 0x6D, 0x75, 0x66, 0x66,
		0x66,
	];
	const BASE: &[u8] = &[
		0x62, 0x61, 0x72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros
#[test]
fn s_has_whitespaces_and_signs_and_zeros() {
	const S: &[u8] = &[
		0x0A, 0x20, 0x0A, 0x0D, 0x0C, 0x0A, 0x20, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2D, 0x2D, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
		0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
		0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
	];
	const BASE: &[u8] = &[
		0x70, 0x6F, 0x75, 0x69, 0x63,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x20, 0x09, 0x20, 0x0A, 0x0C, 0x0C, 0x0A, 0x0C, 0x0B, 0x0A, 0x0D, 0x09, 0x20, 0x09,
		0x0B, 0x09, 0x0B, 0x20, 0x0A, 0x09, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2D, 0x2B, 0x6B, 0x8F, 0x16, 0xC9, 0xC9, 0x4B, 0x93, 0x8C, 0xDD, 0x94, 0x88, 0x9C, 0xFE,
		0x15, 0x4D, 0xF0, 0x96, 0x2C, 0x3E, 0xFC, 0xF7, 0x5A,
	];
	const BASE: &[u8] = &[
		0x41, 0x6E, 0x64, 0x75, 0x31, 0x4C, 0x6F, 0x74, 0x68, 0x61, 0x72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0B, 0x0C, 0x20, 0x0B, 0x0C, 0x0C, 0x09, 0x0B, 0x0D, 0x0B, 0x09, 0x0D, 0x20, 0x0D, 0x0C,
		0x0D, 0x20, 0x09, 0x09, 0x0B, 0x09, 0x20, 0x09, 0x09, 0x0B, 0x0A, 0x0D, 0x0C, 0x0C, 0x20,
		0x20, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x4B, 0x7D, 0x57,
	];
	const BASE: &[u8] = &[
		0x4B, 0x69, 0x6E, 0x64, 0x65, 0x72, 0x5F, 0x49, 0x73, 0x2E, 0x47, 0x6F, 0x30, 0x64, 0x21,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_zeros_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E,
		0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0xD7, 0x35, 0x7D, 0x49, 0xAD, 0x10, 0x16, 0x7F, 0x5D, 0xDB,
		0xBD, 0x6F, 0x86, 0x74, 0x62, 0x5C, 0xDF, 0xE6,
	];
	const BASE: &[u8] = &[
		0x4E, 0x65, 0x77, 0x42, 0x61, 0x6C, 0x41, 0x6E, 0x63, 0x45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x09, 0x0A, 0x0D, 0x0D, 0x0B, 0x09, 0x0C, 0x0B, 0x0A, 0x09, 0x20, 0x0B, 0x0C, 0x0C,
		0x0B, 0x0C, 0x0A, 0x09, 0x20, 0x20, 0x0B, 0x0B, 0x09, 0x0A, 0x0C, 0x09, 0x0B, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D,
		0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0xE7, 0x7C, 0x0B, 0x7C, 0x2D,
	];
	const BASE: &[u8] = &[
		0x4E, 0x65, 0x77, 0x42, 0x61, 0x6C, 0x41, 0x6E, 0x63, 0x45,
	];

	helper(S, BASE, 0);
}
// endregion
