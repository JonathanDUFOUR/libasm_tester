use super::shared::helper;

// region: base_is_empty
#[test]
fn base_is_empty() {
	const S: &[u8] = &[
		0x_12, 0x_D8, 0x_A7, 0x_9B, 0x_82, 0x_B3, 0x_17, 0x_E9, 0x_DF, 0x_E8, 0x_D2, 0x_F2, 0x_8E, 0x_DD, 0x_71,
		0x_F4, 0x_D6, 0x_C3, 0x_64, 0x_A1, 0x_A7, 0x_69, 0x_DC, 0x_37, 0x_70, 0x_EE, 0x_72, 0x_64, 0x_9A, 0x_06,
		0x_18, 0x_6D, 0x_8E, 0x_36, 0x_84, 0x_92, 0x_D5, 0x_CE, 0x_88, 0x_FA, 0x_32, 0x_AD,
	];
	const BASE: &[u8] = &[];

	helper(S, BASE, 0);
}
// endregion
// region: base_is_too_small
#[test]
fn base_is_too_small() {
	const S: &[u8] = &[
		0x_81, 0x_81, 0x_81, 0x_77, 0x_83, 0x_2A, 0x_6E, 0x_DE, 0x_52, 0x_AF, 0x_60, 0x_4E, 0x_F8, 0x_F2, 0x_BA,
		0x_A7, 0x_F9, 0x_6B, 0x_C6, 0x_D2, 0x_F6, 0x_0D, 0x_D8, 0x_73, 0x_E3, 0x_79, 0x_77, 0x_F9, 0x_DD, 0x_C9,
		0x_73, 0x_69, 0x_C8, 0x_37, 0x_88, 0x_AE, 0x_DA, 0x_4E, 0x_34, 0x_38, 0x_61, 0x_24,
	];
	const BASE: &[u8] = &[0x_81];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_plus
#[test]
fn base_has_a_plus() {
	const S: &[u8] = &[
		0x_2B, 0x_75, 0x_6F, 0x_75, 0x_03, 0x_FA, 0x_37, 0x_D4, 0x_99, 0x_A1, 0x_2D, 0x_F2, 0x_CD, 0x_F1, 0x_2E,
		0x_0D, 0x_80, 0x_7E, 0x_D3, 0x_D2, 0x_78, 0x_BA, 0x_BD, 0x_4C, 0x_D6, 0x_8A, 0x_AE, 0x_F7, 0x_3A, 0x_67,
		0x_C4, 0x_DE, 0x_64, 0x_B7, 0x_E2, 0x_24, 0x_80, 0x_88, 0x_2E, 0x_31, 0x_E5, 0x_74,
	];
	const BASE: &[u8] = &[
		0x_59, 0x_6F, 0x_75, 0x_2B, 0x_49, 0x_3D, 0x_3C, 0x_33,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_dash
#[test]
fn base_has_a_dash() {
	const S: &[u8] = &[
		0x_2D, 0x_72, 0x_69, 0x_69, 0x_77, 0x_53, 0x_5D, 0x_CF, 0x_D2, 0x_79, 0x_9F, 0x_FE, 0x_56, 0x_C4, 0x_53,
		0x_5A, 0x_F6, 0x_9F, 0x_01, 0x_C3, 0x_FE, 0x_B8, 0x_D4, 0x_67, 0x_ED, 0x_86, 0x_A4, 0x_57, 0x_70, 0x_E1,
		0x_36, 0x_7F, 0x_56, 0x_E5, 0x_FB, 0x_29, 0x_F0, 0x_30, 0x_26, 0x_01, 0x_68, 0x_C6,
	];
	const BASE: &[u8] = &[
		0x_72, 0x_61, 0x_69, 0x_6E, 0x_62, 0x_6F, 0x_77, 0x_2D, 0x_44, 0x_41, 0x_53, 0x_48,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_horizontal_tabulation
#[test]
fn base_has_a_horizontal_tabulation() {
	const S: &[u8] = &[
		0x_09, 0x_09, 0x_50, 0x_49, 0x_50, 0x_52, 0x_0D, 0x_D5, 0x_81, 0x_D9, 0x_47, 0x_F6, 0x_07, 0x_C8, 0x_23,
		0x_99, 0x_FE, 0x_C8, 0x_B2, 0x_A0, 0x_6E, 0x_91, 0x_93, 0x_1B, 0x_DC, 0x_AB, 0x_A5, 0x_3B, 0x_26, 0x_4E,
		0x_7E, 0x_E7, 0x_89, 0x_02, 0x_5C, 0x_1B, 0x_DB, 0x_E9, 0x_33, 0x_18, 0x_F0, 0x_85,
	];
	const BASE: &[u8] = &[
		0x_52, 0x_49, 0x_50, 0x_09,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_line_feed
#[test]
fn base_has_a_line_feed() {
	const S: &[u8] = &[
		0x_0A, 0x_0A, 0x_0A, 0x_70, 0x_76, 0x_6E, 0x_7E, 0x_FE, 0x_2F, 0x_26, 0x_38, 0x_4E, 0x_32, 0x_2B, 0x_E2,
		0x_3F, 0x_9F, 0x_D7, 0x_47, 0x_28, 0x_76, 0x_4B, 0x_77, 0x_8D, 0x_B9, 0x_3E, 0x_20, 0x_12, 0x_98, 0x_65,
		0x_DD, 0x_9F, 0x_BD, 0x_D6, 0x_FD, 0x_CE, 0x_A2, 0x_4B, 0x_CE, 0x_57, 0x_50, 0x_2C,
	];
	const BASE: &[u8] = &[
		0x_70, 0x_6F, 0x_6E, 0x_65, 0x_79, 0x_0A, 0x_76, 0x_69, 0x_66,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_vertical_tabulation
#[test]
fn base_has_a_vertical_tabulation() {
	const S: &[u8] = &[
		0x_0B, 0x_3F, 0x_68, 0x_65, 0x_65, 0x_41, 0x_F3, 0x_91, 0x_08, 0x_F0, 0x_BB, 0x_BF, 0x_02, 0x_B3, 0x_77,
		0x_E1, 0x_D9, 0x_0F, 0x_C6, 0x_4E, 0x_79, 0x_14, 0x_0A, 0x_DB, 0x_3F, 0x_80, 0x_45, 0x_33, 0x_19, 0x_F4,
		0x_49, 0x_A5, 0x_DF, 0x_C8, 0x_36, 0x_9B, 0x_A9, 0x_3F, 0x_23, 0x_FA, 0x_C7, 0x_D4,
	];
	const BASE: &[u8] = &[
		0x_68, 0x_6F, 0x_6E, 0x_65, 0x_73, 0x_74, 0x_6C, 0x_79, 0x_0B, 0x_3F,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_form_feed
#[test]
fn base_has_a_form_feed() {
	const S: &[u8] = &[
		0x_0C, 0x_62, 0x_72, 0x_62, 0x_61, 0x_61, 0x_9A, 0x_56, 0x_A6, 0x_A9, 0x_C3, 0x_20, 0x_15, 0x_2F, 0x_D7,
		0x_DF, 0x_7F, 0x_58, 0x_7B, 0x_82, 0x_C7, 0x_E7, 0x_02, 0x_D0, 0x_93, 0x_E1, 0x_49, 0x_C9, 0x_ED, 0x_72,
		0x_AB, 0x_71, 0x_A3, 0x_E7, 0x_F6, 0x_90, 0x_44, 0x_2C, 0x_63, 0x_1F, 0x_29, 0x_E9,
	];
	const BASE: &[u8] = &[
		0x_62, 0x_72, 0x_6F, 0x_64, 0x_61, 0x_27, 0x_0C, 0x_75, 0x_68,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_carriage_return
#[test]
fn base_has_a_carriage_return() {
	const S: &[u8] = &[
		0x_0D, 0x_0D, 0x_0D, 0x_0D, 0x_75, 0x_65, 0x_75, 0x_47, 0x_6F, 0x_FC, 0x_23, 0x_42, 0x_AA, 0x_4C, 0x_2B,
		0x_EE, 0x_67, 0x_A5, 0x_13, 0x_E0, 0x_9E, 0x_23, 0x_24, 0x_CC, 0x_2B, 0x_9E, 0x_86, 0x_0C, 0x_A0, 0x_59,
		0x_E4, 0x_C1, 0x_CF, 0x_C5, 0x_4C, 0x_5F, 0x_12, 0x_EA, 0x_CE, 0x_8A, 0x_C0, 0x_C6,
	];
	const BASE: &[u8] = &[
		0x_47, 0x_69, 0x_76, 0x_65, 0x_0D, 0x_75, 0x_70,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_a_space
#[test]
fn base_has_a_space() {
	const S: &[u8] = &[
		0x_20, 0x_20, 0x_20, 0x_20, 0x_20, 0x_20, 0x_20, 0x_6E, 0x_45, 0x_68, 0x_44, 0x_44, 0x_AF, 0x_4A, 0x_A1,
		0x_2E, 0x_45, 0x_F6, 0x_C8, 0x_AE, 0x_96, 0x_36, 0x_18, 0x_83, 0x_F4, 0x_66, 0x_D0, 0x_A2, 0x_28, 0x_04,
		0x_94, 0x_1F, 0x_CE, 0x_F1, 0x_C1, 0x_28, 0x_C8, 0x_B5, 0x_88, 0x_B3, 0x_CA, 0x_5D,
	];
	const BASE: &[u8] = &[
		0x_4A, 0x_6F, 0x_68, 0x_6E, 0x_20, 0x_44, 0x_4F, 0x_45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: base_has_duplicates
#[test]
fn base_has_duplicates() {
	const S: &[u8] = &[
		0x_77, 0x_65, 0x_50, 0x_72, 0x_FA, 0x_E2, 0x_E8, 0x_1E, 0x_F6, 0x_0A, 0x_35, 0x_4E, 0x_0C, 0x_23, 0x_AC,
		0x_FC, 0x_70, 0x_E9, 0x_AB, 0x_DF, 0x_6D, 0x_CD, 0x_24, 0x_37, 0x_76, 0x_26, 0x_C4, 0x_CD, 0x_93, 0x_C8,
		0x_BD, 0x_05, 0x_D0, 0x_99, 0x_19, 0x_0B, 0x_47, 0x_60, 0x_F7, 0x_D1, 0x_7A, 0x_0C,
	];
	const BASE: &[u8] = &[
		0x_50, 0x_6F, 0x_77, 0x_65, 0x_72, 0x_53, 0x_6E, 0x_61, 0x_6B, 0x_65,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_is_empty
#[test]
fn s_is_empty() {
	const S: &[u8] = &[];
	const BASE: &[u8] = &[
		// region: BASE
		0x_F7, 0x_0F, 0x_D9, 0x_45, 0x_46, 0x_B2, 0x_C6, 0x_A6, 0x_63, 0x_98, 0x_D3, 0x_1D, 0x_53,
		0x_7D,
		// endregion
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces
#[test]
fn s_has_whitespaces() {
	const S: &[u8] = &[
		0x_20, 0x_0A, 0x_09, 0x_0B, 0x_0D, 0x_0A, 0x_0B, 0x_0D, 0x_09, 0x_0A, 0x_0C, 0x_09,
	];
	const BASE: &[u8] = &[
		0x_57, 0x_48, 0x_49, 0x_54, 0x_45, 0x_73, 0x_70, 0x_61, 0x_63, 0x_65, 0x_24,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs
#[test]
fn s_has_signs() {
	const S: &[u8] = &[
		0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D,
	];
	const BASE: &[u8] = &[
		0x_53, 0x_69, 0x_67, 0x_6E, 0x_73, 0x_3F,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_zeros
#[test]
fn s_has_zeros() {
	const S: &[u8] = &[
		0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23, 0x_23,
	];
	const BASE: &[u8] = &[
		0x_23, 0x_24, 0x_40, 0x_21,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_insignificant_bytes
#[test]
fn s_has_insignificant_bytes() {
	const S: &[u8] = &[
		0x_CB, 0x_84, 0x_84, 0x_A1, 0x_A1, 0x_A1, 0x_84, 0x_A1, 0x_84, 0x_A1, 0x_A1, 0x_A1, 0x_84, 0x_A1, 0x_A1,
		0x_84, 0x_84, 0x_A1, 0x_A1, 0x_A1, 0x_84, 0x_84, 0x_A1, 0x_84, 0x_A1, 0x_A1, 0x_84, 0x_84, 0x_84, 0x_84,
		0x_A1, 0x_84, 0x_84, 0x_84, 0x_A1, 0x_A1, 0x_A1, 0x_A1, 0x_A1, 0x_A1, 0x_84, 0x_A1, 0x_A1,
	];
	const BASE: &[u8] = &[
		0x_84, 0x_A1,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs
#[test]
fn s_has_whitespaces_and_signs() {
	const S: &[u8] = &[
		0x_0B, 0x_09, 0x_0C, 0x_0C, 0x_0B, 0x_0C, 0x_09, 0x_0A, 0x_0D, 0x_20, 0x_0D, 0x_09, 0x_0D, 0x_0C, 0x_0C,
		0x_0A, 0x_0A, 0x_0A, 0x_20, 0x_09, 0x_0D, 0x_0A, 0x_0D, 0x_09, 0x_0B, 0x_0C, 0x_0C, 0x_0A, 0x_0C, 0x_20,
		0x_0B, 0x_0A, 0x_0A, 0x_0B, 0x_0D, 0x_20, 0x_0C, 0x_20, 0x_0B, 0x_0A, 0x_0A, 0x_2D, 0x_2B, 0x_2B, 0x_2D,
		0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2B,
		0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D,
	];
	const BASE: &[u8] = &[
		0x_4B, 0x_61, 0x_6B, 0x_40,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_zeros
#[test]
fn s_has_whitespaces_and_zeros() {
	const S: &[u8] = &[
		0x_09, 0x_0C, 0x_0C, 0x_0C, 0x_0C, 0x_0D, 0x_09, 0x_20, 0x_0B, 0x_20, 0x_09, 0x_0D, 0x_0D, 0x_0A, 0x_0D,
		0x_0D, 0x_09, 0x_0B, 0x_0B, 0x_0B, 0x_0D, 0x_0D, 0x_0B, 0x_0B, 0x_0A, 0x_0A, 0x_20, 0x_09, 0x_20, 0x_0B,
		0x_09, 0x_20, 0x_0D, 0x_20, 0x_0D, 0x_09, 0x_20, 0x_0C, 0x_0A, 0x_09, 0x_72, 0x_72, 0x_72, 0x_72, 0x_72,
		0x_72, 0x_72, 0x_72, 0x_72, 0x_72,
	];
	const BASE: &[u8] = &[
		0x_72, 0x_65, 0x_63, 0x_68, 0x_45, 0x_52, 0x_43, 0x_48, 0x_33, 0x_73,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_09, 0x_0C, 0x_20, 0x_0D, 0x_0C, 0x_0A, 0x_0B, 0x_0D, 0x_0B, 0x_09, 0x_0B, 0x_0D, 0x_0A, 0x_09, 0x_20,
		0x_93, 0x_72, 0x_6F, 0x_67, 0x_70, 0x_67, 0x_72, 0x_61, 0x_74, 0x_65, 0x_6F, 0x_67, 0x_70, 0x_6F, 0x_70,
		0x_74, 0x_72, 0x_61, 0x_74, 0x_65, 0x_6F, 0x_72, 0x_74, 0x_6F, 0x_72, 0x_67, 0x_67, 0x_74, 0x_67, 0x_61,
		0x_72, 0x_74, 0x_61, 0x_70, 0x_61, 0x_74, 0x_65, 0x_61, 0x_74, 0x_72, 0x_72, 0x_67, 0x_65,
	];
	const BASE: &[u8] = &[
		0x_70, 0x_6F, 0x_74, 0x_61, 0x_67, 0x_65, 0x_72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_zeros
#[test]
fn s_has_signs_and_zeros() {
	const S: &[u8] = &[
		0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D,
		0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2D,
		0x_2B, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69, 0x_69,
	];
	const BASE: &[u8] = &[
		0x_69, 0x_6E, 0x_74, 0x_65, 0x_72, 0x_4E, 0x_45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_insignificant_bytes
#[test]
fn s_has_signs_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B,
		0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_42, 0x_31,
		0x_3D, 0x_31, 0x_48, 0x_65, 0x_30, 0x_48, 0x_30, 0x_72, 0x_64, 0x_48, 0x_6F, 0x_44, 0x_57, 0x_48, 0x_48,
		0x_30, 0x_6F, 0x_44, 0x_48, 0x_31, 0x_6C, 0x_72, 0x_3D, 0x_48, 0x_64, 0x_21, 0x_65, 0x_57, 0x_57, 0x_48,
		0x_72, 0x_7C, 0x_72, 0x_44, 0x_7C, 0x_30, 0x_31, 0x_72, 0x_64, 0x_31, 0x_21,
	];
	const BASE: &[u8] = &[
		0x_48, 0x_65, 0x_6C, 0x_31, 0x_30, 0x_57, 0x_6F, 0x_72, 0x_21, 0x_64, 0x_7C, 0x_3D, 0x_44,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_zeros_and_insignificant_bytes
#[test]
fn s_has_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62,
		0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62, 0x_62,
		0x_62, 0x_62, 0x_75, 0x_61, 0x_72, 0x_72, 0x_62, 0x_62, 0x_62, 0x_61, 0x_61, 0x_62, 0x_61, 0x_61, 0x_62,
		0x_72, 0x_61, 0x_61, 0x_72, 0x_61, 0x_72, 0x_72, 0x_62, 0x_72, 0x_62, 0x_72, 0x_61, 0x_61, 0x_72, 0x_62,
		0x_61, 0x_72, 0x_61, 0x_61, 0x_61, 0x_61, 0x_61, 0x_72, 0x_72, 0x_61, 0x_61, 0x_62, 0x_61, 0x_62, 0x_62,
	];
	const BASE: &[u8] = &[
		0x_62, 0x_61, 0x_72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros
#[test]
fn s_has_whitespaces_and_signs_and_zeros() {
	const S: &[u8] = &[
		0x_0A, 0x_20, 0x_0A, 0x_0D, 0x_0C, 0x_0A, 0x_20, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D,
		0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D,
		0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2D,
		0x_2D, 0x_2D, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70,
		0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70,
		0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70, 0x_70,
	];
	const BASE: &[u8] = &[
		0x_70, 0x_6F, 0x_75, 0x_69, 0x_63,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_09, 0x_20, 0x_09, 0x_20, 0x_0A, 0x_0C, 0x_0C, 0x_0A, 0x_0C, 0x_0B, 0x_0A, 0x_0D, 0x_09, 0x_20, 0x_09,
		0x_0B, 0x_09, 0x_0B, 0x_20, 0x_0A, 0x_09, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B,
		0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2D,
		0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D,
		0x_2D, 0x_2B, 0x_AB, 0x_41, 0x_31, 0x_75, 0x_41, 0x_74, 0x_6F, 0x_41, 0x_6E, 0x_74, 0x_6E, 0x_61, 0x_4C,
		0x_74, 0x_61, 0x_4C, 0x_72, 0x_61, 0x_6E, 0x_74, 0x_64, 0x_6E, 0x_68, 0x_6F, 0x_72, 0x_75, 0x_74, 0x_6E,
		0x_41, 0x_31, 0x_75, 0x_4C, 0x_61, 0x_4C, 0x_31, 0x_74, 0x_31, 0x_61, 0x_6F, 0x_75, 0x_4C, 0x_68, 0x_64,
	];
	const BASE: &[u8] = &[
		0x_41, 0x_6E, 0x_64, 0x_75, 0x_31, 0x_4C, 0x_6F, 0x_74, 0x_68, 0x_61, 0x_72,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_0B, 0x_0C, 0x_20, 0x_0B, 0x_0C, 0x_0C, 0x_09, 0x_0B, 0x_0D, 0x_0B, 0x_09, 0x_0D, 0x_20, 0x_0D, 0x_0C,
		0x_0D, 0x_20, 0x_09, 0x_09, 0x_0B, 0x_09, 0x_20, 0x_09, 0x_09, 0x_0B, 0x_0A, 0x_0D, 0x_0C, 0x_0C, 0x_20,
		0x_20, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_4B, 0x_7D, 0x_49,
		0x_30, 0x_5F, 0x_21, 0x_64, 0x_5F, 0x_69, 0x_5F, 0x_4B, 0x_2E, 0x_5F, 0x_2E, 0x_65, 0x_4B, 0x_72, 0x_65,
		0x_47, 0x_4B, 0x_6E, 0x_6F, 0x_4B, 0x_73, 0x_72, 0x_65, 0x_64, 0x_4B, 0x_2E, 0x_64, 0x_64, 0x_30, 0x_49,
		0x_21, 0x_49, 0x_64, 0x_5F, 0x_64, 0x_4B, 0x_2E, 0x_6E, 0x_6F, 0x_6F, 0x_47,
	];
	const BASE: &[u8] = &[
		0x_4B, 0x_69, 0x_6E, 0x_64, 0x_65, 0x_72, 0x_5F, 0x_49, 0x_73, 0x_2E, 0x_47, 0x_6F, 0x_30, 0x_64, 0x_21,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_signs_and_zeros_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2B, 0x_2B,
		0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E,
		0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_D7, 0x_4E, 0x_77, 0x_6E, 0x_63, 0x_42, 0x_63, 0x_6C, 0x_63, 0x_42,
		0x_6C, 0x_45, 0x_77, 0x_6C, 0x_6C, 0x_41, 0x_65, 0x_6C, 0x_61, 0x_6E, 0x_63, 0x_42, 0x_42, 0x_6C, 0x_4E,
		0x_41, 0x_6E, 0x_6E, 0x_6E, 0x_63, 0x_65, 0x_4E, 0x_63, 0x_41, 0x_41, 0x_63, 0x_4E, 0x_77, 0x_42, 0x_77,
		0x_42, 0x_4E, 0x_77,
	];
	const BASE: &[u8] = &[
		0x_4E, 0x_65, 0x_77, 0x_42, 0x_61, 0x_6C, 0x_41, 0x_6E, 0x_63, 0x_45,
	];

	helper(S, BASE, 0);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x_20, 0x_09, 0x_0A, 0x_0D, 0x_0D, 0x_0B, 0x_09, 0x_0C, 0x_0B, 0x_0A, 0x_09, 0x_20, 0x_0B, 0x_0C, 0x_0C,
		0x_0B, 0x_0C, 0x_0A, 0x_09, 0x_20, 0x_20, 0x_0B, 0x_0B, 0x_09, 0x_0A, 0x_0C, 0x_09, 0x_0B, 0x_2D, 0x_2D,
		0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2B, 0x_2B,
		0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2B, 0x_2D, 0x_2D, 0x_2D, 0x_2D, 0x_2B, 0x_2D, 0x_2B, 0x_2B, 0x_2D, 0x_2D,
		0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_4E, 0x_E7, 0x_45, 0x_41, 0x_63, 0x_6E,
		0x_42, 0x_4E, 0x_61, 0x_6C, 0x_65, 0x_6E, 0x_41, 0x_63, 0x_42, 0x_45, 0x_41, 0x_65, 0x_45, 0x_6E, 0x_6C,
		0x_6C, 0x_4E, 0x_61, 0x_77, 0x_41, 0x_42, 0x_41, 0x_61, 0x_42, 0x_77, 0x_65, 0x_65, 0x_41, 0x_61, 0x_77,
		0x_77, 0x_42, 0x_63, 0x_41, 0x_45, 0x_6C, 0x_61, 0x_41,
	];
	const BASE: &[u8] = &[
		0x_4E, 0x_65, 0x_77, 0x_42, 0x_61, 0x_6C, 0x_41, 0x_6E, 0x_63, 0x_45,
	];

	helper(S, BASE, 0);
}
// endregion
