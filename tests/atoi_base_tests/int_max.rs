use libasm_tester::atoi_base::helper;

// region: s_has_2147483647_in_base_2
#[test]
fn s_has_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A,
		0x7A,
	];
	const BASE: &[u8] = &[
		0xD9, 0x7A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_3
#[test]
fn s_has_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x8E, 0x37, 0x8E, 0x8E, 0x37, 0x8E, 0x37, 0x37, 0x37, 0x8E, 0x37, 0x8E, 0x8E, 0xED, 0x37,
		0xED, 0x37, 0x8E, 0xED, 0x8E,
	];
	const BASE: &[u8] = &[
		0xED, 0x8E, 0x37,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_5
#[test]
fn s_has_2147483647_in_base_5() {
	const S: &[u8] = &[
		0xA0, 0x2E, 0x2E, 0x59, 0x59, 0x6E, 0x6E, 0x2E, 0x59, 0x2E, 0x59, 0xCF, 0x59, 0x6E,
	];
	const BASE: &[u8] = &[
		0xCF, 0xA0, 0x6E, 0x2E, 0x59,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_7
#[test]
fn s_has_2147483647_in_base_7() {
	const S: &[u8] = &[
		0xE1, 0x8D, 0x76, 0xE1, 0x36, 0x76, 0xFB, 0xE1, 0xE1, 0xE1, 0x29, 0xE1,
	];
	const BASE: &[u8] = &[
		0x8D, 0xE1, 0xFB, 0x36, 0x76, 0xA3, 0x29,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_11
#[test]
fn s_has_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x17, 0xEC, 0xD0, 0xD0, 0xD0, 0xEC, 0xD0, 0xB9, 0xF4,
	];
	const BASE: &[u8] = &[
		0xEC, 0xF4, 0xD0, 0xEA, 0x47, 0x44, 0xCC, 0x98, 0xB9, 0xB7, 0x17,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_13
#[test]
fn s_has_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x4D, 0x1D, 0x4D, 0x30, 0xDC, 0xD1, 0xDC, 0xDC, 0xDC,
	];
	const BASE: &[u8] = &[
		0x3E, 0xA1, 0x4D, 0xAC, 0xD1, 0x98, 0x9C, 0xB8, 0x1D, 0xE6, 0xDC, 0x30, 0x8F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_19
#[test]
fn s_has_2147483647_in_base_19() {
	const S: &[u8] = &[
		0xAB, 0xAE, 0x5A, 0x46, 0xAE, 0x3B, 0x3A, 0xAB,
	];
	const BASE: &[u8] = &[
		0x61, 0xEF, 0xAB, 0x3A, 0x3C, 0x46, 0xB2, 0xAE, 0x48, 0xB5, 0x01, 0xCA, 0x5A, 0xBE, 0xE0,
		0x54, 0x56, 0x3B, 0x79,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_42
#[test]
fn s_has_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x9F, 0xCC, 0x64, 0xE7, 0xE2, 0xFB,
	];
	const BASE: &[u8] = &[
		0xF9, 0xFB, 0xE9, 0x7E, 0xCB, 0x64, 0x04, 0xD0, 0xD4, 0x70, 0x28, 0x1B, 0xE3, 0xD2, 0x72,
		0xE2, 0x9F, 0x81, 0xCC, 0x05, 0x06, 0xD1, 0x03, 0x30, 0xE7, 0x24, 0x6F, 0xED, 0x69, 0x7F,
		0xCE, 0xD3, 0x8E, 0x8A, 0xA4, 0xA0, 0xEB, 0x8C, 0x73, 0x99, 0xC3, 0xC1,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_73
#[test]
fn s_has_2147483647_in_base_73() {
	const S: &[u8] = &[
		0xE1, 0x03, 0x08, 0xF8, 0xAB, 0x6B,
	];
	const BASE: &[u8] = &[
		0x89, 0xE1, 0x03, 0xBA, 0x01, 0xF5, 0x44, 0xA3, 0x2E, 0xF6, 0x05, 0xFE, 0x4C, 0x36, 0xB2,
		0x6B, 0x30, 0x78, 0xEC, 0x13, 0xF8, 0x7A, 0x26, 0x71, 0xCC, 0x8D, 0x53, 0x33, 0xB0, 0xC4,
		0x99, 0x8A, 0xF2, 0xCD, 0x18, 0x66, 0x7B, 0xE5, 0xB5, 0x64, 0x27, 0x90, 0x56, 0xDA, 0xAB,
		0x08, 0xAD, 0xD9, 0x57, 0xAF, 0x74, 0xEE, 0xCE, 0xD3, 0x60, 0x15, 0x1F, 0x1D, 0x3E, 0xAC,
		0x39, 0xC5, 0x93, 0x8F, 0x46, 0x22, 0xBE, 0x65, 0xEA, 0xEB, 0xA7, 0xD1, 0xF7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_113
#[test]
fn s_has_2147483647_in_base_113() {
	const S: &[u8] = &[
		0xC3, 0xA2, 0xB3, 0xCB, 0xCD,
	];
	const BASE: &[u8] = &[
		0x93, 0xDF, 0xBF, 0xA5, 0xD9, 0x34, 0x19, 0xCD, 0x4D, 0x04, 0x78, 0xD0, 0x5A, 0xC3, 0x4C,
		0x74, 0x4E, 0xF8, 0x94, 0xA2, 0xD7, 0x37, 0xF9, 0xB9, 0x71, 0xAA, 0xA4, 0x48, 0xA9, 0xD6,
		0x3E, 0x40, 0x86, 0x46, 0x11, 0xB3, 0x8F, 0xF1, 0xC8, 0x47, 0x31, 0x1F, 0x84, 0xD5, 0x54,
		0x3B, 0xEE, 0x5B, 0x01, 0x55, 0x7E, 0x13, 0xA3, 0xCB, 0x3A, 0x56, 0x9D, 0x7C, 0x16, 0xC4,
		0xE7, 0x58, 0x66, 0x5C, 0x9F, 0xA6, 0x85, 0x51, 0x98, 0x35, 0x68, 0x6A, 0xE8, 0xDD, 0x88,
		0xAD, 0x8C, 0xC1, 0x06, 0x2A, 0xD8, 0x10, 0x07, 0x99, 0x02, 0x72, 0x25, 0xB4, 0xDE, 0xA7,
		0xD2, 0x33, 0xF6, 0xB5, 0xDA, 0x2F, 0x39, 0x2E, 0xCF, 0xCE, 0xBD, 0x5E, 0x1E, 0xC0, 0x63,
		0xD3, 0xEA, 0x08, 0x67, 0x65, 0x36, 0xBB, 0xC9,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_193
#[test]
fn s_has_2147483647_in_base_193() {
	const S: &[u8] = &[
		0xB0, 0x7C, 0x96, 0x56, 0xFE,
	];
	const BASE: &[u8] = &[
		0x74, 0xB0, 0xDC, 0x92, 0xC8, 0xF3, 0x01, 0xCB, 0xA9, 0x93, 0x29, 0x58, 0x39, 0xFC, 0x47,
		0x67, 0x5A, 0x5C, 0x75, 0xE9, 0x8D, 0x4A, 0x56, 0x68, 0x82, 0x3F, 0x5E, 0x11, 0x54, 0xD3,
		0xAB, 0x31, 0x3D, 0x08, 0x45, 0x21, 0x57, 0x33, 0x2A, 0xB6, 0xE6, 0xE1, 0x4E, 0xD5, 0x59,
		0xD0, 0x89, 0xCC, 0x90, 0x2C, 0x42, 0x6A, 0x8F, 0xFE, 0x91, 0xFA, 0x6C, 0x44, 0x7E, 0x3C,
		0x9B, 0x61, 0xD2, 0x69, 0xD4, 0x72, 0x55, 0xB4, 0x07, 0x79, 0x35, 0xD8, 0x85, 0xAA, 0xF7,
		0x34, 0x37, 0x2E, 0x95, 0xF4, 0xB3, 0x1A, 0x87, 0x43, 0x52, 0x77, 0x5D, 0x15, 0x1E, 0x88,
		0x94, 0x23, 0xEC, 0x7D, 0x2F, 0x1D, 0xFB, 0xBD, 0xB7, 0x18, 0x73, 0x06, 0x1F, 0x26, 0x70,
		0x7C, 0xD7, 0x41, 0xC4, 0xBC, 0xAF, 0x7F, 0x38, 0x8C, 0x46, 0xB1, 0x03, 0xBB, 0x64, 0x81,
		0x62, 0xCA, 0xF2, 0x5B, 0xE2, 0xBF, 0x19, 0xD9, 0x6F, 0xEE, 0x9D, 0xAD, 0x04, 0x16, 0xA7,
		0xF8, 0x60, 0x27, 0x96, 0xD1, 0x4F, 0xFF, 0xCD, 0xCF, 0x4D, 0xAC, 0x78, 0x5F, 0x50, 0x83,
		0xA5, 0x9C, 0xA6, 0x6B, 0xC7, 0xBA, 0x28, 0x9E, 0x99, 0xC0, 0xAE, 0xC5, 0x84, 0x36, 0xA8,
		0xB2, 0xD6, 0x6D, 0xF0, 0xBE, 0x22, 0xE0, 0xDB, 0xCE, 0xE3, 0xEF, 0x10, 0xEB, 0x86, 0xC2,
		0xA3, 0x24, 0x7A, 0x8E, 0x02, 0xA2, 0xF6, 0xC6, 0xDD, 0x05, 0x48, 0x25, 0x3A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_247
#[test]
fn s_has_2147483647_in_base_247() {
	const S: &[u8] = &[
		0xE2, 0x1C, 0x31, 0xE4,
	];
	const BASE: &[u8] = &[
		0x3F, 0x40, 0x3A, 0xEE, 0x76, 0x60, 0xA0, 0xBE, 0x05, 0x5F, 0xFD, 0x02, 0x30, 0x1B, 0x23,
		0x35, 0x34, 0x11, 0x13, 0x10, 0xC1, 0x2C, 0xCA, 0x99, 0x92, 0x98, 0x9B, 0x0E, 0xDF, 0xA6,
		0x18, 0xBA, 0xD9, 0xF3, 0xD0, 0xF1, 0xE3, 0x4C, 0xE8, 0x27, 0x8D, 0x69, 0x22, 0xD4, 0x58,
		0x6F, 0x59, 0x72, 0x12, 0x85, 0xB8, 0xBC, 0x52, 0xD7, 0xB9, 0xE9, 0xDE, 0x84, 0xF6, 0xF4,
		0xD5, 0x8B, 0x5D, 0x1D, 0x91, 0x83, 0x79, 0x3B, 0x0F, 0xD1, 0x4F, 0xF5, 0x4D, 0xBB, 0x4A,
		0x39, 0x28, 0xEB, 0xB3, 0xFC, 0xB5, 0x1A, 0xAC, 0xDA, 0x97, 0x6E, 0x36, 0x43, 0xBD, 0xC6,
		0x8E, 0xB0, 0xE5, 0xA9, 0x7F, 0xDC, 0xC8, 0x17, 0x53, 0x9E, 0xA8, 0x8A, 0xD2, 0x5E, 0x29,
		0x16, 0x19, 0x81, 0x41, 0x6A, 0x74, 0x55, 0x31, 0xD8, 0x33, 0xC5, 0x62, 0x07, 0xAF, 0xA5,
		0x70, 0x65, 0x57, 0x9A, 0x50, 0x1C, 0x87, 0xAE, 0xEA, 0xE1, 0xAB, 0xCE, 0x96, 0x5C, 0x86,
		0x89, 0x61, 0x24, 0x68, 0x7B, 0xD3, 0x4B, 0xE2, 0x37, 0x2F, 0xFF, 0xA4, 0x3D, 0x67, 0xF2,
		0x06, 0x7C, 0x88, 0xF7, 0x8F, 0x44, 0xC2, 0xA7, 0xC9, 0x6D, 0xBF, 0xA1, 0x3C, 0xC4, 0xF8,
		0x7A, 0xF0, 0x77, 0x80, 0x66, 0x2A, 0x82, 0xB2, 0xEC, 0xF9, 0x94, 0x47, 0xAD, 0x26, 0x8C,
		0x08, 0xC3, 0xEF, 0x9C, 0xAA, 0x7D, 0xB6, 0xD6, 0x63, 0xCF, 0x04, 0x78, 0xE4, 0xCC, 0xC7,
		0xFB, 0xCB, 0x71, 0x01, 0x95, 0x38, 0x51, 0x3E, 0x03, 0x2E, 0x73, 0x6B, 0x32, 0x48, 0x1E,
		0x14, 0x90, 0xCD, 0x64, 0xFE, 0xFA, 0xED, 0x5A, 0xA2, 0x1F, 0x15, 0x9D, 0x5B, 0x9F, 0xC0,
		0x4E, 0xB4, 0x42, 0xE7, 0xB1, 0x45, 0x93, 0x7E, 0xDD, 0x6C, 0xB7, 0x25, 0x54, 0x21, 0x75,
		0x46, 0x56, 0xDB, 0x49, 0xA3, 0xE0, 0xE6,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_2
#[test]
fn s_has_whitespaces_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x0C, 0x0D, 0x0C, 0x0B, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,
		0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72,
		0x72, 0x72, 0x72, 0x72, 0x72,
	];
	const BASE: &[u8] = &[
		0x12, 0x72,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_3
#[test]
fn s_has_whitespaces_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x0C, 0x09, 0x0A, 0x09, 0x0B, 0x09, 0x0C, 0x20, 0x09, 0x20, 0x20, 0x09, 0x0B, 0x0B, 0x0A,
		0x0D, 0x20, 0x0B, 0x2A, 0xBA, 0x2A, 0x2A, 0xBA, 0x2A, 0xBA, 0xBA, 0xBA, 0x2A, 0xBA, 0x2A,
		0x2A, 0x82, 0xBA, 0x82, 0xBA, 0x2A, 0x82, 0x2A,
	];
	const BASE: &[u8] = &[
		0x82, 0x2A, 0xBA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_5
#[test]
fn s_has_whitespaces_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x0A, 0x09, 0x0D, 0x0A, 0x09, 0x20, 0x0C, 0x68, 0x88, 0x88, 0x3B, 0x3B, 0x47, 0x47, 0x88,
		0x3B, 0x88, 0x3B, 0xC3, 0x3B, 0x47,
	];
	const BASE: &[u8] = &[
		0xC3, 0x68, 0x47, 0x88, 0x3B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_7
#[test]
fn s_has_whitespaces_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x0C, 0x0C, 0x20, 0x0B, 0x20, 0x09, 0x0D, 0x0C, 0x20, 0x09, 0x0B, 0x0C, 0x20, 0x20, 0x0D,
		0x0A, 0x09, 0x0A, 0x20, 0x0C, 0x09, 0x0C, 0x0B, 0x0D, 0x09, 0x0B, 0x0B, 0x0C, 0x64, 0x14,
		0xB1, 0x64, 0xC5, 0xB1, 0xE2, 0x64, 0x64, 0x64, 0xE7, 0x64,
	];
	const BASE: &[u8] = &[
		0x14, 0x64, 0xE2, 0xC5, 0xB1, 0x11, 0xE7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_11
#[test]
fn s_has_whitespaces_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x0B, 0x0C, 0x0B, 0x20, 0x09, 0x20, 0x0C, 0x0A, 0x0D, 0x20, 0x09, 0x09, 0x20, 0x0D, 0x0D,
		0x20, 0x0C, 0x0D, 0x0D, 0x09, 0x0C, 0x0A, 0x20, 0x0D, 0x0D, 0x0D, 0x09, 0x20, 0x0C, 0x0B,
		0x20, 0x0D, 0x20, 0x8B, 0x21, 0x12, 0x12, 0x12, 0x21, 0x12, 0x98, 0x1A,
	];
	const BASE: &[u8] = &[
		0x21, 0x1A, 0x12, 0xD3, 0xE8, 0xDC, 0xA7, 0x59, 0x98, 0x82, 0x8B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_13
#[test]
fn s_has_whitespaces_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x0A, 0x09, 0x0C, 0x0B, 0x0B, 0x0A, 0x0D, 0x20, 0x0D, 0x0B,
		0x0C, 0x20, 0x0A, 0x0B, 0x0C, 0x0A, 0xE5, 0xFF, 0xE5, 0x37, 0x7F, 0x6C, 0x7F, 0x7F, 0x7F,
	];
	const BASE: &[u8] = &[
		0x10, 0x62, 0xE5, 0x1D, 0x6C, 0xC0, 0x58, 0x32, 0xFF, 0xE9, 0x7F, 0x37, 0x33,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_19
#[test]
fn s_has_whitespaces_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x09, 0x0C, 0x09, 0x20, 0x0D, 0x0A, 0x0A, 0xC2, 0xE3, 0x34, 0x7C, 0xE3, 0x2C, 0x18, 0xC2,
	];
	const BASE: &[u8] = &[
		0x23, 0xBA, 0xC2, 0x18, 0x42, 0x7C, 0xB3, 0xE3, 0xEE, 0xA6, 0x1C, 0x7A, 0x34, 0xCA, 0xB7,
		0x6A, 0x94, 0x2C, 0x19,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_42
#[test]
fn s_has_whitespaces_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x09, 0x0B, 0x0C, 0x0C, 0x09, 0x0A, 0x0B, 0x0A, 0x0C, 0x0A, 0x20, 0x09, 0x20,
		0x0B, 0x0A, 0x0C, 0xA4, 0x56, 0xB3, 0xE0, 0xF6, 0xFC,
	];
	const BASE: &[u8] = &[
		0xE4, 0xFC, 0x94, 0x35, 0xEC, 0xB3, 0x01, 0x8E, 0x22, 0x3F, 0xFD, 0x7B, 0x98, 0xBC, 0x89,
		0xF6, 0xA4, 0xCF, 0x56, 0x93, 0x8B, 0x21, 0x5C, 0x12, 0xE0, 0x5E, 0xE2, 0x4A, 0x96, 0x6B,
		0x76, 0xA0, 0x49, 0xF2, 0x7E, 0x34, 0x2A, 0x95, 0x05, 0xE3, 0x13, 0x40,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_73
#[test]
fn s_has_whitespaces_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x0A, 0x0B, 0x0B, 0x20, 0x09, 0x0D, 0x20, 0x0D, 0x0C, 0x0B, 0x20, 0x09, 0x0C, 0x0C, 0x0A,
		0x0A, 0x0A, 0x0C, 0x0C, 0x20, 0x0A, 0x0B, 0x09, 0x0A, 0x09, 0x0D, 0x0A, 0x20, 0x09, 0x0B,
		0x0B, 0x09, 0x0D, 0x0D, 0x0A, 0x0D, 0x0C, 0x94, 0x3A, 0xFC, 0xA1, 0x1B, 0x70,
	];
	const BASE: &[u8] = &[
		0xED, 0x94, 0x3A, 0xE8, 0x40, 0x77, 0x99, 0xBB, 0xF5, 0x44, 0x05, 0xCD, 0x13, 0xC0, 0x6C,
		0x70, 0x48, 0x02, 0x31, 0x34, 0xA1, 0xC3, 0xB9, 0x45, 0x8F, 0x22, 0x7E, 0xDA, 0xFF, 0xC9,
		0x7A, 0xD9, 0x5F, 0xC7, 0x2F, 0xEB, 0x25, 0xBA, 0xC2, 0x72, 0x2C, 0xDE, 0x60, 0x6E, 0x1B,
		0xFC, 0xB1, 0x1E, 0x5B, 0x1D, 0x5E, 0xD4, 0x28, 0x26, 0x66, 0xB6, 0xC1, 0xEA, 0x6A, 0xDB,
		0xCE, 0x64, 0x01, 0x3F, 0x7D, 0x78, 0x92, 0x6D, 0xD0, 0x84, 0xC5, 0x53, 0x59,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_113
#[test]
fn s_has_whitespaces_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x0A, 0x0A, 0x20, 0x20, 0x09, 0x0B, 0x0B, 0x0B, 0x0C, 0x0A, 0x0B, 0x0D, 0x0C, 0x0D, 0x0C,
		0x0C, 0x09, 0x0B, 0x0A, 0x0D, 0x09, 0x0C, 0x0C, 0x0C, 0x0A, 0x0A, 0x09, 0xA4, 0x4C, 0x35,
		0xB0, 0xC3,
	];
	const BASE: &[u8] = &[
		0x76, 0x3A, 0x67, 0x80, 0x5B, 0x63, 0xD7, 0xC3, 0x94, 0xFC, 0xCB, 0x9B, 0x6B, 0xA4, 0x3D,
		0xCA, 0x6C, 0x61, 0x6A, 0x4C, 0x5C, 0xFA, 0xA2, 0xAD, 0xEA, 0x44, 0x27, 0xFF, 0x1B, 0x5A,
		0x12, 0xB2, 0xB3, 0x8D, 0x4A, 0x35, 0x68, 0x69, 0xB1, 0xE3, 0x97, 0x8F, 0x22, 0xD4, 0x89,
		0x07, 0x47, 0xCC, 0xBD, 0xF0, 0x10, 0x0E, 0x72, 0xB0, 0x21, 0xB4, 0x4E, 0xEE, 0x77, 0xBF,
		0x56, 0xAA, 0xEF, 0x06, 0x25, 0x7F, 0x7E, 0x73, 0xB7, 0x42, 0xFE, 0x75, 0xCF, 0xE6, 0x14,
		0x2E, 0x52, 0x62, 0xD9, 0x9D, 0xA5, 0xDB, 0x51, 0xFD, 0xF7, 0x6F, 0x55, 0x4B, 0xD3, 0x8A,
		0xE4, 0xA9, 0x28, 0x60, 0x86, 0x6D, 0x5D, 0x9C, 0x3F, 0x39, 0x7D, 0xD8, 0x81, 0x2F, 0xB8,
		0xA3, 0x91, 0x53, 0x43, 0x24, 0x93, 0x01, 0x15,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_193
#[test]
fn s_has_whitespaces_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x0C, 0x20, 0x0A, 0x0D, 0x0B, 0x0A, 0x0D, 0x20, 0x0A, 0x0B, 0x0C, 0xDF, 0x46, 0x6F, 0x47,
		0x11,
	];
	const BASE: &[u8] = &[
		0xAB, 0xDF, 0xF8, 0xAC, 0x64, 0x41, 0xD9, 0x77, 0xE8, 0xD4, 0xE5, 0xB9, 0x06, 0x54, 0xDB,
		0xEC, 0xA6, 0xF4, 0x91, 0x2A, 0x03, 0xE4, 0x47, 0x65, 0x07, 0x78, 0x1F, 0xCF, 0xD7, 0x37,
		0xE7, 0x3A, 0x6D, 0x9C, 0x9D, 0x79, 0x12, 0xA3, 0xF9, 0xF2, 0xC5, 0x82, 0x57, 0x84, 0xE1,
		0x43, 0x5E, 0x13, 0x04, 0x7F, 0x3E, 0xEB, 0xD3, 0x11, 0x96, 0xFE, 0x6E, 0x38, 0xA7, 0x98,
		0x70, 0x1B, 0xDA, 0x69, 0xFD, 0x62, 0x2E, 0xF0, 0x23, 0x52, 0x1A, 0x75, 0xE2, 0x10, 0x87,
		0xC3, 0x89, 0xD1, 0x33, 0x67, 0xAF, 0xBB, 0x29, 0x4F, 0x9A, 0xC8, 0x14, 0x17, 0x7E, 0xB7,
		0xA1, 0xAA, 0xA8, 0x99, 0x58, 0xE3, 0x8D, 0x7D, 0x63, 0x35, 0xB2, 0x80, 0x0E, 0xFC, 0x71,
		0x46, 0xEA, 0xA4, 0x55, 0x08, 0x44, 0xCE, 0xC6, 0xEE, 0xE6, 0xBE, 0xE0, 0xDE, 0x9B, 0x50,
		0x1C, 0x2C, 0xCD, 0x42, 0xBD, 0x18, 0xF6, 0x6B, 0xF5, 0xF1, 0x1E, 0xB8, 0x1D, 0xD5, 0xB3,
		0x32, 0xC0, 0xCB, 0x6F, 0x56, 0xFA, 0x02, 0x7B, 0x66, 0xB5, 0x3D, 0x49, 0xC1, 0x8B, 0x22,
		0x59, 0xD8, 0x92, 0x15, 0x86, 0x30, 0x85, 0x16, 0x8C, 0x3F, 0xCC, 0xF3, 0x25, 0x6C, 0x4E,
		0x4D, 0xCA, 0x95, 0x26, 0x40, 0x93, 0x7A, 0xD0, 0x5C, 0x88, 0x5F, 0x90, 0xB1, 0x01, 0x61,
		0xE9, 0x97, 0xB6, 0xC9, 0xDD, 0xA5, 0x48, 0xC4, 0xB0, 0x9F, 0xFB, 0x3C, 0xD2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_247
#[test]
fn s_has_whitespaces_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x0A, 0x0D, 0x0C, 0x09, 0x09, 0x09, 0x0B, 0x0C, 0x20, 0x0C, 0x0C, 0x0B, 0x20, 0x09, 0x0C,
		0x0D, 0x09, 0x0C, 0x0B, 0x09, 0x20, 0x0D, 0x0A, 0x0D, 0x27, 0x14, 0x11, 0x6E,
	];
	const BASE: &[u8] = &[
		0x63, 0x69, 0x0F, 0x43, 0x42, 0x3D, 0x5B, 0x62, 0x58, 0x06, 0x2E, 0x9F, 0x44, 0xC2, 0x1E,
		0x98, 0xAA, 0xC9, 0x3E, 0xE7, 0xC5, 0xD0, 0xD1, 0x1A, 0x40, 0x32, 0x6C, 0x16, 0x67, 0x79,
		0xB1, 0x9A, 0xA5, 0x75, 0x66, 0x84, 0xF6, 0x22, 0x81, 0x8E, 0x9B, 0xE8, 0x7D, 0xA8, 0x76,
		0xB0, 0x74, 0xFF, 0x15, 0xD9, 0x56, 0x49, 0x97, 0x28, 0x60, 0x4F, 0xF9, 0xE2, 0x65, 0x3C,
		0x64, 0xB8, 0x4D, 0x07, 0x89, 0xFD, 0xC8, 0xBB, 0xC6, 0x38, 0x57, 0x7F, 0xA0, 0x99, 0xD6,
		0xC0, 0xE0, 0x26, 0x24, 0x3A, 0x54, 0xA4, 0x03, 0x7B, 0xAB, 0x23, 0x8B, 0x6F, 0xF8, 0x1D,
		0x48, 0x8F, 0xC3, 0xE3, 0xCD, 0x8A, 0x1F, 0x71, 0xAF, 0xEC, 0xFA, 0x90, 0x77, 0xDE, 0x05,
		0x6A, 0xEE, 0x45, 0x4E, 0xAC, 0x04, 0xCB, 0x11, 0x10, 0x53, 0x6D, 0xF0, 0x4B, 0xCA, 0x88,
		0x34, 0xFB, 0x91, 0xB9, 0x78, 0x14, 0xDF, 0x6B, 0x9E, 0xFC, 0x61, 0xB4, 0xE5, 0xBC, 0x83,
		0x52, 0x5F, 0xD2, 0xF2, 0xCC, 0x8D, 0x25, 0x27, 0x41, 0x94, 0x51, 0xC1, 0x12, 0x19, 0xEA,
		0xE1, 0x8C, 0x37, 0x39, 0xED, 0xD8, 0xC7, 0x35, 0x4C, 0xA7, 0x80, 0x92, 0xB5, 0x30, 0x2A,
		0xB7, 0xD5, 0x9D, 0xB2, 0xB3, 0x7A, 0x85, 0xFE, 0x46, 0x01, 0x73, 0xBF, 0xF7, 0xBA, 0xE4,
		0x7C, 0x17, 0x86, 0x2C, 0xE9, 0xAE, 0x7E, 0xDA, 0xA3, 0xB6, 0xA1, 0xA6, 0x6E, 0x2F, 0xF4,
		0xBD, 0x93, 0xD3, 0x87, 0xEF, 0x02, 0x13, 0x31, 0x50, 0x47, 0xDB, 0xCE, 0x1C, 0xF1, 0x82,
		0x21, 0x9C, 0x70, 0x68, 0x95, 0xF3, 0xDD, 0x4A, 0x18, 0x29, 0xBE, 0xD7, 0x5E, 0x5D, 0xC4,
		0xDC, 0x08, 0x1B, 0xA9, 0x3F, 0x5C, 0xAD, 0x0E, 0x33, 0xF5, 0x55, 0xA2, 0x5A, 0x96, 0x72,
		0x3B, 0x59, 0x36, 0xCF, 0xEB, 0xE6, 0xD4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_2
#[test]
fn s_has_signs_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2, 0xF2,
		0xF2,
	];
	const BASE: &[u8] = &[
		0x6D, 0xF2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_3
#[test]
fn s_has_signs_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2B, 0x64, 0x1A, 0x64, 0x64, 0x1A, 0x64, 0x1A, 0x1A, 0x1A, 0x64, 0x1A, 0x64, 0x64, 0x29,
		0x1A, 0x29, 0x1A, 0x64, 0x29, 0x64,
	];
	const BASE: &[u8] = &[
		0x29, 0x64, 0x1A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_5
#[test]
fn s_has_signs_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x26, 0x2A, 0x2A, 0x91, 0x91, 0xD4,
		0xD4, 0x2A, 0x91, 0x2A, 0x91, 0x93, 0x91, 0xD4,
	];
	const BASE: &[u8] = &[
		0x93, 0x26, 0xD4, 0x2A, 0x91,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_7
#[test]
fn s_has_signs_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x02, 0x10, 0x21, 0x02, 0xAA, 0x21, 0xEC, 0x02,
		0x02, 0x02, 0x5E, 0x02,
	];
	const BASE: &[u8] = &[
		0x10, 0x02, 0xEC, 0xAA, 0x21, 0x55, 0x5E,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_11
#[test]
fn s_has_signs_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0xA4, 0xFE, 0xFD, 0xFD, 0xFD, 0xFE,
		0xFD, 0xC2, 0x22,
	];
	const BASE: &[u8] = &[
		0xFE, 0x22, 0xFD, 0x90, 0xF7, 0xA0, 0x57, 0x5C, 0xC2, 0x07, 0xA4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_13
#[test]
fn s_has_signs_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0xC9, 0xA2, 0xC9, 0x53, 0x81, 0xC1, 0x81, 0x81, 0x81,
	];
	const BASE: &[u8] = &[
		0x89, 0x67, 0xC9, 0x04, 0xC1, 0x42, 0xA6, 0xD1, 0xA2, 0x1F, 0x81, 0x53, 0x62,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_19
#[test]
fn s_has_signs_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x5C, 0xA0, 0x87, 0x28, 0xA0, 0x7D, 0x05, 0x5C,
	];
	const BASE: &[u8] = &[
		0x31, 0xC9, 0x5C, 0x05, 0xD1, 0x28, 0x26, 0xA0, 0x1A, 0x62, 0x94, 0x91, 0x87, 0x71, 0xD6,
		0x23, 0x32, 0x7D, 0x5D,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_42
#[test]
fn s_has_signs_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0xD0, 0xB2, 0x93, 0x44, 0x43, 0x28,
	];
	const BASE: &[u8] = &[
		0xA0, 0x28, 0xB0, 0x50, 0x86, 0x93, 0x42, 0xBC, 0xB4, 0xF8, 0x92, 0x4A, 0x3A, 0x38, 0x3B,
		0x43, 0xD0, 0xE3, 0xB2, 0x31, 0xAD, 0x26, 0xDB, 0x4B, 0x44, 0x65, 0x91, 0xF4, 0xBB, 0x23,
		0x49, 0xFE, 0xC3, 0xA7, 0xF1, 0xE4, 0xA5, 0xEB, 0x6A, 0x25, 0xC7, 0xD5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_73
#[test]
fn s_has_signs_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x8B, 0x32, 0x99, 0x6C, 0x92, 0xA4,
	];
	const BASE: &[u8] = &[
		0xFF, 0x8B, 0x32, 0x70, 0xF4, 0xE9, 0xD5, 0xC9, 0x04, 0x3C, 0x6E, 0x72, 0xA8, 0xC5, 0xA3,
		0xA4, 0x25, 0x39, 0x21, 0x76, 0x6C, 0x8D, 0x67, 0x3B, 0x93, 0xBD, 0xEC, 0xFB, 0x96, 0x07,
		0xBA, 0xA5, 0x6F, 0x4F, 0xBE, 0x80, 0x3A, 0x51, 0x19, 0x74, 0x44, 0xE3, 0xA0, 0xAF, 0x92,
		0x99, 0xAE, 0xB6, 0xCC, 0x1F, 0x58, 0xC3, 0x57, 0x37, 0xCD, 0x34, 0xF1, 0xF3, 0xA7, 0xBF,
		0x4B, 0x2E, 0xC4, 0x88, 0x17, 0x11, 0x9F, 0xF8, 0xEE, 0x84, 0x45, 0x10, 0xFD,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_113
#[test]
fn s_has_signs_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x2B, 0x1C, 0x30, 0xAD, 0xED, 0xD2,
	];
	const BASE: &[u8] = &[
		0x8C, 0xA8, 0xAE, 0x75, 0x22, 0x2F, 0xA1, 0xD2, 0x54, 0xE9, 0x3F, 0x21, 0x71, 0x1C, 0x95,
		0xA4, 0x50, 0x6C, 0xBF, 0x30, 0x43, 0x93, 0xA3, 0x83, 0x31, 0xCB, 0x5B, 0x7A, 0x47, 0xE6,
		0x14, 0xF0, 0x27, 0xF3, 0x11, 0xAD, 0xE1, 0x06, 0xCD, 0x89, 0x62, 0x9A, 0x29, 0xBE, 0x07,
		0xAF, 0x49, 0x85, 0x63, 0xD8, 0x15, 0x48, 0xCE, 0xED, 0x0F, 0xC2, 0x8F, 0xA6, 0xC3, 0x37,
		0xF7, 0x38, 0xDE, 0xD9, 0x5E, 0xB5, 0xE0, 0x36, 0xEC, 0x23, 0xF8, 0xBA, 0x40, 0xFF, 0x70,
		0x3A, 0xDD, 0x94, 0xFD, 0x7C, 0x35, 0x5D, 0x32, 0xC9, 0x1D, 0x76, 0xFB, 0x2A, 0x68, 0x97,
		0x6B, 0x24, 0x72, 0xB1, 0x3E, 0x7D, 0xA0, 0x52, 0xF1, 0xD6, 0xB4, 0x10, 0x9F, 0xE4, 0x8D,
		0x4E, 0x16, 0x2C, 0x78, 0x61, 0x9B, 0x4F, 0xE2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_193
#[test]
fn s_has_signs_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D,
		0x2D, 0x2D, 0xDA, 0x60, 0x37, 0xD6, 0xAA,
	];
	const BASE: &[u8] = &[
		0xB3, 0xDA, 0xDD, 0xE7, 0x11, 0x34, 0xB1, 0x46, 0x43, 0xA6, 0xE1, 0x95, 0x73, 0x9D, 0xD0,
		0x90, 0xC8, 0xBC, 0xE6, 0x4B, 0x03, 0x13, 0xD6, 0x16, 0xF8, 0xA9, 0x92, 0x51, 0xEC, 0x30,
		0xF7, 0xEB, 0x7C, 0x27, 0x33, 0x39, 0xB4, 0x8E, 0xC9, 0x55, 0xF5, 0xCC, 0x6E, 0xF2, 0xD8,
		0x5C, 0x1B, 0x5B, 0x88, 0x89, 0xAE, 0xD3, 0x4F, 0xAA, 0x36, 0x7F, 0xC2, 0xAC, 0xCE, 0x4E,
		0x8C, 0x57, 0x1A, 0xD9, 0x97, 0x69, 0xEA, 0x98, 0x29, 0x6F, 0x9A, 0xBB, 0x04, 0xD1, 0xA5,
		0x77, 0x21, 0xD5, 0x9F, 0xE8, 0xB7, 0xC5, 0xDB, 0x50, 0xA8, 0x74, 0xCB, 0x62, 0xA4, 0x1E,
		0x26, 0xF1, 0x5E, 0x96, 0xBE, 0x59, 0x38, 0x3B, 0xEF, 0x85, 0x93, 0xA0, 0x8D, 0x10, 0xB9,
		0x60, 0x56, 0xA7, 0x6C, 0xA3, 0xC4, 0x0E, 0x5D, 0x5A, 0xB6, 0xA2, 0x35, 0xC6, 0x1C, 0x07,
		0xC7, 0x6B, 0x8B, 0x66, 0x52, 0xCA, 0xBF, 0x2C, 0x79, 0x23, 0x44, 0x3C, 0x19, 0x9C, 0xF4,
		0xFE, 0x76, 0x2F, 0x37, 0xDF, 0x31, 0x91, 0x3A, 0x81, 0xEE, 0x87, 0x71, 0x9E, 0xC3, 0x75,
		0xCD, 0x41, 0x67, 0xE5, 0x7A, 0xBA, 0x06, 0x53, 0x65, 0x12, 0x28, 0x3D, 0xD7, 0x78, 0x22,
		0xF3, 0x8F, 0x63, 0x86, 0xB5, 0xFD, 0xFA, 0xE2, 0x68, 0x54, 0x49, 0x45, 0x48, 0x5F, 0x32,
		0x70, 0x94, 0xAD, 0xE4, 0xA1, 0xF0, 0x4D, 0xAB, 0x01, 0x72, 0x40, 0x8A, 0x6D,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_247
#[test]
fn s_has_signs_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2A, 0xC9, 0x1F, 0x2E,
	];
	const BASE: &[u8] = &[
		0x93, 0x06, 0x88, 0xBB, 0x0F, 0xB0, 0x34, 0xAF, 0x21, 0x2C, 0x47, 0xAC, 0x51, 0xEE, 0xFA,
		0x84, 0x7C, 0x6B, 0x94, 0xBA, 0xAA, 0x77, 0x02, 0xC4, 0xEC, 0xEB, 0x13, 0x75, 0x97, 0x7A,
		0x18, 0x67, 0xA5, 0x7F, 0xAB, 0x12, 0x9C, 0x68, 0xA7, 0xC8, 0xBD, 0xD6, 0x2F, 0x96, 0xF0,
		0xB2, 0xB4, 0x4C, 0xDC, 0x58, 0x44, 0xA3, 0xF6, 0xDE, 0x14, 0xF5, 0x89, 0x57, 0x32, 0xD5,
		0x71, 0x99, 0xDB, 0x1A, 0x65, 0x60, 0x43, 0x63, 0x6C, 0xBE, 0x38, 0xDF, 0xE7, 0xCD, 0x3F,
		0x45, 0xE8, 0x5F, 0xCC, 0x39, 0x07, 0x37, 0x53, 0x0E, 0x8D, 0xF4, 0xED, 0x11, 0x98, 0x4D,
		0x33, 0xE2, 0xE4, 0x26, 0x92, 0xE1, 0x90, 0xB7, 0x5D, 0xA2, 0x41, 0x05, 0x01, 0xEF, 0x1D,
		0xA8, 0x46, 0xAE, 0x9E, 0x16, 0x64, 0xD3, 0x1F, 0xCE, 0x17, 0x3C, 0xF9, 0x85, 0xB1, 0xD9,
		0xFF, 0x76, 0x6A, 0x54, 0x1C, 0xC9, 0xEA, 0x5E, 0x4E, 0xC2, 0xFB, 0x91, 0x4A, 0x69, 0x6F,
		0x74, 0x27, 0xF3, 0x62, 0x8C, 0xF7, 0x8A, 0x2A, 0x5B, 0xD4, 0xA1, 0x8B, 0xA0, 0x9F, 0xFE,
		0x3D, 0x72, 0x66, 0x5A, 0x1E, 0x78, 0x25, 0xAD, 0x35, 0xFD, 0x7D, 0x56, 0x6D, 0x15, 0x8F,
		0x22, 0xE6, 0xB8, 0xE5, 0xDA, 0xBC, 0x24, 0xE3, 0x1B, 0x87, 0x5C, 0xC7, 0x04, 0xD7, 0xD0,
		0x4B, 0xC6, 0x7E, 0x59, 0x82, 0x7B, 0xD1, 0x36, 0x49, 0xB6, 0x31, 0x81, 0x2E, 0x9D, 0x86,
		0xB5, 0x61, 0xE9, 0x3B, 0xC5, 0x42, 0x70, 0x80, 0x55, 0x10, 0xCA, 0x83, 0x30, 0x73, 0x3A,
		0xE0, 0xA9, 0xCB, 0xFC, 0xA6, 0xF2, 0xC3, 0x03, 0xC0, 0xB3, 0x40, 0x23, 0x28, 0xD2, 0xDD,
		0x50, 0x9A, 0x79, 0x08, 0x29, 0x95, 0x8E, 0x9B, 0xB9, 0xA4, 0xD8, 0x3E, 0x52, 0xCF, 0x6E,
		0xC1, 0xF1, 0x4F, 0xBF, 0xF8, 0x48, 0x19,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_2
#[test]
fn s_has_zeros_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F,
		0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
	];
	const BASE: &[u8] = &[
		0x8F, 0x9E,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_3
#[test]
fn s_has_zeros_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A,
		0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x3E, 0xF5, 0x3E, 0x3E, 0xF5, 0x3E, 0xF5, 0xF5, 0xF5, 0x3E,
		0xF5, 0x3E, 0x3E, 0x4A, 0xF5, 0x4A, 0xF5, 0x3E, 0x4A, 0x3E,
	];
	const BASE: &[u8] = &[
		0x4A, 0x3E, 0xF5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_5
#[test]
fn s_has_zeros_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
		0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B,
		0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0xC0, 0x4C, 0x4C, 0x72, 0x72, 0x0E, 0x0E, 0x4C, 0x72, 0x4C,
		0x72, 0x3B, 0x72, 0x0E,
	];
	const BASE: &[u8] = &[
		0x3B, 0xC0, 0x0E, 0x4C, 0x72,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_7
#[test]
fn s_has_zeros_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x67, 0x15, 0x7F,
		0x67, 0xA7, 0x7F, 0x74, 0x67, 0x67, 0x67, 0x38, 0x67,
	];
	const BASE: &[u8] = &[
		0x15, 0x67, 0x74, 0xA7, 0x7F, 0x76, 0x38,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_11
#[test]
fn s_has_zeros_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x5C, 0x9F, 0x72, 0x72, 0x72, 0x9F, 0x72, 0x0F, 0x95,
	];
	const BASE: &[u8] = &[
		0x9F, 0x95, 0x72, 0xF9, 0x32, 0x88, 0xA3, 0x76, 0x0F, 0x83, 0x5C,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_13
#[test]
fn s_has_zeros_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0xF4, 0x1C, 0xF4, 0xB8, 0x05, 0x4F, 0x05, 0x05, 0x05,
	];
	const BASE: &[u8] = &[
		0x5F, 0x1E, 0xF4, 0x44, 0x4F, 0xD0, 0x42, 0xD7, 0x1C, 0x91, 0x05, 0xB8, 0x7B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_19
#[test]
fn s_has_zeros_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x42, 0xFC, 0x46, 0xDF, 0xFC, 0x64, 0x9A, 0x42,
	];
	const BASE: &[u8] = &[
		0x23, 0xD0, 0x42, 0x9A, 0x6A, 0xDF, 0xE0, 0xFC, 0x74, 0x44, 0xF4, 0x5B, 0x46, 0xA5, 0x98,
		0xA1, 0x7A, 0x64, 0x6D,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_42
#[test]
fn s_has_zeros_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED, 0xED,
		0xED, 0xED, 0xED, 0xED, 0xA0, 0x8C, 0xD4, 0x4A, 0x48, 0x8D,
	];
	const BASE: &[u8] = &[
		0xED, 0x8D, 0xB3, 0x9B, 0xAE, 0xD4, 0xDA, 0x85, 0xA2, 0xF3, 0xFC, 0xD8, 0x4C, 0xB6, 0x63,
		0x48, 0xA0, 0x3C, 0x8C, 0x9E, 0xE4, 0x28, 0xBC, 0xB0, 0x4A, 0xC6, 0xFF, 0xA3, 0x42, 0x29,
		0x32, 0x4E, 0xE6, 0x10, 0x76, 0x99, 0xE7, 0x1D, 0x51, 0x27, 0x5D, 0xFB,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_73
#[test]
fn s_has_zeros_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0xF2, 0xF2, 0xD4, 0xA8, 0x4E, 0xF1, 0xBD, 0xA2,
	];
	const BASE: &[u8] = &[
		0xF2, 0xD4, 0xA8, 0x79, 0x57, 0x6D, 0x32, 0x25, 0x8C, 0x35, 0x67, 0x7C, 0x41, 0xDA, 0x4C,
		0xA2, 0x34, 0x75, 0x84, 0x91, 0xF1, 0x1F, 0x77, 0x6E, 0x9F, 0x5F, 0xFC, 0x02, 0x2C, 0x93,
		0x3E, 0xCB, 0x7B, 0xC8, 0x68, 0x5E, 0x1A, 0xC5, 0x40, 0x48, 0x01, 0x9B, 0xE6, 0x9D, 0xBD,
		0x4E, 0xD7, 0xD9, 0x16, 0x83, 0xA1, 0x6C, 0xEC, 0x76, 0xF4, 0x29, 0xC9, 0xC0, 0xFA, 0xDF,
		0xFF, 0x87, 0x71, 0x39, 0x65, 0xA5, 0x5C, 0x04, 0x37, 0x38, 0x7E, 0x3C, 0xF0,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_113
#[test]
fn s_has_zeros_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0x34, 0x6D, 0x15, 0xB7, 0xC3,
	];
	const BASE: &[u8] = &[
		0xC8, 0xDB, 0x80, 0x88, 0x8D, 0x84, 0xC2, 0xC3, 0x1E, 0xE1, 0xDC, 0x5B, 0x67, 0x34, 0x69,
		0x8A, 0x42, 0x78, 0x28, 0x6D, 0x9E, 0x08, 0x74, 0xF9, 0x29, 0x65, 0x77, 0x7D, 0xBF, 0x33,
		0x01, 0x63, 0x85, 0x4A, 0xE5, 0x15, 0x3F, 0x93, 0x27, 0x70, 0x71, 0x68, 0xFB, 0xB8, 0xBE,
		0x9B, 0xD7, 0xAB, 0xD5, 0x59, 0x23, 0xBD, 0x26, 0xB7, 0x57, 0x50, 0x1F, 0xC7, 0xE6, 0x7E,
		0x3D, 0xDA, 0x7F, 0xD3, 0x82, 0xC9, 0x02, 0x52, 0x92, 0xFA, 0x6C, 0x91, 0x8C, 0x83, 0x10,
		0x56, 0x87, 0xF7, 0x03, 0x4C, 0xD1, 0xA3, 0x17, 0xB1, 0xAA, 0x62, 0x05, 0x49, 0xD2, 0x79,
		0x06, 0xA6, 0x04, 0xFD, 0x44, 0xFF, 0x1C, 0xC4, 0x1A, 0xB6, 0xE4, 0x97, 0xB3, 0x24, 0xD4,
		0x75, 0x7A, 0xFE, 0xE0, 0x12, 0x41, 0x18, 0x99,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_193
#[test]
fn s_has_zeros_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x41, 0x30, 0xD9, 0x84,
		0x6D,
	];
	const BASE: &[u8] = &[
		0x9B, 0x41, 0xB8, 0xDD, 0x21, 0x93, 0xE2, 0x61, 0x1B, 0x4B, 0xBC, 0x6C, 0x23, 0x89, 0x68,
		0xB7, 0xC0, 0x5A, 0x96, 0xC6, 0xE5, 0x52, 0x84, 0x94, 0x9E, 0xBE, 0x8A, 0xB2, 0x4D, 0x64,
		0xBA, 0x6F, 0x11, 0xA1, 0xAD, 0x98, 0x8F, 0x01, 0x51, 0xF2, 0x4A, 0x79, 0xC2, 0x8D, 0x34,
		0x1A, 0x62, 0xFF, 0x49, 0xCE, 0x06, 0x3B, 0x71, 0x6D, 0x37, 0xC7, 0xAF, 0x7A, 0x88, 0x29,
		0x7B, 0xC1, 0xB0, 0x97, 0x67, 0x58, 0x24, 0xE4, 0x72, 0xE3, 0xA3, 0x31, 0x44, 0x81, 0xFC,
		0xCA, 0x99, 0x8E, 0x03, 0x9F, 0x32, 0x95, 0x40, 0x26, 0x56, 0x59, 0xC3, 0xBB, 0x6E, 0x77,
		0xDC, 0xAB, 0x02, 0x3F, 0xDB, 0x5C, 0xD2, 0xA7, 0x22, 0xED, 0xA9, 0xDA, 0x7D, 0x04, 0x2F,
		0x30, 0xDF, 0x3C, 0xF6, 0xCD, 0xEE, 0xEA, 0x5F, 0x2C, 0xA5, 0x35, 0x53, 0xF8, 0xD6, 0x8C,
		0x25, 0x13, 0xD0, 0xAE, 0xFE, 0x76, 0x85, 0x63, 0x12, 0x16, 0xFA, 0xD8, 0xEF, 0x82, 0xD4,
		0x5D, 0xB9, 0xD5, 0xD9, 0x19, 0xB3, 0xE7, 0x3A, 0xE9, 0x28, 0xE1, 0x18, 0x60, 0x42, 0xC4,
		0x1F, 0x2A, 0x0E, 0x69, 0x90, 0xA0, 0x86, 0x65, 0xD7, 0x73, 0x7C, 0xD3, 0xE6, 0x83, 0x2E,
		0x1D, 0x4F, 0x7F, 0x08, 0x87, 0x6B, 0xAA, 0xB6, 0x6A, 0x92, 0x9D, 0xF1, 0x80, 0x10, 0xF3,
		0xEB, 0x70, 0xB4, 0xAC, 0x07, 0x1C, 0xF4, 0x4C, 0xEC, 0x05, 0x7E, 0x43, 0xB5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_247
#[test]
fn s_has_zeros_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x70, 0x56, 0xC4, 0x64,
	];
	const BASE: &[u8] = &[
		0x34, 0xD4, 0xA7, 0x3F, 0x3B, 0xC7, 0x33, 0x1A, 0xB9, 0x1D, 0x36, 0xB2, 0xB5, 0x65, 0x04,
		0xAF, 0x7A, 0xE9, 0x23, 0x9D, 0xA4, 0x96, 0xFF, 0xD5, 0xB4, 0x26, 0xD1, 0x08, 0x9F, 0x67,
		0x5C, 0x82, 0x5B, 0x6B, 0x35, 0x80, 0x7C, 0xB0, 0x95, 0xDF, 0xF6, 0xAA, 0xD7, 0x2E, 0x0F,
		0xAD, 0x49, 0x21, 0x81, 0xFC, 0x11, 0x4C, 0xCE, 0x98, 0xA8, 0x7E, 0xA1, 0x9A, 0x1C, 0x8E,
		0xD6, 0x60, 0x4A, 0xCD, 0x8B, 0xEE, 0xF9, 0xF5, 0xBB, 0xE7, 0x5F, 0x07, 0x69, 0x66, 0xFB,
		0x03, 0xD0, 0x6D, 0x68, 0x1B, 0xFA, 0x40, 0xE8, 0x3C, 0x18, 0x72, 0x32, 0xF0, 0xB7, 0xE5,
		0x53, 0xDE, 0x74, 0xF4, 0x06, 0x89, 0x92, 0x22, 0x5E, 0xAE, 0xD9, 0xE4, 0xC5, 0x55, 0x76,
		0x29, 0x9C, 0xCA, 0xDA, 0xF1, 0xBF, 0x39, 0xC4, 0x46, 0x6A, 0x61, 0x6E, 0xD3, 0x2C, 0x5A,
		0x8A, 0x16, 0x51, 0x8C, 0x78, 0x56, 0xAC, 0xF7, 0xB6, 0x17, 0xD8, 0x75, 0x0E, 0xB3, 0xCC,
		0xA5, 0x83, 0x84, 0x47, 0x37, 0x10, 0x3E, 0x70, 0xC8, 0x25, 0xEB, 0x02, 0x8D, 0xEA, 0xA9,
		0x31, 0x90, 0x63, 0xEC, 0xBA, 0x4E, 0x43, 0xD2, 0x41, 0x57, 0x77, 0x7B, 0xDC, 0x5D, 0x59,
		0x6F, 0x24, 0xB1, 0x1E, 0x4F, 0x2A, 0x1F, 0x62, 0xA0, 0x50, 0xF3, 0xC6, 0xDD, 0xA3, 0xBC,
		0xC1, 0x45, 0x73, 0x38, 0x79, 0x6C, 0x4B, 0xE2, 0xFE, 0xAB, 0x4D, 0x85, 0x64, 0x12, 0x01,
		0x9B, 0xE0, 0x3D, 0xC9, 0x19, 0x48, 0x14, 0x27, 0x2F, 0x93, 0x30, 0x3A, 0x44, 0x71, 0x42,
		0xE1, 0x8F, 0x94, 0x91, 0x54, 0x7D, 0x15, 0x7F, 0xBD, 0x99, 0xED, 0xC3, 0xF8, 0x88, 0x28,
		0xC0, 0xBE, 0x13, 0x05, 0xB8, 0xF2, 0x86, 0xFD, 0x87, 0xC2, 0xDB, 0xE3, 0xCB, 0x9E, 0xE6,
		0x52, 0xA6, 0xEF, 0x58, 0xCF, 0x97, 0xA2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A,
		0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A,
		0x9A, 0xBC, 0x8A, 0x50, 0xC0, 0x4F, 0xE6, 0xE3, 0xCF, 0x37, 0xB4, 0x42, 0xE8, 0xF3, 0xD8,
		0xC3, 0x39, 0x48, 0x33, 0x06, 0x89, 0x42, 0x69, 0x3B, 0x48, 0x09, 0x4B, 0xEE, 0x0D, 0x2B,
		0x7E, 0x9E, 0xC5, 0x05, 0x8F, 0x99, 0x50, 0xEB, 0x8A, 0x13, 0x06, 0x6D, 0x27,
	];
	const BASE: &[u8] = &[
		0xA8, 0x9A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xEA, 0xA6, 0xEA, 0xEA, 0xA6, 0xEA, 0xA6, 0xA6, 0xA6, 0xEA, 0xA6, 0xEA, 0xEA, 0xD6, 0xA6,
		0xD6, 0xA6, 0xEA, 0xD6, 0xEA, 0x10, 0xC3, 0x3B, 0xD0, 0x07, 0x65,
	];
	const BASE: &[u8] = &[
		0xD6, 0xEA, 0xA6,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x78, 0x02, 0x02, 0x55, 0x55, 0x8D, 0x8D, 0x02, 0x55, 0x02, 0x55, 0xA0, 0x55, 0x8D, 0x34,
		0xAC, 0x68, 0x44, 0x99, 0x9C, 0xED, 0x3B, 0x5C, 0x6D, 0xA2, 0x5E, 0xA6, 0x75, 0xE2, 0x84,
		0x48, 0x98, 0xCC, 0x70, 0xEE, 0xF9, 0x8A, 0xAA, 0x8F, 0x10, 0xDF, 0xE2, 0xD8, 0x83, 0xE6,
		0x26, 0xC1, 0x19, 0xD8, 0x91, 0xC2, 0xBA,
	];
	const BASE: &[u8] = &[
		0xA0, 0x78, 0x8D, 0x02, 0x55,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x54, 0xC2, 0xD4, 0x54, 0x3D, 0xD4, 0xE2, 0x54, 0x54, 0x54, 0x5E, 0x54, 0x84, 0xF4, 0xC0,
		0x5F, 0x7F, 0x93, 0x17, 0x0D, 0xE5, 0x42, 0x62, 0xBD, 0x50, 0xAC, 0x58, 0xCE, 0x7A, 0xC3,
		0x52, 0x58, 0x53, 0x93, 0xE8, 0x47, 0xA1, 0x40, 0xBB, 0xC6, 0xBC, 0x6E, 0x87, 0xFC, 0xF5,
		0xD1, 0x8B,
	];
	const BASE: &[u8] = &[
		0xC2, 0x54, 0xE2, 0x3D, 0xD4, 0x13, 0x5E,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xCF, 0x93, 0x19, 0x19, 0x19, 0x93, 0x19, 0xA8, 0xB8, 0xB7, 0xD7, 0xEB, 0xDF, 0xA7,
	];
	const BASE: &[u8] = &[
		0x93, 0xB8, 0x19, 0x7C, 0xEE, 0xC7, 0x80, 0xFB, 0xA8, 0xE4, 0xCF,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xEA, 0x58, 0xEA, 0xB9, 0x04, 0x06, 0x04, 0x04, 0x04, 0xC6, 0xA3, 0x47, 0x23, 0x62, 0xA6,
		0x4B, 0xF6, 0x87, 0x6F, 0x05, 0xF0, 0x9C, 0x2A, 0x75,
	];
	const BASE: &[u8] = &[
		0x9F, 0xCE, 0xEA, 0xEF, 0x06, 0xDE, 0xC2, 0x98, 0x58, 0x7D, 0x04, 0xB9, 0xA0,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x81, 0xE9, 0x27, 0x1E, 0xE9, 0x84, 0xBB, 0x81, 0x86, 0x88, 0x49, 0x64, 0x0B, 0xE8, 0x98,
		0x1D, 0x53, 0x08, 0xF9, 0x04,
	];
	const BASE: &[u8] = &[
		0x1A, 0xDF, 0x81, 0xBB, 0xF8, 0x1E, 0xF4, 0xE9, 0xE2, 0xDA, 0x3E, 0xAF, 0x27, 0x3B, 0xFA,
		0xCD, 0x4A, 0x84, 0xA0,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x76, 0x07, 0x97, 0x30, 0x38, 0x9A, 0xCE, 0x65, 0xED, 0x23, 0x2B, 0x57, 0x16, 0xE5, 0xFC,
		0x9B, 0x22, 0x0E,
	];
	const BASE: &[u8] = &[
		0xF4, 0x9A, 0xEA, 0xC4, 0x50, 0x97, 0x1C, 0xE9, 0xF3, 0x31, 0x01, 0xB0, 0xE1, 0xF5, 0xC3,
		0x38, 0x76, 0xCB, 0x07, 0xD1, 0x61, 0xAA, 0x1B, 0x14, 0x30, 0x17, 0x2F, 0x3E, 0x91, 0xDC,
		0x8B, 0xFF, 0xCC, 0xCA, 0x56, 0x55, 0x66, 0x87, 0x26, 0xF2, 0xD8, 0xEF,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x46, 0x25, 0x42, 0xA4, 0x76, 0xD0, 0xFA, 0xB8, 0x3F, 0x72, 0x50, 0xC5, 0x09, 0x50, 0xA6,
		0x9D,
	];
	const BASE: &[u8] = &[
		0xE2, 0x46, 0x25, 0xC2, 0x03, 0xF3, 0xDF, 0x87, 0xAC, 0x15, 0x49, 0x63, 0x5C, 0xEE, 0x69,
		0xD0, 0x44, 0x0F, 0x66, 0x34, 0xA4, 0x8A, 0xC8, 0xBD, 0x9F, 0x41, 0xE0, 0xDD, 0xBA, 0x5E,
		0xB3, 0x06, 0xEF, 0xD6, 0x60, 0x6A, 0x9A, 0xD9, 0x5B, 0x7B, 0x53, 0xD7, 0x3E, 0x47, 0x76,
		0x42, 0x84, 0xCE, 0xB5, 0x94, 0xFC, 0xA3, 0x36, 0x07, 0x27, 0x8F, 0xBC, 0x57, 0x93, 0x2C,
		0xC7, 0xD2, 0x7C, 0xFB, 0x2E, 0xD5, 0x22, 0xFE, 0x1F, 0x45, 0x31, 0xC6, 0x67,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xB1, 0xF6, 0x41, 0xD1, 0x5D, 0x5F, 0x44, 0xA2, 0x8E, 0x63, 0xF3, 0x83, 0xE1, 0x6F, 0x3B,
		0x8B, 0x60, 0x90, 0x90, 0x6C, 0x24,
	];
	const BASE: &[u8] = &[
		0xDE, 0x9D, 0x56, 0xD4, 0x12, 0x37, 0xFC, 0x5D, 0xBA, 0x5B, 0x1E, 0xC1, 0x88, 0xB1, 0x39,
		0x04, 0x0F, 0x62, 0x6A, 0xF6, 0x16, 0x7D, 0xD2, 0xAA, 0xFB, 0x69, 0x08, 0xCC, 0x45, 0x7F,
		0xB6, 0xCD, 0x33, 0xAC, 0xFF, 0x41, 0xB7, 0x3F, 0xDB, 0xA0, 0x91, 0xB5, 0x49, 0x3A, 0x42,
		0xE0, 0x4F, 0x34, 0x01, 0xB8, 0x4B, 0x8A, 0xE7, 0xD1, 0x73, 0x87, 0xF4, 0x50, 0x40, 0x9C,
		0xDC, 0x4D, 0x52, 0x19, 0x68, 0x99, 0x65, 0x9F, 0x98, 0xBB, 0x94, 0x97, 0x07, 0x11, 0xB9,
		0xAD, 0xC3, 0x35, 0x92, 0x51, 0xD7, 0x70, 0xA4, 0xC0, 0xB4, 0x9E, 0xEB, 0x26, 0x30, 0xCB,
		0x6E, 0x7C, 0x7E, 0x47, 0xE3, 0x23, 0x75, 0xE8, 0xFE, 0x5C, 0xC8, 0x58, 0x1A, 0xE6, 0x5E,
		0x7B, 0x80, 0x4E, 0x1B, 0xAF, 0x36, 0xA3, 0x38,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xD1, 0xDC, 0x68, 0x72, 0x34, 0x4D, 0xC9, 0x04, 0xE6, 0x4E, 0x64, 0x5D, 0x9A, 0x48, 0x87,
		0x4B, 0x69, 0x3F, 0xFD, 0xD6, 0x7E, 0xE7, 0x7E, 0x91, 0xE6, 0x1E, 0xE8, 0x06, 0xDA, 0x52,
		0x2B, 0xA8, 0x39, 0xE6, 0x48, 0x52, 0xBB, 0xC9,
	];
	const BASE: &[u8] = &[
		0xA9, 0xD1, 0xBE, 0x1A, 0x6E, 0xD7, 0x26, 0xF3, 0x89, 0x3A, 0x76, 0xC6, 0x6F, 0x2A, 0xD2,
		0x05, 0x81, 0xFA, 0x85, 0x45, 0xB9, 0xBC, 0x72, 0xF5, 0xC8, 0x53, 0xC7, 0x0E, 0xAF, 0x9C,
		0xCF, 0x9B, 0xAE, 0xA3, 0x86, 0x92, 0x24, 0xA7, 0xC2, 0xBA, 0xB3, 0x8B, 0x51, 0xF8, 0x74,
		0x16, 0x70, 0x1B, 0x88, 0x90, 0x8D, 0xD9, 0xEE, 0x34, 0xB7, 0x2C, 0x50, 0x2E, 0x93, 0x9F,
		0x30, 0x32, 0x07, 0x7C, 0x63, 0x08, 0x1F, 0x59, 0x31, 0xA6, 0x57, 0xC4, 0xD4, 0x4C, 0x15,
		0xD8, 0xA5, 0xB2, 0x44, 0xFC, 0x61, 0x49, 0x1C, 0xF0, 0x13, 0x9E, 0x22, 0x7B, 0xDD, 0xCA,
		0x36, 0xAD, 0x3E, 0x5F, 0x02, 0xE4, 0x67, 0xA4, 0xF1, 0x47, 0x94, 0x3B, 0x0F, 0xE5, 0x7D,
		0xDC, 0xA0, 0x6D, 0xCC, 0xDB, 0xE2, 0x5C, 0x6B, 0xEA, 0x4F, 0x14, 0x5E, 0x71, 0x95, 0x7A,
		0xF2, 0x3C, 0x6C, 0xFF, 0xE0, 0x03, 0xF9, 0x73, 0xB6, 0xBF, 0x17, 0xAA, 0x12, 0x99, 0x37,
		0xB5, 0xBD, 0x62, 0x68, 0x84, 0x42, 0x54, 0xDF, 0x40, 0x1D, 0xB1, 0x83, 0x3D, 0xAB, 0xCE,
		0x66, 0x78, 0x43, 0x98, 0xFB, 0x55, 0x21, 0x10, 0x11, 0xF4, 0x18, 0x28, 0x19, 0x97, 0x8F,
		0xC5, 0x46, 0xAC, 0x6A, 0x23, 0x8C, 0xE9, 0x01, 0x8E, 0x27, 0x7F, 0x8A, 0x29, 0xD0, 0x58,
		0xEB, 0x9D, 0xEF, 0xDE, 0x65, 0xB0, 0xCB, 0x5A, 0xCD, 0x96, 0xC0, 0x2F, 0x60,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xF2, 0x2C, 0x2F, 0x80, 0x0D, 0x0A, 0x20, 0x0C, 0x2D,
	];
	const BASE: &[u8] = &[
		0xB6, 0x44, 0x49, 0x4E, 0x4C, 0x5A, 0xE8, 0xEB, 0xA4, 0x76, 0x92, 0xD4, 0xDE, 0x31, 0x32,
		0xA0, 0xF1, 0xFA, 0x9E, 0xF4, 0xAF, 0xEC, 0x65, 0x70, 0xC0, 0xA2, 0x30, 0x13, 0x73, 0x38,
		0x8B, 0x88, 0x3A, 0xE4, 0x26, 0xDA, 0x02, 0xC2, 0x29, 0x66, 0xFF, 0xEE, 0xAA, 0x6B, 0x11,
		0x14, 0x62, 0x37, 0x86, 0x5C, 0x2A, 0x4A, 0xA5, 0xC9, 0xD7, 0xC4, 0x12, 0x8A, 0xCD, 0x35,
		0x4D, 0xF8, 0xB3, 0xE3, 0x8C, 0x39, 0xD0, 0x85, 0x61, 0xF7, 0xC3, 0x7C, 0xA3, 0xFD, 0x77,
		0xF5, 0xAE, 0x25, 0xB4, 0xF3, 0x83, 0x69, 0xAD, 0x63, 0x51, 0xEA, 0xBE, 0x7A, 0x6F, 0xD1,
		0x1F, 0x27, 0x2E, 0xA6, 0x55, 0x3E, 0x34, 0x68, 0xC5, 0xCE, 0x1A, 0xB0, 0x47, 0xA1, 0xE9,
		0x64, 0x52, 0x94, 0xA9, 0x33, 0xE2, 0x9C, 0x2F, 0x48, 0xE5, 0x15, 0x72, 0xAB, 0x1B, 0xA8,
		0x22, 0x79, 0x03, 0xE6, 0x08, 0x2C, 0x40, 0xB7, 0x05, 0xE7, 0x91, 0x36, 0x8D, 0x58, 0xBD,
		0x06, 0xC8, 0x17, 0x9B, 0xCB, 0x7B, 0x3D, 0xF2, 0x74, 0xCF, 0xD6, 0x54, 0x78, 0xBA, 0x43,
		0x75, 0x0E, 0xE0, 0x9D, 0xDD, 0x50, 0x45, 0x6C, 0x95, 0x96, 0x53, 0xDC, 0x5D, 0xA7, 0x1C,
		0xBB, 0xB5, 0x57, 0x6A, 0x8E, 0xF6, 0x24, 0x59, 0xEF, 0x1E, 0xC1, 0xD3, 0x01, 0x98, 0x5B,
		0x7F, 0xE1, 0xDB, 0x4F, 0xED, 0xC7, 0x56, 0xCA, 0x18, 0xD9, 0x3F, 0x84, 0x80, 0x6D, 0x81,
		0xF9, 0x8F, 0xD2, 0xFE, 0xD5, 0x6E, 0x7D, 0x9F, 0xAC, 0x07, 0xDF, 0x7E, 0x5F, 0x90, 0xB9,
		0x0F, 0x3B, 0xC6, 0x21, 0xFB, 0xBF, 0x41, 0xBC, 0x87, 0x71, 0x4B, 0x67, 0x9A, 0xB8, 0x3C,
		0xB1, 0x82, 0xFC, 0xD8, 0x1D, 0x19, 0x16, 0x42, 0xB2, 0x46, 0x89, 0x04, 0x93, 0xF0, 0x60,
		0x28, 0xCC, 0x10, 0x5E, 0x23, 0x97, 0x99,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_2
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x0B, 0x09, 0x0B, 0x09, 0x0C, 0x20, 0x0C, 0x0C, 0x0A, 0x0D, 0x0D, 0x0A, 0x0A, 0x09, 0x2B,
		0x2B, 0x2B, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
		0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
		0x51, 0x51, 0x51,
	];
	const BASE: &[u8] = &[
		0xA5, 0x51,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_3
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x0B, 0x0A, 0x0B, 0x0A, 0x0C, 0x09, 0x0D, 0x09, 0x0D, 0x20, 0x0C, 0x0D, 0x0D, 0x0B, 0x0A,
		0x0B, 0x0B, 0x09, 0x0D, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20, 0x09, 0x0A, 0x0A, 0x09, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x1A, 0x7B, 0x1A,
		0x1A, 0x7B, 0x1A, 0x7B, 0x7B, 0x7B, 0x1A, 0x7B, 0x1A, 0x1A, 0x14, 0x7B, 0x14, 0x7B, 0x1A,
		0x14, 0x1A,
	];
	const BASE: &[u8] = &[
		0x14, 0x1A, 0x7B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_5
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x09, 0x0C, 0x0D, 0x0A, 0x0C, 0x20, 0x09, 0x0B, 0x20, 0x0B, 0x2B, 0x2B, 0xED, 0x3E, 0x3E,
		0x5D, 0x5D, 0xEE, 0xEE, 0x3E, 0x5D, 0x3E, 0x5D, 0xA5, 0x5D, 0xEE,
	];
	const BASE: &[u8] = &[
		0xA5, 0xED, 0xEE, 0x3E, 0x5D,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_7
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x0D, 0x0C, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x16, 0xA1, 0x54, 0x16, 0x12,
		0x54, 0xCA, 0x16, 0x16, 0x16, 0x53, 0x16,
	];
	const BASE: &[u8] = &[
		0xA1, 0x16, 0xCA, 0x12, 0x54, 0x57, 0x53,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_11
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x09, 0x20, 0x09, 0x0D, 0x0A, 0x20, 0x0B, 0x09, 0x0D, 0x0C, 0x0C, 0x0C, 0x20, 0x0C, 0x0B,
		0x20, 0x0D, 0x0B, 0x09, 0x0B, 0x0A, 0x09, 0x0B, 0x0D, 0x20, 0x0C, 0x0D, 0x0C, 0x0D, 0x09,
		0x0A, 0x0A, 0x09, 0x0D, 0x09, 0x09, 0x09, 0x2B, 0x2B, 0x14, 0x41, 0x88, 0x88, 0x88, 0x41,
		0x88, 0xAE, 0xB2,
	];
	const BASE: &[u8] = &[
		0x41, 0xB2, 0x88, 0x70, 0x73, 0x85, 0x4E, 0x9C, 0xAE, 0xC8, 0x14,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_13
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x0D, 0x0D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D,
		0x9F, 0x13, 0x9F, 0xDD, 0x7A, 0xB7, 0x7A, 0x7A, 0x7A,
	];
	const BASE: &[u8] = &[
		0xFD, 0xE4, 0x9F, 0xE8, 0xB7, 0xC1, 0x6E, 0x03, 0x13, 0x49, 0x7A, 0xDD, 0x77,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_19
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x09, 0x0A, 0x20, 0x20, 0x09, 0x0B, 0x0C, 0x0B, 0x0A, 0x0B, 0x0D, 0x0B, 0x09, 0x09, 0x09,
		0x0B, 0x0B, 0x0D, 0x09, 0x0B, 0x0C, 0x0A, 0x0A, 0x0A, 0x0C, 0x0D, 0x0B, 0x0B, 0x0B, 0x0B,
		0x20, 0x0D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2D, 0x97, 0x87, 0x3A, 0x3F, 0x87, 0x28, 0x8A, 0x97,
	];
	const BASE: &[u8] = &[
		0x01, 0x46, 0x97, 0x8A, 0x8F, 0x3F, 0xD6, 0x87, 0xE9, 0x1B, 0x8B, 0xC7, 0x3A, 0x40, 0x7B,
		0x19, 0x48, 0x28, 0xCE,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_42
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x0B, 0x0D, 0x0C, 0x0A, 0x0B, 0x0A, 0x0D, 0x09, 0x0B, 0x0A, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x8F, 0xC4, 0xA8, 0xFE, 0xED, 0xCA,
	];
	const BASE: &[u8] = &[
		0x97, 0xCA, 0xD6, 0x76, 0x08, 0xA8, 0xC2, 0xB1, 0x4C, 0x05, 0x2C, 0x16, 0x3C, 0x70, 0x2F,
		0xED, 0x8F, 0x23, 0xC4, 0xF0, 0x46, 0x83, 0x27, 0x79, 0xFE, 0x6F, 0x31, 0xF1, 0xAF, 0x64,
		0x1B, 0x7F, 0x67, 0xE9, 0xEA, 0xE2, 0x4E, 0xFF, 0x5B, 0x06, 0xA7, 0x74,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_73
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x20, 0x20, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x39, 0x30, 0x6C, 0x5F, 0xA2, 0x76,
	];
	const BASE: &[u8] = &[
		0x5A, 0x39, 0x30, 0x06, 0x7E, 0xFB, 0xB1, 0x36, 0x9E, 0x1D, 0xCF, 0xD6, 0x2A, 0x3B, 0x1B,
		0x76, 0xB6, 0x5E, 0x04, 0x10, 0x5F, 0xE8, 0x65, 0x66, 0x56, 0xC8, 0x4F, 0xCA, 0x8F, 0x0F,
		0xB3, 0x61, 0xDA, 0x13, 0x71, 0xB8, 0x38, 0x6E, 0x84, 0x55, 0x51, 0xBB, 0x14, 0x29, 0xA2,
		0x6C, 0xA1, 0xAA, 0x07, 0xCE, 0x8A, 0x9B, 0x95, 0x7B, 0x97, 0x18, 0xE4, 0x91, 0xAC, 0x50,
		0x45, 0x0E, 0xA9, 0x03, 0x5C, 0xA7, 0x67, 0x9F, 0xD5, 0xE7, 0x7C, 0x33, 0x72,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_113
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x0C, 0x0A, 0x0B, 0x0D, 0x0D, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x0B, 0x09, 0x0B, 0x0D, 0x20,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x5A, 0x91, 0x87, 0x6B, 0x1D,
	];
	const BASE: &[u8] = &[
		0x10, 0xE2, 0x57, 0x1B, 0x40, 0xFA, 0xF4, 0x1D, 0x8F, 0xAE, 0x7F, 0xAC, 0x08, 0x5A, 0xD8,
		0xC5, 0x76, 0xC1, 0xBB, 0x91, 0xAD, 0x29, 0x3F, 0xBC, 0xD3, 0x64, 0x9E, 0xE5, 0xB5, 0xE8,
		0xCB, 0xD2, 0x61, 0xC7, 0xF7, 0x87, 0x18, 0xA0, 0xB4, 0x47, 0x50, 0x32, 0x82, 0xC4, 0x9C,
		0xA3, 0x85, 0x98, 0x6A, 0x74, 0x35, 0x22, 0xD6, 0x6B, 0x11, 0x48, 0xDA, 0x23, 0x8D, 0xB2,
		0xB8, 0x7B, 0xD1, 0xEC, 0x70, 0xCF, 0x1F, 0x9A, 0xFC, 0x62, 0xFB, 0xC8, 0x14, 0xA1, 0x77,
		0x26, 0x8E, 0x51, 0x95, 0x4E, 0xA2, 0x8A, 0x9D, 0x13, 0x3D, 0x46, 0xD4, 0x6E, 0x71, 0xA8,
		0x54, 0x93, 0x15, 0x25, 0x38, 0x3C, 0x01, 0x5F, 0x27, 0x73, 0xFD, 0x5E, 0x80, 0xE6, 0x16,
		0x24, 0x4A, 0x89, 0x19, 0x99, 0xDE, 0xF8, 0xB7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_193
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x0B, 0x0B, 0x09, 0x0D, 0x0C, 0x20, 0x20, 0x0D, 0x0C, 0x0D, 0x0C, 0x20, 0x09, 0x0B, 0x09,
		0x0A, 0x0A, 0x0C, 0x0B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x68, 0xE6,
		0x67, 0x84, 0x87,
	];
	const BASE: &[u8] = &[
		0xDA, 0x68, 0xFF, 0x7C, 0x03, 0x7E, 0xDC, 0x7D, 0xBB, 0x56, 0xDD, 0xEE, 0x2C, 0x06, 0x31,
		0x3B, 0xCF, 0x45, 0xCA, 0x49, 0x61, 0x34, 0x84, 0x9F, 0x8D, 0x89, 0x54, 0x47, 0x30, 0x86,
		0xEA, 0xA9, 0x2E, 0x43, 0x2A, 0x80, 0xAB, 0xCE, 0x91, 0x9B, 0x4B, 0xE9, 0x48, 0x25, 0x5A,
		0xF7, 0x1E, 0x99, 0xB7, 0x83, 0x18, 0x39, 0xC4, 0x87, 0xE4, 0x8C, 0xE8, 0xBE, 0xF6, 0xDE,
		0xFE, 0xAF, 0xC0, 0x85, 0x95, 0x44, 0xDF, 0xD7, 0xB3, 0x69, 0xB6, 0xD1, 0x64, 0xDB, 0x07,
		0x19, 0xB9, 0x12, 0x72, 0x2F, 0x1D, 0x58, 0x3D, 0x22, 0x3F, 0x42, 0xD5, 0x7B, 0xC1, 0x70,
		0x96, 0x1B, 0xBA, 0xF9, 0x65, 0xA7, 0x62, 0x02, 0x8A, 0x53, 0x73, 0x7A, 0xC7, 0xEF, 0xED,
		0xE6, 0xF5, 0x88, 0x8E, 0x4F, 0x98, 0x29, 0xE5, 0x01, 0xF8, 0x1F, 0x63, 0xFD, 0x33, 0x24,
		0x75, 0x3A, 0xCB, 0x10, 0x74, 0x6F, 0x14, 0x82, 0x04, 0x08, 0x9E, 0xAE, 0xD6, 0x5E, 0x28,
		0x21, 0xE7, 0xA4, 0x67, 0x0F, 0xB8, 0x5B, 0xB1, 0xD0, 0xA1, 0xAA, 0x1C, 0x59, 0x94, 0xB4,
		0xB5, 0xD2, 0x3E, 0x51, 0xC6, 0xC3, 0xA6, 0xFA, 0x9D, 0x50, 0x79, 0x6A, 0x35, 0x55, 0xE1,
		0xF1, 0xA2, 0xC9, 0xAD, 0xD9, 0x46, 0xCD, 0xA5, 0x76, 0xF0, 0x9A, 0xEB, 0x6B, 0xC8, 0xD3,
		0x4A, 0x9C, 0x77, 0x0E, 0x8F, 0x05, 0x26, 0xD4, 0xE0, 0x4E, 0x52, 0x37, 0x7F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_247
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x0C, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x60, 0x2E, 0x0F,
		0x26,
	];
	const BASE: &[u8] = &[
		0x5C, 0x52, 0x6B, 0xFA, 0xAB, 0x27, 0xBE, 0x47, 0xCB, 0x37, 0x8C, 0x50, 0xFD, 0x0E, 0xB8,
		0x72, 0x9B, 0xC0, 0xF5, 0xBC, 0x69, 0x18, 0x24, 0x04, 0xE6, 0x92, 0x99, 0xC1, 0x31, 0x42,
		0xB4, 0x8E, 0xBA, 0xD9, 0x6F, 0x4B, 0x14, 0xAD, 0xE4, 0x6D, 0x51, 0xAC, 0x7F, 0x44, 0x21,
		0x90, 0xD2, 0xD3, 0x4E, 0x12, 0xD1, 0xA9, 0x7A, 0xE7, 0xA8, 0x53, 0x17, 0xAE, 0x34, 0x81,
		0x30, 0x79, 0xA1, 0x8F, 0x16, 0x23, 0xCE, 0xC7, 0xEC, 0xBD, 0x40, 0x9E, 0x43, 0x67, 0xC2,
		0x88, 0x39, 0x66, 0x3C, 0x57, 0x11, 0xF6, 0xD0, 0xE9, 0x5E, 0x62, 0x83, 0xD8, 0x05, 0x2F,
		0x65, 0x9A, 0xF0, 0x5B, 0x4A, 0xEE, 0xE8, 0xD5, 0x93, 0x02, 0xDB, 0x61, 0xDC, 0x54, 0xC9,
		0x89, 0x97, 0xB0, 0x78, 0x64, 0x1C, 0x5A, 0x0F, 0xF4, 0x63, 0xD4, 0xB5, 0xDF, 0x35, 0x46,
		0xF2, 0xA7, 0xED, 0x7B, 0xB6, 0x2E, 0x41, 0x9C, 0xF1, 0x4F, 0x25, 0xEB, 0x19, 0x74, 0xFE,
		0x36, 0xE1, 0x86, 0x8D, 0xE3, 0x95, 0xA2, 0x60, 0x15, 0x7E, 0x5D, 0x68, 0x71, 0x10, 0x9D,
		0x1B, 0x06, 0x4C, 0x98, 0x75, 0x13, 0x5F, 0xFC, 0x29, 0x08, 0xF7, 0xD6, 0xE5, 0xEA, 0xA4,
		0x9F, 0x84, 0xBF, 0x01, 0xC6, 0x33, 0xCD, 0xB9, 0x82, 0x59, 0x07, 0x7D, 0xEF, 0xCF, 0x2C,
		0x2A, 0x6E, 0xDD, 0xB3, 0xAA, 0x80, 0x91, 0xFB, 0xE2, 0xA5, 0xCA, 0xAF, 0x26, 0x03, 0x58,
		0xF9, 0x4D, 0x55, 0x45, 0xCC, 0x3A, 0x76, 0xB1, 0xB7, 0x96, 0x48, 0x22, 0x49, 0xE0, 0xC5,
		0x3B, 0x6C, 0x32, 0xC8, 0xBB, 0xC3, 0xFF, 0x85, 0x38, 0xD7, 0x1D, 0x3E, 0xC4, 0xDE, 0xF8,
		0x1E, 0x8B, 0x28, 0xA3, 0x8A, 0x1F, 0x77, 0xA0, 0xF3, 0x73, 0xDA, 0x7C, 0x70, 0x3D, 0xA6,
		0xB2, 0x94, 0x56, 0x6A, 0x3F, 0x87, 0x1A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_2
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x0D, 0x20, 0x20, 0x0D, 0x20, 0x20, 0x20, 0x0D, 0x09, 0x09, 0x20, 0x09, 0x0B, 0x09, 0x0A,
		0x0B, 0x0B, 0x0C, 0x0D, 0x0B, 0x0B, 0x0A, 0x0C, 0x09, 0x20, 0x0D, 0x20, 0x03, 0x03, 0x03,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x58, 0x58, 0x58,
		0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
		0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
	];
	const BASE: &[u8] = &[
		0x03, 0x58,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_3
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x0D, 0x0B, 0x20, 0x20, 0x09, 0x20, 0x0C, 0x0B, 0x0B, 0x09, 0x0B, 0x20, 0x0B, 0x0A, 0x0A,
		0x0C, 0x20, 0x20, 0x20, 0x0A, 0x0D, 0x09, 0x0D, 0x0C, 0x0C, 0x0B, 0x20, 0x0B, 0xAC, 0xAC,
		0xAC, 0xAC, 0xAC, 0xE0, 0x05, 0xE0, 0xE0, 0x05, 0xE0, 0x05, 0x05, 0x05, 0xE0, 0x05, 0xE0,
		0xE0, 0xAC, 0x05, 0xAC, 0x05, 0xE0, 0xAC, 0xE0,
	];
	const BASE: &[u8] = &[
		0xAC, 0xE0, 0x05,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_5
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x0D, 0x0C, 0x09, 0x0B, 0x09, 0x0B, 0x09, 0x09, 0x0B, 0x09, 0x0A, 0x0A, 0x0C, 0x09, 0x0C,
		0x0D, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73,
		0x73, 0x73, 0x36, 0x6F, 0x6F, 0xC3, 0xC3, 0x7C, 0x7C, 0x6F, 0xC3, 0x6F, 0xC3, 0x73, 0xC3,
		0x7C,
	];
	const BASE: &[u8] = &[
		0x73, 0x36, 0x7C, 0x6F, 0xC3,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_7
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x0B, 0x0A, 0x0A, 0x09, 0x0D, 0x0A, 0x20, 0x0A, 0x09, 0x0B, 0x0B, 0x0C, 0x0D, 0x20, 0x0D,
		0x0B, 0x20, 0x20, 0x09, 0x0D, 0x0C, 0x0A, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0C, 0x0D, 0x0B,
		0x0A, 0x0A, 0x0C, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57,
		0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57,
		0x57, 0x57, 0xD0, 0x57, 0xCD, 0xD0, 0xEA, 0xCD, 0xC2, 0xD0, 0xD0, 0xD0, 0x62, 0xD0,
	];
	const BASE: &[u8] = &[
		0x57, 0xD0, 0xC2, 0xEA, 0xCD, 0xD3, 0x62,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_11
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x0D, 0x0B, 0x0A, 0x0B, 0x0D, 0x0A, 0x0C, 0x0A, 0x0D, 0x09, 0x0A, 0x0A, 0x0B, 0x20, 0x0A,
		0x0C, 0x20, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x20, 0x09, 0x0D, 0x0A, 0x09, 0x0C, 0x0B, 0x09,
		0x09, 0x0A, 0x09, 0x09, 0x0C, 0x0C, 0x0A, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
		0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
		0x47, 0x47, 0xCB, 0x47, 0xD6, 0xD6, 0xD6, 0x47, 0xD6, 0xEB, 0xAC,
	];
	const BASE: &[u8] = &[
		0x47, 0xAC, 0xD6, 0xEC, 0xA7, 0x2C, 0xE2, 0x83, 0xEB, 0xBE, 0xCB,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_13
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x0A, 0x20, 0x0A, 0x0D, 0x0A, 0x0C, 0x0B, 0x0D, 0x0B, 0x0A, 0x20, 0x0C, 0x0C, 0x0D, 0x20,
		0x0D, 0x0D, 0x0C, 0x0D, 0x0D, 0x09, 0x0B, 0x0D, 0x0A, 0x0C, 0x0A, 0x0A, 0x0A, 0x20, 0x20,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3,
		0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0xF3, 0x83, 0xBF, 0x83, 0xFC, 0x2A, 0x8E, 0x2A, 0x2A, 0x2A,
	];
	const BASE: &[u8] = &[
		0xF3, 0x4E, 0x83, 0x1C, 0x8E, 0x23, 0x4D, 0x5F, 0xBF, 0x69, 0x2A, 0xFC, 0x7B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_19
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x0C, 0x0B, 0x0B, 0x0D, 0x46, 0x46, 0x46, 0x29, 0x54, 0x9D, 0x30, 0x54, 0xCB, 0x22, 0x29,
	];
	const BASE: &[u8] = &[
		0x46, 0xD5, 0x29, 0x22, 0x33, 0x30, 0x1A, 0x54, 0xC7, 0x7E, 0x7F, 0xDC, 0x9D, 0x6F, 0x56,
		0xEB, 0x69, 0xCB, 0x64,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_42
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x20, 0x0D, 0x20, 0x0A, 0x0C, 0x0D, 0x0B, 0x20, 0x09, 0x0D, 0x09, 0x09, 0x0C, 0x20, 0x0B,
		0x0D, 0x20, 0x20, 0x0B, 0x0C, 0x20, 0x0B, 0x09, 0x0C, 0x0C, 0x0A, 0x0A, 0x0D, 0x0B, 0x0C,
		0x09, 0x0B, 0x09, 0x20, 0x20, 0x0A, 0x20, 0x0D, 0x20, 0x09, 0x58, 0x58, 0x58, 0x58, 0x58,
		0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x4E, 0x26, 0xD6, 0x22, 0xB7, 0xE5,
	];
	const BASE: &[u8] = &[
		0x58, 0xE5, 0x90, 0x11, 0x9B, 0xD6, 0x29, 0xA8, 0xCA, 0x6D, 0xC3, 0x73, 0xDC, 0x6C, 0xB2,
		0xB7, 0x4E, 0x28, 0x26, 0xFE, 0x97, 0x91, 0x70, 0xF7, 0x22, 0x83, 0xAB, 0x7D, 0x60, 0xC4,
		0xA6, 0x84, 0x6A, 0xAE, 0xA7, 0x3F, 0x9C, 0xC2, 0x99, 0x7C, 0x74, 0xCB,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_73
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x0A, 0x0D, 0x0D, 0x0B, 0x0D, 0x20, 0x0D, 0x0A, 0x20, 0x0D, 0x44, 0x44, 0x44, 0x44, 0x44,
		0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
		0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x68, 0x71, 0xC4, 0x63, 0xCF, 0xD9,
	];
	const BASE: &[u8] = &[
		0x44, 0x68, 0x71, 0xC6, 0xE4, 0xE9, 0xCA, 0x2F, 0x69, 0x9D, 0x9B, 0xF6, 0x70, 0x92, 0x34,
		0xD9, 0x22, 0x02, 0x1F, 0x47, 0x63, 0xDD, 0x2C, 0x94, 0x4F, 0x29, 0x50, 0xF1, 0xEF, 0x2E,
		0x64, 0x1A, 0x8C, 0x3C, 0x75, 0xD2, 0x43, 0xB1, 0xA4, 0xCC, 0xAA, 0xA3, 0x05, 0xAB, 0xCF,
		0xC4, 0xA7, 0x58, 0xED, 0x4D, 0x23, 0xBB, 0x7E, 0x9A, 0x3D, 0x11, 0xC9, 0x14, 0xCD, 0x24,
		0x82, 0x55, 0x5B, 0xE7, 0x74, 0x32, 0x1B, 0xBE, 0xD7, 0x4B, 0x7B, 0xB2, 0xDF,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_113
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x0A, 0x09, 0x0A, 0x4C, 0x4C, 0x4C, 0x6B, 0xC9, 0xD2, 0x10, 0x7D,
	];
	const BASE: &[u8] = &[
		0x4C, 0x2A, 0x87, 0xA9, 0xA4, 0x25, 0x8E, 0x7D, 0x3E, 0xC4, 0x70, 0xC5, 0x60, 0x6B, 0x38,
		0xC1, 0x7A, 0x13, 0x6C, 0xC9, 0x64, 0xA8, 0x16, 0x7C, 0x33, 0x3C, 0x8B, 0xCA, 0x98, 0xB1,
		0x83, 0xF7, 0xF4, 0xE8, 0xE1, 0xD2, 0x5A, 0x97, 0x05, 0xB9, 0x6E, 0xBA, 0x93, 0xB4, 0x62,
		0x1F, 0x4D, 0x32, 0x91, 0xEF, 0x8F, 0x17, 0x61, 0x10, 0x41, 0xA2, 0xE4, 0x49, 0x74, 0xEC,
		0x7F, 0xB3, 0xF2, 0x96, 0x73, 0xD6, 0xD0, 0x2E, 0xE3, 0xBF, 0xFF, 0x14, 0x5D, 0x55, 0x79,
		0x2C, 0x99, 0x18, 0x43, 0x9A, 0x3F, 0x4A, 0x54, 0x4E, 0xA7, 0xDD, 0x66, 0x59, 0xF6, 0x31,
		0x3D, 0x7B, 0x21, 0xCF, 0x89, 0x39, 0x7E, 0xE7, 0x63, 0x47, 0x82, 0x4F, 0xC7, 0xA5, 0xD8,
		0xD3, 0xC0, 0x22, 0xA1, 0xCE, 0xCD, 0x5C, 0xEB,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_193
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x0A, 0x0B, 0x0B, 0x0D, 0x09, 0x0D, 0x0B, 0x0A, 0x0C, 0x0D, 0x20, 0x0B, 0x09, 0x0D, 0x0A,
		0x0C, 0x0D, 0x0C, 0x0C, 0x0B, 0x0C, 0x0C, 0x0D, 0x0A, 0x20, 0x09, 0x0D, 0x0B, 0x0D, 0x0D,
		0x0A, 0x0A, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,
		0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFD, 0x35, 0x07,
		0x12, 0x4E,
	];
	const BASE: &[u8] = &[
		0xC3, 0xFD, 0xB3, 0x25, 0xEF, 0x8A, 0x51, 0x26, 0xE4, 0xD8, 0xC4, 0x0E, 0x28, 0xF6, 0x19,
		0x6F, 0x71, 0x04, 0xC0, 0xE6, 0x84, 0x06, 0x12, 0x53, 0xAE, 0x46, 0x7C, 0xA8, 0x42, 0xE9,
		0x02, 0xBF, 0xD5, 0x32, 0x99, 0x96, 0x8C, 0x17, 0x9D, 0x50, 0xFF, 0x3F, 0x81, 0x78, 0x8E,
		0x3E, 0xA3, 0x86, 0x65, 0x3B, 0x1E, 0x45, 0xE2, 0x4E, 0xE7, 0xE8, 0x21, 0x74, 0xCD, 0x9C,
		0xBA, 0x57, 0x79, 0xD9, 0x5B, 0x88, 0x63, 0x23, 0x7D, 0x41, 0x59, 0xDA, 0x1A, 0x9A, 0xBB,
		0x44, 0x82, 0x68, 0xB4, 0x95, 0x83, 0xA0, 0x6C, 0x52, 0x98, 0x93, 0x24, 0xC1, 0x2E, 0xEE,
		0x08, 0x9F, 0x4A, 0xEC, 0xAB, 0xF5, 0x4F, 0xC6, 0x48, 0x94, 0xB2, 0x91, 0x05, 0x1F, 0xE1,
		0x35, 0xA6, 0x3C, 0x15, 0xFC, 0xCF, 0x60, 0xDB, 0x62, 0xFA, 0x5C, 0xFE, 0x6D, 0xBD, 0xB7,
		0xA1, 0x7B, 0xFB, 0x89, 0xB1, 0xAC, 0x8B, 0x7F, 0x39, 0xAA, 0xA9, 0xE3, 0x69, 0xDC, 0xF7,
		0xE5, 0x33, 0xC7, 0x07, 0xA7, 0x66, 0x3A, 0x8D, 0x4C, 0xAF, 0x70, 0x5A, 0xCE, 0xCC, 0xC9,
		0xD2, 0x80, 0x8F, 0xF9, 0xED, 0x01, 0xA2, 0x38, 0xD4, 0x30, 0xBE, 0xD6, 0xAD, 0x67, 0x4B,
		0xA4, 0x1D, 0x18, 0x75, 0x85, 0xF0, 0x73, 0xDE, 0x77, 0x9B, 0x5D, 0xB5, 0xF3, 0x43, 0x3D,
		0x31, 0x9E, 0xCB, 0x11, 0x2A, 0x16, 0x27, 0xD7, 0x90, 0x7A, 0x14, 0xC5, 0x87,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_247
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x0A, 0x0A, 0x20, 0x0C, 0x0C, 0x0A, 0x0B, 0x0C, 0x0D, 0x0A, 0x0D, 0x09, 0x09, 0x0D, 0x0A,
		0x0A, 0x0D, 0x0D, 0x0C, 0x0D, 0x20, 0x0A, 0x0A, 0x0B, 0x20, 0x0B, 0x20, 0x0B, 0x09, 0x0A,
		0x0C, 0x0B, 0x0D, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xAC, 0x41, 0xC0, 0xD0,
	];
	const BASE: &[u8] = &[
		0x05, 0xD7, 0x85, 0x67, 0xD8, 0x16, 0x7E, 0xCC, 0xDA, 0x27, 0x4A, 0xA7, 0xF8, 0xFF, 0x0E,
		0x1B, 0x89, 0x40, 0x36, 0xDC, 0xB2, 0x5E, 0x24, 0xFA, 0x3A, 0x39, 0x04, 0xFB, 0x49, 0x57,
		0x06, 0x81, 0x7F, 0x03, 0x92, 0xD9, 0xCA, 0xC7, 0x73, 0x21, 0x25, 0xA1, 0x3D, 0xA5, 0x79,
		0x9C, 0xBE, 0x5F, 0x68, 0x77, 0x70, 0x98, 0xDB, 0x9A, 0x4C, 0x1D, 0xD4, 0x90, 0xB3, 0xF5,
		0x5A, 0x83, 0x74, 0x8F, 0xC4, 0xCB, 0x22, 0x28, 0xE2, 0xA6, 0x61, 0x3B, 0xE7, 0x9D, 0x2E,
		0xA0, 0xB4, 0x33, 0xF9, 0x3F, 0xAA, 0xFD, 0x2F, 0x55, 0x59, 0x3E, 0x8B, 0x91, 0x6F, 0x95,
		0x2A, 0x47, 0x7C, 0x97, 0xFC, 0xF2, 0xE9, 0xE5, 0x56, 0xB9, 0xE0, 0x51, 0x72, 0x69, 0x1C,
		0x7D, 0xD1, 0xD5, 0xD6, 0x9B, 0x86, 0x4B, 0xC0, 0x42, 0x1E, 0x32, 0xAE, 0xA4, 0x9F, 0x8D,
		0x58, 0xE8, 0xE4, 0x10, 0xA9, 0x41, 0x37, 0xC6, 0x66, 0x65, 0x96, 0x0F, 0x9E, 0xB5, 0x6E,
		0x63, 0x4E, 0x88, 0xBA, 0x52, 0xB6, 0x87, 0xAC, 0x46, 0x45, 0x08, 0x18, 0x8E, 0xC9, 0xF1,
		0x99, 0xDE, 0xEF, 0x54, 0xE3, 0xF7, 0xF4, 0x6B, 0x6C, 0xAB, 0xEC, 0x14, 0x94, 0x5C, 0x43,
		0x4F, 0xA2, 0xF6, 0xD2, 0x84, 0x7A, 0x07, 0x75, 0x1F, 0x50, 0x12, 0x29, 0x31, 0x13, 0x3C,
		0xC8, 0xB7, 0x82, 0xB0, 0xDF, 0xA8, 0x93, 0x8C, 0xED, 0x17, 0xF0, 0x19, 0xD0, 0x15, 0xA3,
		0xAF, 0x11, 0x71, 0xEE, 0xAD, 0xEA, 0xBD, 0x5B, 0xBC, 0xCD, 0x6D, 0x60, 0x64, 0xC5, 0x34,
		0x44, 0x26, 0xCF, 0xB1, 0x30, 0xFE, 0x62, 0x02, 0x6A, 0xF3, 0x2C, 0x78, 0x8A, 0xCE, 0x35,
		0xEB, 0xBF, 0xDD, 0x80, 0x7B, 0x76, 0xE1, 0xC3, 0xE6, 0xD3, 0xB8, 0x53, 0x01, 0xC1, 0x48,
		0x5D, 0x4D, 0xBB, 0x23, 0xC2, 0x38, 0x1A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x09, 0x0A, 0x0C, 0x0C, 0x20, 0x0D, 0x0D, 0x09, 0x0D, 0x0B, 0x0B, 0x0B, 0x0C, 0x20,
		0x09, 0x0C, 0x0A, 0x20, 0x09, 0x0C, 0x0B, 0x0B, 0x0D, 0x0D, 0x0C, 0x0A, 0x0D, 0x0B, 0x0C,
		0x0C, 0x0A, 0x0C, 0x20, 0x20, 0x20, 0x09, 0x20, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xF5, 0xDD, 0x6B, 0xDE, 0x34, 0xC8,
		0x19, 0xAA, 0x81, 0xF1, 0x01, 0xDC, 0xF2, 0x65, 0xEC, 0x20, 0x79, 0x9C,
	];
	const BASE: &[u8] = &[
		0x45, 0x05,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x0A, 0x0B, 0x0B, 0x20, 0x09, 0x0A, 0x0A, 0x0A, 0x0D, 0x0C, 0x0D, 0x74, 0x99,
		0x74, 0x74, 0x99, 0x74, 0x99, 0x99, 0x99, 0x74, 0x99, 0x74, 0x74, 0x44, 0x99, 0x44, 0x99,
		0x74, 0x44, 0x74, 0x49, 0xCB, 0x46, 0x9D, 0x1C, 0x12, 0xAE, 0x53, 0xB0, 0xA1, 0xDB, 0x20,
		0xB5, 0x02, 0xD3, 0xDF, 0x13, 0x8B, 0x58, 0xB7, 0xD5, 0xFB, 0xE5, 0xD1, 0x78, 0x2A, 0x0C,
		0x6F, 0x56, 0xEE, 0x4C, 0xC0, 0xA4, 0xDB, 0xE3, 0xD6, 0x57, 0x21, 0xB1, 0xEB, 0x38,
	];
	const BASE: &[u8] = &[
		0x44, 0x74, 0x99,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0A, 0x0B, 0x0A, 0x0D, 0x0C, 0x0C, 0x0D, 0x0B, 0x09, 0x0A, 0x09, 0x0B, 0x0C, 0x48,
		0x4B, 0x4B, 0x97, 0x97, 0x89, 0x89, 0x4B, 0x97, 0x4B, 0x97, 0xF9, 0x97, 0x89, 0xD9, 0xFA,
		0xCC, 0x9D, 0x6D, 0xE1, 0x54,
	];
	const BASE: &[u8] = &[
		0xF9, 0x48, 0x89, 0x4B, 0x97,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0D, 0x09, 0x0D, 0x0D, 0x20, 0x0A, 0x0C, 0x20, 0x20, 0x0D, 0x20, 0x0C, 0x0C, 0x0C,
		0x0A, 0x0D, 0x0A, 0x0B, 0x20, 0x6D, 0x8B, 0x16, 0x6D, 0x23, 0x16, 0x7D, 0x6D, 0x6D, 0x6D,
		0xC1, 0x6D, 0x89, 0x22, 0x51, 0x4E, 0x7A, 0x87, 0x7F, 0x81, 0x4C, 0x4B, 0x29, 0x05, 0x31,
		0x60, 0x94, 0x5B, 0x83,
	];
	const BASE: &[u8] = &[
		0x8B, 0x6D, 0x7D, 0x23, 0x16, 0xBF, 0xC1,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0B, 0x0C, 0x20, 0x20, 0x20, 0x0D, 0x0C, 0x0B, 0x20, 0x0A, 0x0A, 0x09, 0x0D, 0x09,
		0x20, 0x0C, 0x0D, 0x66, 0xA6, 0xE8, 0xE8, 0xE8, 0xA6, 0xE8, 0xA9, 0x9E, 0x0E, 0xF6, 0x44,
		0xC9, 0x61, 0x0B, 0x8F, 0x64, 0x48, 0xD3,
	];
	const BASE: &[u8] = &[
		0xA6, 0x9E, 0xE8, 0x13, 0xB0, 0xF8, 0xE7, 0x24, 0xA9, 0xFA, 0x66,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x09, 0x20, 0x0C, 0x0B, 0x0B, 0x0D, 0x0A, 0x20, 0x0D, 0x0D, 0x0C, 0x0D, 0x20,
		0x20, 0x0B, 0x09, 0x0D, 0x0D, 0x0A, 0x0A, 0x09, 0x20, 0x0D, 0x0B, 0x0D, 0x0A, 0x09, 0x0B,
		0x20, 0x09, 0x3C, 0x42, 0x3C, 0x92, 0xBB, 0x2E, 0xBB, 0xBB, 0xBB, 0x87, 0x71, 0x96, 0xC5,
		0x14, 0xFD, 0x58, 0x80, 0xC3, 0x5A, 0xF3, 0xD8, 0x3F, 0x46, 0x1A, 0xE4, 0x12, 0xC5, 0xF1,
	];
	const BASE: &[u8] = &[
		0x27, 0x8B, 0x3C, 0xD2, 0x2E, 0xBE, 0x8C, 0x47, 0x42, 0x1F, 0xBB, 0x92, 0x04,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0C, 0x0C, 0x0B, 0x48, 0x82, 0xA0, 0xE4, 0x82, 0x63, 0x4E, 0x48, 0x20, 0xE5, 0xB9,
		0xF6, 0x03, 0x17, 0x89, 0xA1, 0x9C, 0x6A, 0xCF, 0xD2, 0x53, 0x9C, 0x09, 0x8C, 0xCD, 0x42,
		0xDB, 0x89, 0x91, 0xA1, 0x18, 0x9A, 0xFD, 0xCE,
	];
	const BASE: &[u8] = &[
		0xCB, 0x6E, 0x48, 0x4E, 0xF4, 0xE4, 0x16, 0x82, 0x50, 0xF2, 0xA6, 0x68, 0xA0, 0x35, 0x3B,
		0xD9, 0x3E, 0x63, 0x28,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x09, 0x0A, 0x20, 0x0C, 0x0C, 0x09, 0x0A, 0x09, 0x0D, 0x0C, 0x0C, 0x09, 0x0C, 0x20,
		0x09, 0x0A, 0x20, 0x0B, 0x0A, 0x09, 0x0D, 0x0A, 0x0D, 0x20, 0x0A, 0x0B, 0x09, 0x0B, 0x0A,
		0x20, 0x20, 0x09, 0x0A, 0x0C, 0x9E, 0x72, 0xDF, 0xDC, 0xFE, 0x9D, 0x97,
	];
	const BASE: &[u8] = &[
		0xBF, 0x9D, 0x06, 0x47, 0x59, 0xDF, 0x8D, 0x14, 0x31, 0xF6, 0x87, 0x35, 0x7C, 0x5C, 0x84,
		0xFE, 0x9E, 0x74, 0x72, 0xA2, 0xA6, 0x32, 0x42, 0xC2, 0xDC, 0xB7, 0x3A, 0x71, 0xDA, 0x2F,
		0x4D, 0x5B, 0xA1, 0xE7, 0xE3, 0x27, 0xAB, 0xD1, 0x58, 0xBE, 0x9A, 0xAE,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0D, 0x0A, 0x0B, 0x0A, 0x0D, 0x09, 0x09, 0x09, 0x0A, 0x0C, 0x0D, 0x0D, 0x20, 0x0C,
		0x0A, 0x0A, 0x09, 0x0B, 0x09, 0x0A, 0x20, 0xCF, 0x9E, 0x64, 0x4B, 0x52, 0xC2, 0x93, 0x17,
		0xF2, 0xF9,
	];
	const BASE: &[u8] = &[
		0x94, 0xCF, 0x9E, 0xE5, 0x76, 0x34, 0xC9, 0xC0, 0x84, 0xBF, 0x65, 0x51, 0x3A, 0x73, 0x1B,
		0xC2, 0x6C, 0x01, 0xED, 0x33, 0x4B, 0xBD, 0x08, 0xA6, 0x13, 0x5E, 0xAA, 0x1C, 0x80, 0xAD,
		0x16, 0xF3, 0x68, 0x05, 0x21, 0x1D, 0xF4, 0xDA, 0xCB, 0x0E, 0xAC, 0x5B, 0x87, 0x59, 0x52,
		0x64, 0xB1, 0xDE, 0x47, 0x83, 0x28, 0xB0, 0x5D, 0xA8, 0x4D, 0xFB, 0xA3, 0x70, 0xFA, 0x07,
		0x66, 0x32, 0x89, 0x6F, 0xD3, 0x67, 0x41, 0x06, 0xC5, 0x6E, 0x04, 0x9A, 0xC4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0B, 0x09, 0x20, 0x0D, 0x0B, 0xD5, 0xAE, 0x57, 0xFF, 0xBF, 0x8A, 0x6E, 0x25, 0x25,
		0x4F, 0xE7,
	];
	const BASE: &[u8] = &[
		0xCD, 0x69, 0x01, 0x33, 0x9C, 0x58, 0x59, 0xBF, 0x84, 0xC8, 0x37, 0xAC, 0xEE, 0xD5, 0x7C,
		0xD0, 0x16, 0xB5, 0xA9, 0xAE, 0xF2, 0x94, 0xBE, 0x26, 0x1D, 0x8E, 0x5C, 0xEA, 0xB4, 0xC5,
		0x2F, 0x22, 0x9A, 0xAA, 0x1A, 0x57, 0xDB, 0xA2, 0x24, 0xC4, 0xCF, 0xF5, 0x15, 0xE9, 0xAF,
		0x88, 0x70, 0xF6, 0xA3, 0x68, 0x8D, 0xE6, 0xB2, 0xFF, 0x3B, 0x76, 0x64, 0x7D, 0xA1, 0x95,
		0x9D, 0xCC, 0xD4, 0xD1, 0x10, 0x92, 0x4D, 0x5B, 0x3E, 0xF4, 0xBB, 0xF8, 0x27, 0x80, 0x5F,
		0xD6, 0x87, 0xE1, 0xA7, 0x49, 0x65, 0x3A, 0xCA, 0x9E, 0x30, 0x11, 0xCE, 0x7E, 0x73, 0x9F,
		0x05, 0xFB, 0x83, 0x50, 0xE5, 0xD2, 0x9B, 0xBD, 0x38, 0x56, 0xB8, 0x91, 0xB6, 0xA5, 0x03,
		0x17, 0x4C, 0xC7, 0xF0, 0x35, 0x8B, 0xC1, 0xD9,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0B, 0x0C, 0x20, 0x20, 0x20, 0x0B, 0x0D, 0x0B, 0x0C, 0x20, 0x0B, 0x20, 0x20, 0x0B,
		0x0A, 0x20, 0x4F, 0xED, 0x95, 0x59, 0x21, 0x31, 0x0A, 0x27, 0x19, 0x0A, 0x98, 0x19, 0xAA,
		0x03, 0x31, 0x2C, 0xE7, 0xFF, 0x8F, 0x9D, 0x19, 0x48, 0x27, 0x28, 0xB1, 0xF7, 0x31, 0xF8,
		0x9A, 0x9D, 0x1C, 0x2C, 0xD5, 0x04, 0x47, 0x34, 0x77, 0xB1, 0x34, 0x16, 0xA6, 0x81, 0x03,
		0xE6, 0x0A,
	];
	const BASE: &[u8] = &[
		0x69, 0x4F, 0x84, 0x68, 0xFB, 0x55, 0x58, 0x4D, 0x79, 0xE8, 0x5B, 0x92, 0xB7, 0x11, 0xE3,
		0x29, 0x89, 0x67, 0x41, 0x7B, 0xD4, 0xE9, 0x59, 0xF4, 0xCE, 0x43, 0x5F, 0xFE, 0x23, 0xB3,
		0x37, 0x94, 0xFC, 0xFA, 0x3E, 0x45, 0xD2, 0x01, 0xB5, 0xC7, 0x3D, 0xE4, 0x9E, 0x8A, 0xBC,
		0x24, 0x4C, 0x71, 0xA9, 0x99, 0x87, 0x30, 0x6E, 0x21, 0xE5, 0x08, 0xEA, 0x36, 0xDE, 0xB4,
		0xAF, 0xAD, 0xEC, 0xA1, 0x26, 0xF2, 0x5C, 0x60, 0xDC, 0x9C, 0xDF, 0x3B, 0xA0, 0xDA, 0x38,
		0xBD, 0xBA, 0x5D, 0x10, 0x6B, 0xA8, 0xD7, 0x96, 0xFD, 0x3A, 0xAB, 0x8D, 0x88, 0x9B, 0x66,
		0x70, 0x3F, 0xD9, 0x80, 0x35, 0x06, 0xC9, 0xB8, 0xD1, 0xC4, 0x64, 0xF5, 0xC8, 0x07, 0x0E,
		0xED, 0x32, 0x6A, 0xD8, 0x51, 0xD6, 0x62, 0xAC, 0x53, 0x12, 0x2E, 0x78, 0xBB, 0x22, 0xB9,
		0xDD, 0x44, 0x97, 0xC2, 0x7C, 0xCB, 0x57, 0x1F, 0xA2, 0x54, 0x86, 0xD0, 0x02, 0x93, 0xF1,
		0xCD, 0x2A, 0x18, 0x95, 0xBF, 0x0F, 0x3C, 0x91, 0x63, 0x25, 0x15, 0xF0, 0x90, 0x7A, 0xA4,
		0x76, 0x17, 0xDB, 0xC1, 0x83, 0xC5, 0xA7, 0x4B, 0xE2, 0x7E, 0x05, 0x13, 0xF9, 0x75, 0xB6,
		0xE0, 0xE1, 0xCA, 0xF3, 0xB0, 0x2F, 0x4E, 0xEB, 0x46, 0x8E, 0x9F, 0xBE, 0x1E, 0xCC, 0x5E,
		0x40, 0x6F, 0xA3, 0x5A, 0xAE, 0x42, 0xEF, 0xC6, 0x52, 0x7D, 0xEE, 0xB2, 0x14,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0B, 0x0B, 0x0B, 0x0A, 0x0C, 0x0B, 0x0C, 0x0B, 0x09, 0x20, 0x0B, 0x0C, 0x0A, 0x0A,
		0x09, 0x20, 0x09, 0x0B, 0x0C, 0x0A, 0xA5, 0x90, 0x76, 0xDF, 0x09, 0x0A, 0x0C, 0x2D, 0x09,
		0x0C, 0x0C, 0x0D, 0x0A, 0x20, 0x2D, 0x0B, 0x20, 0x0B, 0x2D, 0x20, 0x2B, 0x2B, 0x0D, 0x2D,
		0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x20, 0x0B,
	];
	const BASE: &[u8] = &[
		0xE7, 0xB1, 0x3A, 0x38, 0x13, 0x3D, 0x4E, 0x82, 0x6E, 0xCE, 0x24, 0xD6, 0x35, 0xE1, 0x94,
		0x68, 0x88, 0x44, 0xEE, 0xE2, 0x34, 0xA3, 0x1D, 0x95, 0xA1, 0x32, 0x19, 0x06, 0x63, 0xC0,
		0x2F, 0x4D, 0x9C, 0x56, 0xCA, 0x87, 0xCD, 0x62, 0x1E, 0x04, 0xC7, 0x85, 0x2C, 0xFD, 0x69,
		0x3E, 0xB8, 0x17, 0x93, 0xC5, 0x8B, 0xA0, 0xDD, 0xFA, 0x37, 0xFE, 0x99, 0x48, 0xC8, 0xF6,
		0xC2, 0x1A, 0xF9, 0x97, 0xD7, 0xB5, 0x22, 0x92, 0x58, 0x1F, 0x8A, 0x6D, 0x0F, 0x01, 0x5D,
		0x26, 0x28, 0xB7, 0xF2, 0xE6, 0x25, 0x14, 0xF0, 0xE4, 0x98, 0x45, 0xC4, 0x9B, 0xAB, 0x84,
		0xE8, 0x57, 0x9A, 0x51, 0xF3, 0x07, 0x72, 0x2A, 0x54, 0xCC, 0xB6, 0xB3, 0x1C, 0x9E, 0xAE,
		0xFB, 0xEB, 0x79, 0x65, 0xCB, 0x55, 0x7D, 0x76, 0xDB, 0x7A, 0x6B, 0x08, 0xC3, 0x31, 0xF1,
		0x39, 0x18, 0x83, 0xAA, 0xD8, 0x90, 0x53, 0xF8, 0x29, 0x12, 0xED, 0xEA, 0x71, 0x67, 0xDE,
		0x5B, 0x70, 0xD2, 0xA9, 0x42, 0x6F, 0xC1, 0xA5, 0x10, 0xB4, 0xB2, 0xA7, 0x4F, 0xB9, 0xA4,
		0xD0, 0xEC, 0x36, 0xD3, 0x49, 0x66, 0x5E, 0x74, 0x8F, 0x3B, 0xBD, 0xAF, 0xE0, 0xD1, 0x27,
		0xBC, 0x30, 0xAD, 0x4B, 0x23, 0x4A, 0x9D, 0x7C, 0xE5, 0x7B, 0xC9, 0x46, 0xD5, 0xF5, 0xEF,
		0x77, 0x02, 0xA6, 0x8D, 0x05, 0xBA, 0x81, 0xDA, 0xF4, 0xF7, 0x61, 0xA2, 0xDF, 0x11, 0x33,
		0x43, 0x7E, 0xFF, 0x64, 0x3F, 0x60, 0x5C, 0xCF, 0x15, 0xBF, 0x8C, 0x0E, 0x73, 0x21, 0x91,
		0x9F, 0xAC, 0xBB, 0x3C, 0x52, 0x96, 0x5A, 0x40, 0x78, 0x4C, 0xC6, 0xDC, 0x7F, 0x5F, 0x47,
		0xB0, 0x75, 0xD9, 0x86, 0x1B, 0xFC, 0x2E, 0xE9, 0x6C, 0x50, 0x16, 0xA8, 0xBE, 0xE3, 0x59,
		0x6A, 0x03, 0xD4, 0x89, 0x41, 0x80, 0x8E,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_2
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x9A, 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x99,
		0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
		0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
	];
	const BASE: &[u8] = &[
		0x9A, 0x99,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_3
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2B, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
		0x95, 0x4A, 0xAA, 0x4A, 0x4A, 0xAA, 0x4A, 0xAA, 0xAA, 0xAA, 0x4A, 0xAA, 0x4A, 0x4A, 0x95,
		0xAA, 0x95, 0xAA, 0x4A, 0x95, 0x4A,
	];
	const BASE: &[u8] = &[
		0x95, 0x4A, 0xAA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_5
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2F, 0x2F, 0x2F, 0x2F,
		0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
		0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F,
		0x2F, 0xEB, 0xFC, 0xFC, 0xD8, 0xD8, 0xD1, 0xD1, 0xFC, 0xD8, 0xFC, 0xD8, 0x2F, 0xD8, 0xD1,
	];
	const BASE: &[u8] = &[
		0x2F, 0xEB, 0xD1, 0xFC, 0xD8,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_7
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0x47, 0xFB, 0xA5, 0x47, 0x01,
		0xA5, 0xB3, 0x47, 0x47, 0x47, 0xCA, 0x47,
	];
	const BASE: &[u8] = &[
		0xFB, 0x47, 0xB3, 0x01, 0xA5, 0x9B, 0xCA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_11
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
		0x17, 0xEC, 0xA6, 0xA6, 0xA6, 0xEC, 0xA6, 0x30, 0x11,
	];
	const BASE: &[u8] = &[
		0xEC, 0x11, 0xA6, 0x57, 0xB4, 0x72, 0xF9, 0xED, 0x30, 0xA4, 0x17,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_13
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x6D, 0xFE, 0x6D, 0x19, 0x93, 0x33, 0x93, 0x93, 0x93,
	];
	const BASE: &[u8] = &[
		0x02, 0x5C, 0x6D, 0x6F, 0x33, 0xA3, 0x66, 0xEC, 0xFE, 0xE0, 0x93, 0x19, 0x97,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_19
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x16, 0x88,
		0x79, 0x55, 0x88, 0xEE, 0x53, 0x16,
	];
	const BASE: &[u8] = &[
		0x8F, 0x3B, 0x16, 0x53, 0x84, 0x55, 0x7F, 0x88, 0xD3, 0x34, 0x1C, 0x4D, 0x79, 0x3C, 0xCA,
		0xE0, 0xE2, 0xEE, 0xD4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_42
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x06, 0x6A, 0x3B, 0x5C, 0x66, 0x96,
	];
	const BASE: &[u8] = &[
		0x61, 0x96, 0x03, 0xA1, 0x01, 0x3B, 0xB6, 0x65, 0x5E, 0x40, 0x6F, 0xCE, 0x70, 0x14, 0xDB,
		0x66, 0x06, 0x31, 0x6A, 0x1D, 0xA3, 0x16, 0x46, 0xFD, 0x5C, 0xD1, 0x74, 0xDC, 0xE1, 0xAF,
		0xAB, 0x71, 0x85, 0x47, 0xF1, 0x07, 0x95, 0x30, 0x2C, 0xE9, 0x1A, 0x19,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_73
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
		0x2D, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C,
		0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C, 0x9C,
		0x9C, 0x9C, 0x2F, 0xCC, 0xC4, 0x99, 0x48, 0x5E,
	];
	const BASE: &[u8] = &[
		0x9C, 0x2F, 0xCC, 0x52, 0x7C, 0xA8, 0x05, 0x0F, 0x18, 0x13, 0x90, 0xB4, 0xB1, 0xF4, 0x28,
		0x5E, 0xBE, 0xD4, 0x63, 0x45, 0x99, 0x06, 0xBD, 0x82, 0x6C, 0xA6, 0xDA, 0xC0, 0x8C, 0x04,
		0x30, 0xA3, 0xE3, 0x93, 0x35, 0xB3, 0x94, 0x22, 0x6F, 0x16, 0x8A, 0x72, 0xD6, 0x1B, 0x48,
		0xC4, 0xCD, 0x4F, 0xBA, 0x02, 0x71, 0xAC, 0x50, 0xEA, 0x26, 0x23, 0xD1, 0x68, 0xE1, 0xB6,
		0x7A, 0x67, 0xD7, 0xD3, 0xC5, 0x92, 0xA2, 0x95, 0xDC, 0xBC, 0xCF, 0x64, 0x08,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_113
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9,
		0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9, 0xC9,
		0xC9, 0xC9, 0xC9, 0xC9, 0xCE, 0xA3, 0xA5, 0xA2, 0x1B,
	];
	const BASE: &[u8] = &[
		0xC9, 0x5F, 0xC3, 0xC7, 0xA9, 0x31, 0xC1, 0x1B, 0xE2, 0x1F, 0x0E, 0xAD, 0xCA, 0xCE, 0x6A,
		0x9E, 0xAA, 0x74, 0x42, 0xA3, 0x94, 0x7F, 0x64, 0xBE, 0xB7, 0x91, 0x07, 0xF8, 0x95, 0x8C,
		0x59, 0x1E, 0x6B, 0x12, 0x03, 0xA5, 0xDD, 0x78, 0xB4, 0x77, 0xF3, 0x9D, 0x3B, 0xBF, 0xD7,
		0xCC, 0x84, 0xBB, 0x11, 0x62, 0xF6, 0x4D, 0x55, 0xA2, 0xC2, 0x81, 0xC0, 0x75, 0x40, 0xDA,
		0x17, 0x15, 0x32, 0x10, 0x86, 0x7C, 0x01, 0xE8, 0x4E, 0x26, 0xE6, 0xEB, 0x2A, 0xFB, 0x8B,
		0x92, 0x3F, 0xC4, 0x35, 0x5B, 0xF5, 0x63, 0x71, 0xD0, 0xE0, 0xB0, 0x5C, 0x41, 0xA8, 0xAC,
		0x38, 0x88, 0xCB, 0x18, 0x2E, 0x9A, 0x89, 0x45, 0xAE, 0x34, 0xEA, 0x48, 0x4C, 0xDC, 0x8D,
		0xC6, 0xEF, 0x7D, 0xA7, 0x97, 0x29, 0x9C, 0x22,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_193
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x2B, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
		0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
		0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x90, 0xE9, 0x21, 0x5F, 0x42,
	];
	const BASE: &[u8] = &[
		0x33, 0x90, 0x1A, 0xB4, 0x72, 0xF7, 0x59, 0xC4, 0xC6, 0x66, 0x44, 0xE7, 0xC1, 0x9C, 0x05,
		0x34, 0xB0, 0x17, 0x46, 0x6B, 0x8E, 0x24, 0x5F, 0x47, 0x6D, 0x80, 0x02, 0x8B, 0x9B, 0x35,
		0xC8, 0x54, 0xDE, 0x0F, 0x13, 0x8F, 0x6F, 0x3D, 0x04, 0xA4, 0x18, 0x93, 0xA7, 0x77, 0x41,
		0x22, 0xCD, 0xD9, 0xCF, 0x61, 0xF0, 0xF3, 0xCE, 0x42, 0x1F, 0x5D, 0x27, 0xC3, 0xD7, 0xEB,
		0xAD, 0x23, 0xBF, 0xFC, 0xB7, 0x4E, 0x4C, 0x5E, 0x48, 0x8C, 0x74, 0xD4, 0xB3, 0x40, 0x53,
		0x52, 0xDD, 0xFF, 0x94, 0xEE, 0x1C, 0x68, 0x6C, 0x37, 0xB5, 0xBC, 0x2C, 0xE1, 0x76, 0xA1,
		0xEF, 0xD0, 0xDF, 0x7B, 0xA5, 0x5A, 0xE8, 0x85, 0xCC, 0x36, 0xC9, 0x9D, 0x69, 0x98, 0x7A,
		0xE9, 0x95, 0x67, 0xA3, 0x64, 0x75, 0xF6, 0x12, 0x1B, 0xBD, 0x78, 0xE3, 0x07, 0x39, 0x60,
		0xF2, 0x2E, 0xB2, 0xBE, 0xA8, 0xEA, 0xB8, 0xE6, 0x31, 0x58, 0xBB, 0xA0, 0x62, 0x79, 0x89,
		0x4F, 0x8A, 0xAE, 0x21, 0x50, 0x56, 0x06, 0x4B, 0x3B, 0x01, 0x57, 0xE2, 0xA2, 0xB1, 0x86,
		0xB6, 0x91, 0xDA, 0x10, 0x9F, 0x14, 0x49, 0x51, 0x03, 0x81, 0xD2, 0x8D, 0xAF, 0x84, 0x43,
		0x73, 0x4A, 0x65, 0xFE, 0x70, 0x83, 0x99, 0xD1, 0xC7, 0x29, 0x87, 0xE5, 0xD6, 0xA6, 0x1D,
		0xCB, 0x9A, 0x25, 0x97, 0x45, 0x7E, 0x3A, 0x38, 0x15, 0x2A, 0x7F, 0xB9, 0x71,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_247
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x08, 0x4A, 0xAC, 0xA3,
	];
	const BASE: &[u8] = &[
		0x71, 0xC5, 0xCA, 0x87, 0xF2, 0x8B, 0xE8, 0x9E, 0xEA, 0xB4, 0xF5, 0x8F, 0x62, 0xCD, 0xFA,
		0x0E, 0xA0, 0x27, 0xC2, 0x22, 0x13, 0xEE, 0x61, 0x23, 0x03, 0x63, 0x01, 0x57, 0xD4, 0xE2,
		0x36, 0xCC, 0xA6, 0x7C, 0xFF, 0x70, 0x1E, 0xF9, 0xE9, 0xD2, 0x7A, 0xA2, 0xCE, 0x39, 0x75,
		0x80, 0x18, 0x3E, 0x28, 0x97, 0xAB, 0x16, 0x76, 0x02, 0x44, 0xE1, 0x85, 0xAD, 0x95, 0x8C,
		0xA1, 0x0F, 0x96, 0x38, 0xC3, 0xD8, 0xED, 0x35, 0x9B, 0xF3, 0x05, 0xC1, 0xA9, 0xFE, 0x25,
		0x9D, 0x21, 0xC8, 0xF8, 0xB2, 0xB1, 0xF7, 0xD1, 0xD3, 0x7E, 0x5E, 0xDE, 0x5F, 0xDB, 0xFC,
		0x42, 0x3C, 0x74, 0x43, 0x93, 0xDA, 0xB8, 0x32, 0x26, 0xA8, 0x73, 0x31, 0x8D, 0x41, 0x33,
		0x2C, 0x3B, 0x98, 0x40, 0x5C, 0xE3, 0xE6, 0xAC, 0x2F, 0x59, 0x17, 0x8E, 0x94, 0x91, 0x86,
		0xE4, 0x72, 0x1D, 0x50, 0x5D, 0x4A, 0x9F, 0xD6, 0xBC, 0x6A, 0xFB, 0x6B, 0xD7, 0x10, 0x81,
		0xF1, 0xCF, 0x7B, 0x1B, 0x3F, 0x58, 0xB7, 0x08, 0xBB, 0xD0, 0x4C, 0xA4, 0xB5, 0xC0, 0xFD,
		0x67, 0xEC, 0x46, 0x5A, 0xD5, 0x88, 0x07, 0x37, 0x19, 0xF6, 0x30, 0x69, 0x51, 0xDF, 0x84,
		0xD9, 0xB6, 0x56, 0xF4, 0x83, 0x3D, 0x29, 0x82, 0xF0, 0xAF, 0x2E, 0xAE, 0xCB, 0xE7, 0x45,
		0xA5, 0x8A, 0xB0, 0xBE, 0x4F, 0x2A, 0x6E, 0xBD, 0xB3, 0x77, 0x90, 0x6D, 0xA3, 0x6C, 0xA7,
		0x53, 0xC6, 0x65, 0x15, 0x64, 0x79, 0xEF, 0x12, 0x04, 0xDC, 0x4E, 0x68, 0xC7, 0xBF, 0x14,
		0x6F, 0x4D, 0x52, 0x06, 0xB9, 0xE5, 0x89, 0x4B, 0x11, 0x1F, 0xC9, 0x7D, 0xBA, 0x9C, 0x54,
		0xAA, 0xE0, 0x9A, 0x47, 0x1A, 0x78, 0x24, 0x99, 0x34, 0x48, 0x66, 0x49, 0x92, 0x55, 0x7F,
		0x3A, 0xDD, 0xC4, 0x1C, 0x60, 0xEB, 0x5B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,
		0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0x84,
		0x6A, 0x50, 0xF0, 0xAF, 0x33, 0x33, 0x62, 0xE1, 0x21, 0xCE, 0x0A,
	];
	const BASE: &[u8] = &[
		0x0E, 0xEA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x66,
		0xB1, 0x66, 0x66, 0xB1, 0x66, 0xB1, 0xB1, 0xB1, 0x66, 0xB1, 0x66, 0x66, 0xE7, 0xB1, 0xE7,
		0xB1, 0x66, 0xE7, 0x66, 0xBE, 0x18, 0xA6, 0x82, 0x5D, 0x9F, 0x97, 0x4C, 0x24, 0x7C, 0xE8,
		0xCE, 0x83, 0xF7, 0xC3, 0x84, 0x6C, 0x2E, 0x2F, 0xCA, 0xE9, 0x7E, 0xC0, 0x6E, 0x14,
	];
	const BASE: &[u8] = &[
		0xE7, 0x66, 0xB1,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2D, 0x8C, 0x7F, 0x7F, 0xA3, 0xA3, 0x64, 0x64, 0x7F, 0xA3, 0x7F, 0xA3, 0x37, 0xA3, 0x64,
		0xB7, 0x2B, 0xFD, 0x0E, 0x6C, 0x22, 0x0B, 0xE5, 0xE2, 0x04, 0xB9, 0x96, 0xCC, 0xDB, 0x34,
		0x43,
	];
	const BASE: &[u8] = &[
		0x37, 0x8C, 0x64, 0x7F, 0xA3,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x58, 0x96, 0x5E, 0x58, 0x49, 0x5E, 0xA8,
		0x58, 0x58, 0x58, 0x5F, 0x58, 0xBA, 0x19, 0x7B, 0x44, 0xCF, 0x83, 0xA2, 0xF8, 0x3F, 0x6B,
		0xD9, 0x9E, 0xBC, 0xB8, 0xCA, 0x73, 0x92, 0xBA, 0x98, 0x4B, 0xE3, 0xE7, 0x8F, 0xED, 0x99,
		0xBC, 0xC9, 0x84, 0xB1, 0x17, 0x85, 0xEA, 0x6D,
	];
	const BASE: &[u8] = &[
		0x96, 0x58, 0xA8, 0x49, 0x5E, 0x0E, 0x5F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x4D, 0xAD, 0xF7, 0xF7, 0xF7, 0xAD, 0xF7, 0x46, 0x4A, 0xE2, 0x40, 0x9F, 0x8D,
		0xA6, 0x5E, 0xED, 0xB7, 0xAE, 0x30, 0xA8, 0x9B, 0x45, 0x93, 0x41, 0x49, 0x3F, 0xD4, 0xBA,
		0xCA, 0xE7, 0xA4, 0xBD, 0x76, 0x4B, 0x8A, 0xC1, 0x60, 0xBB, 0xEB,
	];
	const BASE: &[u8] = &[
		0xAD, 0x4A, 0xF7, 0xA2, 0xC0, 0xDB, 0x57, 0xA0, 0x46, 0x32, 0x4D,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x7B, 0x26, 0x7B,
		0xEF, 0x08, 0xED, 0x08, 0x08, 0x08, 0x5A, 0x5A, 0x51, 0x36, 0xC0, 0x4E, 0x3E, 0x24, 0x2F,
		0xBC, 0xE5, 0xFF, 0x8F, 0x8F, 0x8B, 0x4B, 0xC1, 0xDF, 0x50, 0x7F, 0x38, 0x9B,
	];
	const BASE: &[u8] = &[
		0xF0, 0x1D, 0x7B, 0xFA, 0xED, 0x68, 0x43, 0x65, 0x26, 0xA1, 0x08, 0xEF, 0x89,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x8D, 0x9A, 0x0E, 0x19, 0x9A, 0x17, 0xDF,
		0x8D, 0x58, 0x07, 0x59, 0x27, 0x35, 0xE6, 0x2C, 0x96, 0xCA, 0xF8, 0xF6, 0xE0, 0x33, 0xDA,
		0x5F, 0xBD, 0x3E, 0xFF, 0xC5, 0x21,
	];
	const BASE: &[u8] = &[
		0x9D, 0x01, 0x8D, 0xDF, 0x5D, 0x19, 0xA9, 0x9A, 0x1A, 0x4D, 0xBA, 0xDC, 0x0E, 0x18, 0x37,
		0xCD, 0x80, 0x17, 0xD2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x32,
		0x89, 0x96, 0x8D, 0x99, 0x92, 0x39, 0x83, 0x67, 0xB9, 0xD5,
	];
	const BASE: &[u8] = &[
		0xA8, 0x92, 0xBF, 0x69, 0x7D, 0x96, 0x2E, 0xC8, 0xD4, 0xC1, 0xA9, 0x82, 0xEB, 0x35, 0x81,
		0x99, 0x32, 0xBC, 0x89, 0xC4, 0xFC, 0x87, 0x5D, 0x0F, 0x8D, 0xF1, 0x7A, 0xE2, 0x9B, 0xFF,
		0x58, 0xFE, 0xA1, 0x40, 0x6D, 0xCA, 0xD1, 0xC0, 0xB0, 0xC5, 0x55, 0xDF,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0xBF, 0x28, 0x3F, 0xEA, 0xA1, 0x31, 0x56,
		0xA3, 0x84, 0xD4, 0xA0, 0xA3, 0x44, 0x02, 0xDC, 0x20, 0x37, 0xA5, 0x9E, 0x4B, 0xA8, 0x99,
		0x61, 0x71, 0x44, 0xA9, 0x39,
	];
	const BASE: &[u8] = &[
		0x07, 0xBF, 0x28, 0x92, 0x38, 0x42, 0xEE, 0x06, 0xB3, 0x40, 0xAD, 0x03, 0x9B, 0x8D, 0xE9,
		0x31, 0x7A, 0xD6, 0x3D, 0x77, 0xEA, 0x2F, 0x5A, 0x45, 0x22, 0x14, 0xB9, 0xFF, 0xBA, 0x52,
		0x62, 0x0F, 0xCE, 0x91, 0x49, 0x89, 0xE6, 0xF7, 0x75, 0x83, 0xCF, 0x59, 0xCA, 0x25, 0xA1,
		0x3F, 0x80, 0xF4, 0x4D, 0x3B, 0x81, 0xD9, 0x3C, 0xB1, 0xAF, 0x90, 0x96, 0x5F, 0x6E, 0xE7,
		0x4C, 0xC2, 0xE5, 0x7B, 0x5D, 0x94, 0x6B, 0xCD, 0x97, 0x23, 0x58, 0x43, 0xC1,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D,
		0x2D, 0x2B, 0xCC, 0x67, 0xA5, 0xF8, 0xA6, 0x94, 0xCA, 0x4A, 0xDC, 0x0B, 0xD8, 0x14, 0x36,
		0x01, 0xE9, 0x8E, 0x51, 0x2F, 0x5A, 0xED, 0xFA, 0x46, 0x5B, 0xE6, 0x0A, 0x3D, 0xA4, 0x2B,
		0x18, 0x18, 0x04, 0x0C, 0xC2, 0x85, 0x6B, 0x5F, 0xE9, 0x54, 0x85, 0x59, 0x25, 0xB4, 0x9E,
		0x02, 0xA8, 0x59,
	];
	const BASE: &[u8] = &[
		0xF1, 0x82, 0x22, 0xE2, 0xA1, 0xAF, 0x0E, 0xA6, 0xDA, 0xBB, 0xC9, 0x2E, 0x53, 0xCC, 0x3E,
		0x1C, 0x2C, 0x16, 0x28, 0x67, 0x75, 0xC8, 0xAB, 0x1A, 0xFE, 0xC5, 0x90, 0xE0, 0xD2, 0x64,
		0xF4, 0x92, 0x15, 0xAA, 0xFF, 0xA5, 0x6E, 0x97, 0xEB, 0x9A, 0xD7, 0xB8, 0xB2, 0x72, 0x6C,
		0x77, 0x58, 0x5D, 0x42, 0xE8, 0x83, 0x9C, 0xCB, 0xF8, 0xFC, 0xC1, 0x96, 0x26, 0x5C, 0x40,
		0x5E, 0x4C, 0x7B, 0x7A, 0x17, 0x44, 0xEF, 0xCF, 0x56, 0x33, 0x95, 0x4E, 0x12, 0x27, 0xB7,
		0x29, 0x10, 0xE1, 0x99, 0x76, 0xEE, 0x87, 0x60, 0x71, 0x45, 0x8C, 0xB9, 0xD6, 0xBC, 0x62,
		0x19, 0xC0, 0xFD, 0xDB, 0x79, 0xBF, 0x7C, 0xF3, 0xEA, 0x47, 0x52, 0x6A, 0x66, 0xE5, 0x81,
		0x84, 0xCE, 0xDE, 0xC3, 0x21, 0x65, 0xF0, 0x89,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x84, 0x41, 0xB1, 0xCA, 0x7B, 0xE9, 0x0C,
		0xA9, 0x06, 0x09, 0x9E, 0xA0, 0xE4, 0xE6, 0xE6, 0x61, 0x34, 0x34, 0xA9, 0x9E, 0x94, 0x13,
		0xE9, 0x4C, 0x8E, 0xE3,
	];
	const BASE: &[u8] = &[
		0x75, 0x84, 0x0E, 0xD0, 0xB3, 0x50, 0xF8, 0x16, 0xBC, 0x3F, 0xDE, 0xC0, 0xB5, 0x12, 0xDF,
		0x90, 0xEE, 0x99, 0xA6, 0xFC, 0x55, 0x2E, 0xCA, 0x80, 0x96, 0xBF, 0xEB, 0xD9, 0x92, 0xA1,
		0x6F, 0x86, 0xE0, 0xD2, 0xDC, 0x78, 0xD3, 0x10, 0x3E, 0x1D, 0xB8, 0xC3, 0xBB, 0x5C, 0x04,
		0x4E, 0x83, 0xE8, 0x28, 0xF5, 0x45, 0x7F, 0xC6, 0x7B, 0xED, 0x7E, 0xF4, 0x30, 0x31, 0xE5,
		0x70, 0xF1, 0x18, 0x2C, 0xEF, 0x72, 0xCF, 0x87, 0x97, 0x07, 0x9D, 0x3A, 0x7C, 0x1E, 0x21,
		0xDA, 0x53, 0x51, 0x23, 0xAB, 0x15, 0xA3, 0x8C, 0x6E, 0x82, 0x40, 0x91, 0x69, 0x35, 0x22,
		0x2A, 0xFF, 0x8F, 0x5B, 0x5F, 0x7D, 0x3B, 0x01, 0xF7, 0x89, 0xA5, 0x19, 0x9B, 0x4F, 0x8A,
		0x41, 0x56, 0x63, 0xC5, 0xAF, 0x68, 0xFE, 0x5E, 0x81, 0xD5, 0xF2, 0x98, 0x8B, 0x6D, 0xF6,
		0xD8, 0x95, 0x52, 0xD6, 0xAA, 0x11, 0x39, 0xCD, 0x38, 0xF0, 0x46, 0xA7, 0x54, 0x62, 0x26,
		0xB2, 0xFA, 0x5D, 0xB1, 0x36, 0x08, 0x3D, 0xC9, 0x17, 0x29, 0xD7, 0x02, 0x57, 0x4B, 0x37,
		0x9F, 0x9A, 0xBE, 0xFD, 0x9C, 0xA8, 0x73, 0x76, 0x77, 0xA4, 0x0F, 0xB9, 0xC1, 0x93, 0xDB,
		0xE7, 0x1B, 0x64, 0x5A, 0xC7, 0x03, 0xC8, 0x6A, 0xF9, 0xBD, 0x32, 0x42, 0x25, 0xAE, 0x65,
		0x85, 0x60, 0xAC, 0xC2, 0xEC, 0xF3, 0xBA, 0xE2, 0xCE, 0x1A, 0x4D, 0xCC, 0x47,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_signs_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0xAD, 0xEB, 0xB3, 0xE8, 0x0D, 0x2B, 0x20, 0x2B, 0x20,
		0x0D, 0x20, 0x20, 0x2B, 0x2D, 0x09, 0x2B, 0x0A, 0x0B, 0x0B, 0x2B, 0x20, 0x0A, 0x0D, 0x0C,
		0x20, 0x2D, 0x09,
	];
	const BASE: &[u8] = &[
		0x56, 0x89, 0xF1, 0x6B, 0xA5, 0xAB, 0x91, 0x4A, 0xB4, 0x5D, 0xFE, 0x21, 0x25, 0x08, 0x26,
		0x1F, 0x3F, 0x15, 0x61, 0x36, 0xC1, 0x79, 0xD0, 0x43, 0xCF, 0x37, 0xA6, 0x97, 0x3A, 0x63,
		0xE2, 0x71, 0x8F, 0xB0, 0x60, 0xE3, 0xBE, 0x74, 0xE6, 0x13, 0x6F, 0x7D, 0x1D, 0xCC, 0xB8,
		0x05, 0xED, 0x4B, 0xA4, 0xF6, 0x04, 0x7B, 0x92, 0x16, 0x18, 0x3D, 0xAA, 0x81, 0x7C, 0x5E,
		0x02, 0xCA, 0xEC, 0x94, 0x6D, 0xC2, 0x32, 0x88, 0xF3, 0x12, 0x87, 0xB7, 0x39, 0xFB, 0x42,
		0xB2, 0x10, 0x17, 0xB6, 0xAE, 0x6C, 0x3E, 0x75, 0x4E, 0x9E, 0xF7, 0x64, 0x99, 0x0E, 0x1E,
		0xE5, 0xB5, 0x62, 0xEA, 0x83, 0xEF, 0x9F, 0x7A, 0x5A, 0x84, 0xFD, 0x07, 0x76, 0xD6, 0x8E,
		0xF0, 0xE0, 0xC9, 0x19, 0xC0, 0xC5, 0xE7, 0xB3, 0xD7, 0x98, 0x9C, 0x5F, 0xBD, 0xAF, 0xC7,
		0x86, 0x93, 0xBB, 0x38, 0x9B, 0xEB, 0x72, 0x9D, 0x06, 0x82, 0xF8, 0x55, 0x48, 0x1B, 0x3B,
		0x34, 0x01, 0xA8, 0x4D, 0x2E, 0x58, 0x52, 0xAD, 0x8D, 0x73, 0x69, 0x41, 0x77, 0xBC, 0x96,
		0x31, 0xDB, 0x95, 0xDD, 0x22, 0xBF, 0xD2, 0xDA, 0x1A, 0x70, 0x29, 0xF2, 0xA0, 0xA1, 0x7F,
		0xA7, 0xA3, 0x8B, 0x2F, 0x45, 0xFF, 0xE1, 0xB1, 0x57, 0x5B, 0xD9, 0xC8, 0x0F, 0x46, 0xF9,
		0x68, 0x2C, 0x53, 0x23, 0xBA, 0x27, 0xD1, 0xCB, 0xFA, 0x8A, 0xE4, 0x33, 0xE8, 0xDC, 0x30,
		0x6E, 0x67, 0x78, 0x50, 0xB9, 0xCD, 0x28, 0x40, 0x51, 0xE9, 0xF4, 0x4F, 0xC3, 0x6A, 0x90,
		0x47, 0x14, 0xDF, 0xF5, 0x44, 0x59, 0xDE, 0x03, 0x24, 0xEE, 0xFC, 0x2A, 0x80, 0xCE, 0x4C,
		0x1C, 0x49, 0x65, 0x85, 0xAC, 0x9A, 0x8C, 0x66, 0xD3, 0xD5, 0x35, 0x3C, 0xD8, 0x7E, 0xA9,
		0xD4, 0xC4, 0xC6, 0xA2, 0x54, 0x11, 0x5C,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0xDB, 0xDB, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB,
		0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x9A, 0xD2, 0x78,
		0x12, 0xD0, 0x8F, 0xC4, 0xAC, 0x0B, 0x59, 0x2D, 0x3A, 0x23, 0x9B, 0x9E, 0x2F, 0x8E, 0x0E,
		0x80, 0x6E, 0x8C, 0xAD, 0x32, 0xFE,
	];
	const BASE: &[u8] = &[
		0xCB, 0xDB,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75,
		0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75,
		0x75, 0x75, 0x85, 0xF5, 0x85, 0x85, 0xF5, 0x85, 0xF5, 0xF5, 0xF5, 0x85, 0xF5, 0x85, 0x85,
		0x75, 0xF5, 0x75, 0xF5, 0x85, 0x75, 0x85, 0x72, 0x5D, 0x57, 0xD7, 0x3C, 0x6E, 0x31, 0xFC,
		0xD3, 0xA8, 0xDB, 0xA5, 0xDE, 0x67, 0x83, 0xEF, 0x10, 0xEB, 0xCD, 0x1A, 0x26, 0x1E, 0x4F,
		0x46, 0xFD, 0x65, 0x4E, 0x5E, 0x26, 0x84, 0x6A, 0x13, 0x8D, 0xC1, 0xA7, 0x81, 0x30, 0x67,
		0xAD, 0x9C, 0x8D,
	];
	const BASE: &[u8] = &[
		0x75, 0x85, 0xF5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5,
		0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xD6, 0xB0, 0xB0, 0x3F, 0x3F, 0x8C, 0x8C, 0xB0, 0x3F,
		0xB0, 0x3F, 0xF5, 0x3F, 0x8C, 0x08, 0x97, 0x79, 0xD5, 0x32, 0x86, 0xB3, 0xAE, 0x8F, 0x89,
		0x1D, 0xC9, 0xAA, 0xDD, 0xFB, 0x5A, 0x22, 0xB4, 0xFA, 0xA4, 0x6A, 0xFE, 0xB7, 0xE8, 0x5D,
		0xEE, 0x23, 0xC7, 0x1E, 0x23, 0x2D, 0x20, 0xF2, 0xA3, 0x52,
	];
	const BASE: &[u8] = &[
		0xF5, 0xD6, 0x8C, 0xB0, 0x3F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A,
		0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x8A, 0x45, 0x8A, 0x22, 0x45,
		0x95, 0x22, 0xC2, 0x45, 0x45, 0x45, 0xE5, 0x45, 0x4B, 0xC6, 0xF5, 0x83, 0xC4, 0x25, 0xED,
		0x86, 0x3F, 0x70, 0xA4, 0x0A, 0xB7, 0xBB, 0x53, 0x7C, 0x86, 0xD0, 0x9E, 0x84, 0xC0, 0x5B,
		0x3C, 0x61, 0x6F, 0x76, 0xB6, 0xF8,
	];
	const BASE: &[u8] = &[
		0x8A, 0x45, 0xC2, 0x95, 0x22, 0x4E, 0xE5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25,
		0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0xFE, 0x25, 0xB7, 0xB7, 0xB7, 0x25, 0xB7, 0xF1,
		0xA5, 0x04, 0x35, 0x9B, 0x9E, 0x80, 0x96, 0x78, 0x1B, 0xD4, 0x6F, 0x26, 0x7F, 0xA2, 0xB2,
		0xFA, 0x43, 0x6D, 0xE2, 0xD9, 0x0E, 0x7B, 0x4A, 0x2C, 0xA4, 0xB4, 0x18, 0x84,
	];
	const BASE: &[u8] = &[
		0x25, 0xA5, 0xB7, 0xF2, 0x6E, 0x61, 0xC4, 0xE4, 0xF1, 0x4B, 0xFE,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
		0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0xC2, 0xA8, 0xC2,
		0x19, 0x0E, 0x88, 0x0E, 0x0E, 0x0E, 0xFC, 0x74, 0xA3, 0x32, 0xF7, 0xB0, 0x9E, 0xC3, 0x52,
		0x8B, 0xF5, 0x96, 0xB5, 0x82, 0x21, 0xBB, 0x6E, 0x10, 0xD9, 0x81,
	];
	const BASE: &[u8] = &[
		0x49, 0x08, 0xC2, 0xDC, 0x88, 0xFD, 0x8F, 0x39, 0xA8, 0x45, 0x0E, 0x19, 0x93,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x13, 0xED, 0x8A, 0xE1,
		0xED, 0x3E, 0x73, 0x13, 0x30, 0x27, 0x16, 0x25, 0x99, 0xAC, 0x60, 0x36, 0x62, 0x3B, 0xD0,
		0xD7, 0xF1, 0xA7, 0x6B, 0x88, 0xDE, 0xA3,
	];
	const BASE: &[u8] = &[
		0x05, 0x5E, 0x13, 0x73, 0x6E, 0xE1, 0xB3, 0xED, 0x53, 0x9B, 0xEE, 0x64, 0x8A, 0x67, 0x5D,
		0xBC, 0x24, 0x3E, 0xD6,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5,
		0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5,
		0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xA5, 0xCB, 0x59, 0x64, 0x93, 0x90, 0xAD, 0x0C,
		0x0C, 0x6A, 0x13, 0x75, 0x1C, 0x7A, 0xDB, 0x7B, 0x2F, 0xEC, 0x4C, 0x89, 0xF0, 0x80, 0xD6,
		0x6E, 0xA6, 0x80, 0xA6, 0x87, 0xCD, 0x50, 0xF6, 0x4B, 0x24, 0x77, 0x87, 0x3B, 0xD2, 0x61,
		0xD2, 0xDD, 0x76, 0xBC, 0x81, 0x48,
	];
	const BASE: &[u8] = &[
		0xA5, 0xAD, 0x0E, 0x12, 0x22, 0x64, 0x4D, 0x85, 0x01, 0x8B, 0x6D, 0xB1, 0x43, 0x23, 0x1E,
		0x90, 0xCB, 0x3F, 0x59, 0x8E, 0x66, 0x47, 0xC1, 0x55, 0x93, 0xE0, 0x5E, 0xC7, 0xE5, 0xC6,
		0xBF, 0x5D, 0xFC, 0x78, 0x95, 0x49, 0x51, 0xD8, 0xE8, 0xE1, 0x42, 0xCC,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
		0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x59, 0x8C, 0xC9, 0xA3,
		0x4D, 0xCC, 0x9C, 0x51, 0x5F, 0x77, 0x5C, 0xAA, 0xF3, 0x3D, 0x11, 0x6A, 0x4A, 0x5F, 0x0C,
		0xAA, 0xE5, 0xE5, 0x39, 0x55, 0x99, 0xBB, 0x5C, 0x5A, 0x99, 0xE2, 0x03, 0x3B, 0x42,
	];
	const BASE: &[u8] = &[
		0x1A, 0x59, 0x8C, 0x26, 0x80, 0xC8, 0xED, 0x1D, 0x7C, 0xCD, 0x22, 0xCF, 0xC4, 0x6C, 0xF6,
		0xCC, 0x1B, 0xE1, 0x13, 0x2A, 0xA3, 0x84, 0x2E, 0xDA, 0xFD, 0x24, 0xA4, 0xFF, 0xCB, 0x32,
		0xBA, 0x4F, 0x7A, 0x52, 0xFA, 0xFB, 0x81, 0x48, 0x04, 0xC2, 0x44, 0xC1, 0xEF, 0xD3, 0x4D,
		0xC9, 0x75, 0xBE, 0x70, 0x1F, 0x79, 0x43, 0xD2, 0x97, 0xA7, 0xC7, 0xF4, 0x61, 0x64, 0x02,
		0xE4, 0x9D, 0x15, 0x37, 0xD8, 0x0F, 0xB6, 0x1C, 0x8E, 0x6B, 0x5E, 0xD7, 0x9B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x04, 0x43, 0xF0, 0x96, 0x8A, 0x69,
		0x0C, 0xAE, 0xDA, 0xC3, 0x6A, 0x5E, 0x6F, 0xAC, 0xEE, 0x44, 0x3E, 0xA2, 0xE2, 0xAE, 0xA9,
		0x12, 0xCA, 0x19, 0xA0,
	];
	const BASE: &[u8] = &[
		0x84, 0x6C, 0xFB, 0x3C, 0xE6, 0x53, 0x68, 0x8A, 0x48, 0xD7, 0xEF, 0xE0, 0x24, 0x04, 0x4E,
		0x8E, 0x39, 0xBE, 0x1A, 0x43, 0xF6, 0x1F, 0x35, 0x60, 0xB6, 0x29, 0x38, 0xAF, 0x82, 0xF2,
		0x91, 0x71, 0x1D, 0x62, 0x1B, 0xF0, 0xE8, 0xBA, 0xF1, 0x51, 0x7D, 0xC4, 0xBF, 0x7C, 0xE7,
		0x6D, 0x79, 0x47, 0xD6, 0x83, 0x45, 0xCD, 0x3B, 0x96, 0x76, 0xB2, 0xB7, 0x99, 0x7E, 0xCB,
		0x88, 0x4A, 0x80, 0x9F, 0xEA, 0x5B, 0x22, 0x87, 0x86, 0xD5, 0xFC, 0xE1, 0x2C, 0x1C, 0x85,
		0x57, 0x3A, 0x23, 0x8C, 0x65, 0xB8, 0xC5, 0x78, 0xB9, 0xBB, 0xDB, 0x01, 0xCC, 0x75, 0xC8,
		0x30, 0xAD, 0xF4, 0x98, 0x77, 0x5C, 0x54, 0xF7, 0x55, 0xAB, 0x02, 0x34, 0xC6, 0x46, 0xCF,
		0xB5, 0x61, 0xD9, 0x7B, 0x2E, 0x08, 0x21, 0x06,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x5F, 0x5F, 0x5F, 0x5F, 0x73, 0x60, 0xA3, 0x04, 0xA6, 0x5E, 0xA7, 0x76, 0xA7, 0x0A, 0x7D,
		0x3D, 0x34, 0xB9, 0x57, 0x0D, 0x7D, 0x65, 0x47, 0x90, 0x0D, 0xC5, 0x20, 0x33, 0x57, 0x75,
		0x5D, 0x75, 0x7E, 0x91, 0x8B, 0x2E, 0x34, 0x47, 0x34, 0x20, 0x5C, 0x8D, 0x47,
	];
	const BASE: &[u8] = &[
		0x5F, 0x73, 0x3E, 0x51, 0x8A, 0x36, 0x28, 0x24, 0x3C, 0x4E, 0xD7, 0x98, 0xF2, 0xCA, 0xCF,
		0x08, 0xE4, 0x56, 0xAE, 0xF9, 0xAF, 0x82, 0x04, 0xF4, 0x46, 0x68, 0xF0, 0x1C, 0xD0, 0x79,
		0xB4, 0x06, 0xD9, 0xA5, 0x2F, 0x43, 0x6A, 0x93, 0xBE, 0x62, 0x31, 0x5B, 0x4F, 0xE1, 0xD4,
		0x9C, 0xB2, 0x9D, 0x4C, 0x07, 0x72, 0xDA, 0x1F, 0xA6, 0x4B, 0x55, 0x11, 0x05, 0x94, 0xDB,
		0x38, 0x50, 0x74, 0xFF, 0x32, 0x6B, 0xCE, 0xE0, 0x23, 0x9E, 0xEA, 0x80, 0xB3, 0x63, 0x8F,
		0x89, 0xFB, 0xFE, 0x6C, 0x9A, 0x27, 0x1E, 0x4A, 0xAB, 0x1A, 0xA0, 0x48, 0x99, 0x66, 0xFA,
		0xFC, 0xE7, 0xCC, 0xBB, 0xB1, 0xC4, 0x7B, 0xDC, 0xF5, 0xAA, 0x41, 0x88, 0xEE, 0xAC, 0xFD,
		0x60, 0x10, 0xD3, 0x25, 0xCD, 0x95, 0xC1, 0xD5, 0x6D, 0x97, 0x49, 0x16, 0x39, 0xF6, 0x3F,
		0xAD, 0x1D, 0xEF, 0xF1, 0xBA, 0xF7, 0xF8, 0x21, 0x13, 0xC6, 0xE8, 0x40, 0x69, 0xBC, 0x8E,
		0xC7, 0x6E, 0x4D, 0xA3, 0x58, 0xE6, 0x15, 0xA9, 0x86, 0x7A, 0x59, 0x83, 0xA4, 0xE3, 0xB6,
		0xDD, 0x96, 0x03, 0x0F, 0xA1, 0xEC, 0x67, 0xD6, 0x45, 0x18, 0xEB, 0x19, 0x01, 0x8C, 0x02,
		0x52, 0xB0, 0x35, 0xC9, 0xCB, 0x42, 0xB8, 0x9B, 0x6F, 0x64, 0xBF, 0x7F, 0xC3, 0x5A, 0xC2,
		0x9F, 0x77, 0xD1, 0x2A, 0x92, 0x26, 0x85, 0x1B, 0xED, 0xA2, 0x2C, 0xC0, 0xBD,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_zeros_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_zeros_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
		0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
		0x88, 0x88, 0x50, 0x64, 0x4E, 0xBA, 0x0A, 0x0B, 0x2B, 0x0D, 0x09, 0x2B, 0x09, 0x0B, 0x2B,
		0x0A, 0x20, 0x0A, 0x0D, 0x2D, 0x0B, 0x0D, 0x0A, 0x2B, 0x09, 0x09, 0x2B, 0x2D, 0x20, 0x0B,
		0x0C, 0x2B, 0x0B, 0x0C, 0x2D, 0x2B, 0x09, 0x0C, 0x2D,
	];
	const BASE: &[u8] = &[
		0x88, 0xE3, 0x4F, 0xD0, 0x7C, 0x89, 0x8D, 0x3A, 0x67, 0x6F, 0x2C, 0x80, 0x2E, 0x40, 0x60,
		0xCF, 0x07, 0x49, 0xF0, 0xCA, 0xD3, 0x96, 0x84, 0x7F, 0x59, 0xA0, 0xC0, 0xF6, 0x7D, 0xCE,
		0x9D, 0x38, 0xD8, 0x12, 0x03, 0x69, 0x04, 0xD9, 0xF3, 0xC5, 0x01, 0x22, 0xB1, 0x91, 0xE4,
		0xCC, 0x36, 0xAD, 0x18, 0x02, 0x7B, 0x97, 0xA7, 0xA8, 0xF8, 0xAC, 0xE0, 0x0E, 0xFB, 0x98,
		0xB9, 0x4C, 0x29, 0xE1, 0x4B, 0xFF, 0xAB, 0x06, 0x13, 0xD6, 0x0F, 0xED, 0x2A, 0x3E, 0xB8,
		0xBB, 0x2F, 0x17, 0x54, 0x61, 0x71, 0x4A, 0x55, 0x1D, 0x23, 0x47, 0xB6, 0xF7, 0x39, 0xF9,
		0x5C, 0xC2, 0xEF, 0xDA, 0x31, 0xC9, 0x79, 0x1C, 0x72, 0x28, 0xDD, 0xC1, 0xB7, 0xFD, 0xA5,
		0xF1, 0x46, 0xE5, 0x53, 0x82, 0xC3, 0x93, 0x4E, 0x24, 0xB5, 0xE6, 0xBC, 0x5D, 0x8A, 0x94,
		0xA2, 0xE7, 0xCD, 0x4D, 0x11, 0x64, 0xB3, 0xDF, 0x10, 0xFE, 0xD7, 0x6A, 0xC6, 0x62, 0xEC,
		0x51, 0x73, 0xA1, 0x63, 0x43, 0x05, 0x90, 0x50, 0x85, 0xDB, 0x70, 0x42, 0x76, 0x65, 0x1A,
		0x32, 0x6E, 0xD2, 0xB2, 0x19, 0xAF, 0x25, 0xC7, 0x57, 0x56, 0x9A, 0x6D, 0xE2, 0x6C, 0x35,
		0x1B, 0xC8, 0x7A, 0xEA, 0x21, 0x48, 0x8F, 0x9E, 0xE9, 0xA4, 0x86, 0xEB, 0x41, 0x08, 0xDC,
		0xB4, 0x78, 0x15, 0x33, 0x9B, 0x26, 0xEE, 0xBE, 0x9F, 0xD4, 0xD5, 0x8C, 0xBA, 0x58, 0xE8,
		0xF4, 0xCB, 0xBF, 0x83, 0xF5, 0xFC, 0x45, 0x81, 0xA9, 0x66, 0x7E, 0xF2, 0xB0, 0x5B, 0x1F,
		0x77, 0xAE, 0x14, 0x37, 0x27, 0x8B, 0xFA, 0x99, 0x3C, 0x95, 0x5E, 0xBD, 0x3D, 0xD1, 0x87,
		0x9C, 0x5F, 0xC4, 0xA6, 0xAA, 0x92, 0x52, 0x6B, 0x16, 0x30, 0x44, 0x8E, 0x5A, 0x68, 0x1E,
		0x34, 0x3B, 0x75, 0xA3, 0x3F, 0xDE, 0x74,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_2
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_2() {
	const S: &[u8] = &[
		0x09, 0x09, 0x09, 0x0C, 0x0B, 0x20, 0x20, 0x20, 0x0B, 0x09, 0x0A, 0x0B, 0x0D, 0x20, 0x0B,
		0x0C, 0x20, 0x0D, 0x0C, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x69, 0x69,
		0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69,
		0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69,
	];
	const BASE: &[u8] = &[
		0x9E, 0x69,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_3
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_3() {
	const S: &[u8] = &[
		0x09, 0x0A, 0x20, 0x0C, 0x0A, 0x0A, 0x0C, 0x20, 0x0D, 0x0C, 0x0C, 0x0A, 0x0B, 0x0C, 0x0A,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B,
		0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x1D, 0x1D,
		0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D,
		0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D,
		0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x41, 0xFA, 0x41, 0x41, 0xFA, 0x41, 0xFA, 0xFA, 0xFA,
		0x41, 0xFA, 0x41, 0x41, 0x1D, 0xFA, 0x1D, 0xFA, 0x41, 0x1D, 0x41,
	];
	const BASE: &[u8] = &[
		0x1D, 0x41, 0xFA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_5
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_5() {
	const S: &[u8] = &[
		0x0A, 0x09, 0x09, 0x0A, 0x09, 0x20, 0x0C, 0x0C, 0x09, 0x0C, 0x0B, 0x0C, 0x20, 0x0A, 0x09,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B,
		0x2B, 0x2B, 0x2D, 0xE2, 0xE2, 0x11, 0x81, 0x81, 0xB7, 0xB7, 0x6E, 0x6E, 0x81, 0xB7, 0x81,
		0xB7, 0xE2, 0xB7, 0x6E,
	];
	const BASE: &[u8] = &[
		0xE2, 0x11, 0x6E, 0x81, 0xB7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_7
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_7() {
	const S: &[u8] = &[
		0x0C, 0x0A, 0x0B, 0x0B, 0x0A, 0x20, 0x09, 0x09, 0x0A, 0x0C, 0x09, 0x0D, 0x0D, 0x0A, 0x09,
		0x09, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x47, 0x47, 0x47,
		0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
		0x47, 0x76, 0x47, 0xFE, 0x76, 0xD4, 0xFE, 0xD3, 0x76, 0x76, 0x76, 0xA3, 0x76,
	];
	const BASE: &[u8] = &[
		0x47, 0x76, 0xD3, 0xD4, 0xFE, 0x45, 0xA3,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_11
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_11() {
	const S: &[u8] = &[
		0x0A, 0x0C, 0x0D, 0x0C, 0x09, 0x09, 0x09, 0x0D, 0x0C, 0x09, 0x09, 0x0C, 0x0C, 0x0D, 0x20,
		0x0C, 0x0B, 0x0D, 0x09, 0x0D, 0x09, 0x0B, 0x0D, 0x0B, 0x20, 0x0C, 0x20, 0x20, 0x0D, 0x20,
		0x0B, 0x0C, 0x20, 0x0B, 0x0B, 0x0C, 0x09, 0x09, 0x09, 0x09, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A,
		0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x2F, 0x7A, 0x91, 0x91, 0x91, 0x7A,
		0x91, 0x48, 0xE0,
	];
	const BASE: &[u8] = &[
		0x7A, 0xE0, 0x91, 0x96, 0x3F, 0x64, 0x93, 0x1F, 0x48, 0x74, 0x2F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_13
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_13() {
	const S: &[u8] = &[
		0x0C, 0x20, 0x20, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x7F, 0x7F, 0x7F, 0xF0, 0x25, 0xF0, 0x19, 0x64, 0x71,
		0x64, 0x64, 0x64,
	];
	const BASE: &[u8] = &[
		0x7F, 0xE5, 0xF0, 0x7A, 0x71, 0x44, 0xB6, 0x28, 0x25, 0xF6, 0x64, 0x19, 0x99,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_19
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_19() {
	const S: &[u8] = &[
		0x09, 0x0B, 0x20, 0x0B, 0x0B, 0x0A, 0x20, 0x20, 0x0C, 0x0B, 0x0D, 0x20, 0x09, 0x0C, 0x09,
		0x0A, 0x0C, 0x20, 0x09, 0x09, 0x0C, 0x0A, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0C, 0x2D, 0x2D,
		0x2B, 0x12, 0x12, 0x12, 0x12, 0xD2, 0xBC, 0x36, 0xA8, 0xBC, 0x7C, 0xCC, 0xD2,
	];
	const BASE: &[u8] = &[
		0x12, 0xED, 0xD2, 0xCC, 0xC9, 0xA8, 0xAA, 0xBC, 0x4D, 0xBB, 0x7F, 0x80, 0x36, 0x06, 0x59,
		0x13, 0x63, 0x7C, 0xF4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_42
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_42() {
	const S: &[u8] = &[
		0x20, 0x09, 0x0A, 0x0C, 0x0D, 0x0A, 0x0C, 0x20, 0x0D, 0x0D, 0x0D, 0x0B, 0x0B, 0x0B, 0x0A,
		0x0A, 0x0A, 0x0C, 0x0B, 0x09, 0x0A, 0x0D, 0x0A, 0x0C, 0x0A, 0x0B, 0x09, 0x0C, 0x09, 0x0A,
		0x20, 0x0C, 0x20, 0x0B, 0x0C, 0x0D, 0x0D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
		0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xFF, 0x02, 0x42, 0xEB, 0xD2, 0x92,
	];
	const BASE: &[u8] = &[
		0x04, 0x92, 0x55, 0x15, 0x32, 0x42, 0x47, 0xC6, 0x3F, 0xA5, 0xBF, 0xC4, 0xD5, 0x65, 0xAC,
		0xD2, 0xFF, 0xF0, 0x02, 0xFD, 0xAF, 0xF9, 0x5C, 0xA8, 0xEB, 0xE0, 0xD7, 0x19, 0x8B, 0xB2,
		0xBB, 0x94, 0xA4, 0x77, 0x7B, 0x57, 0x8F, 0x23, 0x8A, 0x7E, 0x48, 0x50,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_73
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_73() {
	const S: &[u8] = &[
		0x0D, 0x0B, 0x0C, 0x20, 0x20, 0x0A, 0x0C, 0x0A, 0x0A, 0x0D, 0x09, 0x09, 0x09, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE, 0xAE,
		0xAE, 0xAE, 0xAE, 0xAE, 0x56, 0x90, 0x79, 0xAC, 0x4D, 0xEC,
	];
	const BASE: &[u8] = &[
		0xAE, 0x56, 0x90, 0xDF, 0x66, 0xB6, 0xA8, 0x54, 0xF9, 0x2A, 0xE5, 0x17, 0xF4, 0x53, 0xC3,
		0xEC, 0xD8, 0x5A, 0x35, 0x7F, 0xAC, 0x68, 0xE0, 0xE3, 0xA5, 0x88, 0x60, 0x7C, 0x8E, 0x84,
		0x85, 0x57, 0x71, 0x07, 0xA9, 0x19, 0xBA, 0x0F, 0x39, 0x12, 0xF5, 0x37, 0x22, 0x14, 0x4D,
		0x79, 0xEB, 0xBC, 0x46, 0x4A, 0x97, 0xEF, 0xF3, 0x6D, 0xA3, 0x93, 0x8A, 0x3C, 0x78, 0x96,
		0xB7, 0xAF, 0xFA, 0x47, 0x1E, 0x26, 0xFF, 0x51, 0x87, 0xA2, 0x49, 0x5D, 0x38,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_113
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_113() {
	const S: &[u8] = &[
		0x0B, 0x0B, 0x0C, 0x0A, 0x0B, 0x0A, 0x09, 0x0A, 0x0D, 0x0B, 0x0C, 0x09, 0x20, 0x0C, 0x20,
		0x0B, 0x0D, 0x0C, 0x0D, 0x0B, 0x09, 0x09, 0x20, 0x0D, 0x20, 0x0B, 0x0C, 0x0B, 0x09, 0x0C,
		0x0A, 0x09, 0x0D, 0x0A, 0x20, 0x20, 0x0A, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2B, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
		0xA4, 0xC4, 0xBF, 0xF0, 0xBE,
	];
	const BASE: &[u8] = &[
		0x64, 0xF9, 0xF8, 0x19, 0x73, 0xE0, 0xD8, 0xBE, 0xE4, 0x5B, 0x79, 0x80, 0x53, 0xA4, 0x35,
		0x08, 0x29, 0x13, 0xF3, 0xC4, 0x24, 0x1D, 0x81, 0x9B, 0xB4, 0x2A, 0x07, 0x1E, 0x87, 0xE6,
		0x3C, 0xA0, 0x70, 0x78, 0x0E, 0xBF, 0x8F, 0xF1, 0x5C, 0x48, 0xEF, 0x10, 0xC1, 0x49, 0xC5,
		0xAB, 0x42, 0x55, 0x68, 0xFE, 0x15, 0xDA, 0xD2, 0xF0, 0x01, 0xA6, 0xFB, 0x7C, 0x8B, 0x1C,
		0x8C, 0xB1, 0x88, 0x3B, 0xC3, 0xF2, 0x66, 0x93, 0x4B, 0xEA, 0x3A, 0x7D, 0xA8, 0xFF, 0x8D,
		0x05, 0x89, 0xB5, 0xB7, 0x76, 0x1F, 0x9A, 0xAD, 0x4D, 0x39, 0xAA, 0x58, 0xFD, 0xF4, 0x28,
		0x46, 0xC8, 0x9E, 0x4E, 0x44, 0x50, 0x95, 0x3F, 0x7F, 0x5E, 0x9C, 0xDB, 0xEB, 0x98, 0xCF,
		0x38, 0x59, 0xFA, 0x63, 0x31, 0x1B, 0x9D, 0xD7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_193
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_193() {
	const S: &[u8] = &[
		0x0D, 0x2D, 0x2B, 0x2D, 0x95, 0xA3, 0xCD, 0x80, 0x78, 0xB8,
	];
	const BASE: &[u8] = &[
		0x95, 0xA3, 0xB3, 0x52, 0x2E, 0xA9, 0x1F, 0x82, 0x41, 0xB1, 0x2A, 0xB0, 0x46, 0xBC, 0xE5,
		0x13, 0xCB, 0xC6, 0x6E, 0xF0, 0x02, 0x22, 0x78, 0xE3, 0x6B, 0x4F, 0xD9, 0xDD, 0x3A, 0xCA,
		0xC5, 0xDA, 0x74, 0x1B, 0xD5, 0xE9, 0x61, 0x7F, 0xBD, 0x9D, 0x29, 0xAE, 0xDF, 0x51, 0x24,
		0x59, 0x25, 0x62, 0xFC, 0x9C, 0x83, 0x27, 0xC1, 0xB8, 0x0F, 0x36, 0x70, 0xC4, 0xF5, 0x3C,
		0xD7, 0x67, 0x7E, 0x7D, 0x03, 0x4D, 0x8B, 0xBE, 0xB5, 0x3E, 0xD2, 0x91, 0x7A, 0x5B, 0x9B,
		0xFF, 0xF6, 0x9F, 0x85, 0x72, 0x34, 0x38, 0x76, 0x1C, 0xC3, 0x04, 0x57, 0xC8, 0x31, 0x21,
		0x7B, 0x16, 0x2C, 0xBF, 0xFA, 0x87, 0x42, 0x65, 0x23, 0x4E, 0x75, 0xAA, 0x68, 0xF7, 0x30,
		0xCD, 0x4B, 0x9A, 0xAC, 0xCC, 0xA6, 0x08, 0xF1, 0x15, 0x98, 0xEB, 0xA0, 0x6A, 0x93, 0x26,
		0x10, 0x19, 0xAF, 0xF9, 0x01, 0xA8, 0xB4, 0x3F, 0x58, 0x1D, 0xA4, 0x99, 0x8F, 0xA1, 0x64,
		0x55, 0xB9, 0x40, 0x80, 0x8C, 0x71, 0x96, 0x32, 0xF3, 0xFE, 0x5F, 0x73, 0xB6, 0x05, 0x44,
		0x14, 0xAD, 0x86, 0xB7, 0xE0, 0x8E, 0x5E, 0x3D, 0xA5, 0x47, 0x35, 0x9E, 0x2F, 0xD8, 0x92,
		0x12, 0x11, 0xEE, 0x5A, 0x28, 0x4A, 0x56, 0xC7, 0xE2, 0x8D, 0x39, 0xE7, 0x94, 0xBA, 0x7C,
		0x69, 0x5D, 0x81, 0xC2, 0x84, 0xF4, 0xA7, 0x0E, 0xE4, 0x3B, 0xE6, 0x6D, 0xB2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_247
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_247() {
	const S: &[u8] = &[
		0x0A, 0x09, 0x09, 0x0C, 0x20, 0x09, 0x0C, 0x0A, 0x20, 0x0D, 0x0D, 0x20, 0x0B, 0x09, 0x20,
		0x09, 0x0D, 0x0B, 0x0B, 0x0D, 0x20, 0x0D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D,
		0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D,
		0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D, 0x9D,
		0x9D, 0x50, 0x52, 0xC1, 0x4F,
	];
	const BASE: &[u8] = &[
		0x9D, 0x54, 0xEC, 0x33, 0xF8, 0xF2, 0xAE, 0xAF, 0xE9, 0xE4, 0x7A, 0x6B, 0xCB, 0x10, 0xA7,
		0xDE, 0x94, 0x5B, 0x5E, 0x59, 0x36, 0xCF, 0x7B, 0xDF, 0x27, 0x69, 0x44, 0xCD, 0x82, 0x07,
		0x58, 0x9E, 0x34, 0xC2, 0xAD, 0x45, 0x74, 0x3A, 0xB3, 0x38, 0x2C, 0x92, 0x03, 0x1C, 0x5D,
		0x2F, 0x15, 0x1F, 0x31, 0x67, 0xF1, 0x8A, 0xB5, 0x4A, 0x60, 0xF5, 0x2A, 0x9B, 0xFE, 0x86,
		0x01, 0x1B, 0x8E, 0xBE, 0x19, 0x9A, 0x08, 0x96, 0x30, 0x0E, 0xD6, 0xD1, 0xC5, 0xD9, 0x88,
		0x97, 0x2E, 0xB9, 0x63, 0x95, 0x7E, 0x3C, 0xD5, 0xE8, 0xC0, 0x75, 0xB7, 0x32, 0xBA, 0x48,
		0x81, 0x4D, 0xA4, 0x12, 0x23, 0xE3, 0x8F, 0x9F, 0xF4, 0x62, 0x53, 0x89, 0x6A, 0xE5, 0xA1,
		0x5C, 0x8D, 0xD4, 0x51, 0x35, 0x37, 0xB1, 0xC1, 0x55, 0x3B, 0xFB, 0x02, 0x1E, 0x29, 0x16,
		0x0F, 0x98, 0x57, 0x8B, 0x4E, 0x52, 0x7C, 0xD7, 0x3F, 0x39, 0x78, 0xF3, 0xF0, 0x3E, 0x1D,
		0xEB, 0xE0, 0xB8, 0xFF, 0xA5, 0x64, 0x04, 0x50, 0xC8, 0xD3, 0x84, 0x22, 0xA8, 0xA9, 0x6E,
		0xC7, 0xF9, 0x17, 0xB0, 0x9C, 0x71, 0x24, 0xA2, 0x76, 0x7F, 0xEA, 0x4C, 0xBB, 0xC9, 0x93,
		0x5F, 0x41, 0xD2, 0xA3, 0x06, 0xFA, 0xC3, 0x3D, 0xFC, 0xC4, 0xA0, 0x40, 0xB2, 0xBF, 0x66,
		0x6C, 0x28, 0xBD, 0x83, 0xDC, 0xAA, 0x05, 0xE2, 0x42, 0x77, 0xC6, 0x61, 0x4F, 0x5A, 0x18,
		0x11, 0x65, 0xB4, 0xEE, 0xE1, 0x79, 0x80, 0xDD, 0xAB, 0xE6, 0x85, 0x13, 0x70, 0x26, 0xA6,
		0x99, 0x46, 0xBC, 0x43, 0x56, 0x47, 0xCA, 0xCE, 0x7D, 0x72, 0x68, 0x8C, 0xD8, 0xDB, 0x1A,
		0x6D, 0xAC, 0x25, 0xFD, 0x4B, 0x91, 0x90, 0xB6, 0x14, 0x87, 0x49, 0x21, 0xED, 0xD0, 0xCC,
		0xDA, 0xEF, 0xF6, 0x6F, 0xE7, 0xF7, 0x73,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x20, 0x0D, 0x0C, 0x09, 0x20, 0x0B, 0x0D, 0x0D, 0x0B, 0x09, 0x09, 0x09, 0x0D, 0x0D,
		0x09, 0x0B, 0x20, 0x20, 0x0C, 0x0D, 0x0C, 0x0A, 0x0D, 0x0C, 0x0A, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2B, 0x2D, 0x2B, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5,
		0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0xC5,
		0xC5, 0xC5, 0xC5, 0xC5, 0xC5, 0x47, 0x59, 0x4B, 0x7F, 0x8F, 0x05, 0x61, 0xA1, 0xBE, 0x0C,
		0x23, 0x28, 0x6C, 0x11, 0x95, 0x35, 0x87, 0x4E, 0x09, 0x3F, 0x47, 0xD6,
	];
	const BASE: &[u8] = &[
		0x8E, 0xC5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0B, 0x09, 0x09, 0x0D, 0x0D, 0x0C, 0x09, 0x0C, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x0F, 0x8F, 0x0F, 0x0F, 0x8F, 0x0F, 0x8F, 0x8F, 0x8F, 0x0F,
		0x8F, 0x0F, 0x0F, 0xD1, 0x8F, 0xD1, 0x8F, 0x0F, 0xD1, 0x0F, 0x19, 0x07, 0x19, 0xAF, 0x9C,
		0xA1, 0x25, 0xB6, 0x65, 0x87, 0xCD, 0x9B, 0x72, 0x35, 0xBC, 0x4A, 0x0C, 0x88, 0xA7, 0x23,
		0x55, 0x34, 0xCE, 0x72, 0x6B, 0x1D, 0x8C, 0x3E, 0xC1, 0xF8, 0x03, 0x1E, 0x6F,
	];
	const BASE: &[u8] = &[
		0xD1, 0x0F, 0x8F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0B, 0x0D, 0x0A, 0x0B, 0x0C, 0x09, 0x0A, 0x0D, 0x0C, 0x0B, 0x0B, 0x20, 0x09, 0x09, 0x0B,
		0x20, 0x20, 0x20, 0x0D, 0x09, 0x09, 0x0A, 0x20, 0x0D, 0x0B, 0x0A, 0x0D, 0x0B, 0x0C, 0x0B,
		0x20, 0x09, 0x09, 0x0C, 0x0B, 0x0D, 0x09, 0x0C, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0xD2, 0x86, 0x86,
		0x07, 0x07, 0xB5, 0xB5, 0x86, 0x07, 0x86, 0x07, 0x31, 0x07, 0xB5, 0xCB, 0x5F, 0x19, 0x0F,
		0x90, 0x0B, 0x4F, 0xB3, 0x68, 0xB4, 0x15, 0x8C, 0xCF, 0xCD, 0xE1, 0xA3, 0x32, 0xFF, 0x35,
		0xBC, 0xE3, 0xAC, 0x88, 0x63, 0x70, 0xA2, 0x7B, 0xCC, 0xDB, 0x34, 0x80, 0x26, 0xCF, 0x83,
		0x6E,
	];
	const BASE: &[u8] = &[
		0x31, 0xD2, 0xB5, 0x86, 0x07,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0B, 0x0D, 0x09, 0x20, 0x0D, 0x0B, 0x0A, 0x0D, 0x0C, 0x0D, 0x0C, 0x0D, 0x09, 0x20,
		0x20, 0x0B, 0x0A, 0x20, 0x20, 0x0C, 0x0C, 0x0B, 0x0D, 0x0D, 0x0A, 0x09, 0x0B, 0x0D, 0x0C,
		0x09, 0x0A, 0x0B, 0x0C, 0x0B, 0x09, 0x0D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0xAD, 0xAE, 0x1B, 0xAD, 0x35, 0x1B, 0xD2,
		0xAD, 0xAD, 0xAD, 0x2A, 0xAD, 0x6A, 0x4D, 0x45, 0x69, 0x5A, 0x75,
	];
	const BASE: &[u8] = &[
		0xAE, 0xAD, 0xD2, 0x35, 0x1B, 0x54, 0x2A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x20, 0x0A, 0x20, 0x0C, 0x0B, 0x0A, 0x0B, 0x0B, 0x20, 0x0A, 0x0B, 0x09, 0x0C, 0x0A,
		0x0C, 0x0B, 0x0C, 0x0B, 0x09, 0x09, 0x20, 0x09, 0x09, 0x20, 0x0C, 0x0C, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0xBA, 0x6E, 0xE4, 0xE4, 0xE4, 0x6E,
		0xE4, 0x73, 0x13, 0x54, 0xF8,
	];
	const BASE: &[u8] = &[
		0x6E, 0x13, 0xE4, 0x89, 0x9E, 0x9F, 0x7B, 0xB6, 0x73, 0xDE, 0xBA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x0D, 0x0A, 0x09, 0x0C, 0x0D, 0x0C, 0x20, 0x0C, 0x0C, 0x09, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0xF3, 0xC3, 0xF3,
		0xC4, 0x48, 0x30, 0x48, 0x48, 0x48, 0x05, 0xAC, 0xC7, 0xB4, 0x99, 0x98, 0xE4, 0x15, 0x9A,
		0x76, 0xF7, 0x41, 0xE6, 0x7D, 0x7E, 0x78, 0x5F, 0xD4, 0xF1, 0x29, 0x8A, 0x75, 0xD2, 0xA2,
		0x8B, 0x74, 0x7E, 0xAF, 0x9E, 0x68, 0x40, 0x89, 0x74, 0x59, 0xE1, 0x56, 0x5D, 0x87,
	];
	const BASE: &[u8] = &[
		0x6C, 0x21, 0xF3, 0xEC, 0x30, 0x65, 0x03, 0x38, 0xC3, 0xD8, 0x48, 0xC4, 0x53,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0B, 0x0A, 0x0A, 0x0D, 0x0C, 0x20, 0x0C, 0x0A, 0x09, 0x0B, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
		0x0D, 0x0B, 0x0A, 0x0C, 0x20, 0x20, 0x0D, 0x0D, 0x20, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x53, 0x22, 0x4A, 0x57, 0x22, 0xB8, 0x79, 0x53, 0xAB, 0x30,
		0x40, 0x0A, 0x3F, 0xCF, 0xAE, 0x68, 0x23, 0xFF, 0x94, 0x75, 0x38, 0xBA, 0x81, 0x35, 0x13,
		0xDA, 0xE9, 0x16, 0x71, 0xC2, 0x1A, 0x38, 0x0B, 0xF2, 0x2D, 0x3E, 0xFB, 0xE0, 0xF2, 0x83,
		0x0B, 0xA2, 0xB0, 0x7D, 0x9E, 0x14, 0x3B,
	];
	const BASE: &[u8] = &[
		0xFD, 0x46, 0x53, 0x79, 0xD4, 0x57, 0xA0, 0x22, 0xC8, 0x33, 0x1F, 0x59, 0x4A, 0xDB, 0xA7,
		0x32, 0x4F, 0xB8, 0x2E,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x09, 0x0C, 0x20, 0x09, 0x0D, 0x20, 0x20, 0x0A, 0x0A, 0x09, 0x0B, 0x20, 0x09, 0x0C,
		0x0A, 0x0D, 0x0D, 0x20, 0x0C, 0x0C, 0x0C, 0x0B, 0x0C, 0x20, 0x0A, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2D, 0xE7, 0xEB, 0xAF, 0x01, 0xC6, 0xA1, 0xA3, 0x25, 0x8C, 0x20, 0xA4, 0x73, 0x43,
		0xD3, 0x8C, 0x52, 0x5D, 0xF5, 0xA9, 0x68, 0x34, 0x6F,
	];
	const BASE: &[u8] = &[
		0x8D, 0xA1, 0xFA, 0x9B, 0x84, 0xAF, 0x04, 0x92, 0x14, 0xCC, 0xB8, 0xCB, 0x4E, 0x2C, 0x44,
		0xC6, 0xE7, 0xF2, 0xEB, 0xC2, 0xEC, 0x89, 0x8A, 0x6D, 0x01, 0x4A, 0xF3, 0xCD, 0x33, 0xE2,
		0xF0, 0x36, 0xFB, 0xA0, 0x1F, 0xFE, 0xD6, 0xAD, 0xC3, 0x2F, 0x5F, 0xAA,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x0D, 0x0A, 0x0C, 0x0B, 0x0C, 0x0D, 0x0A, 0x0B, 0x20, 0x20, 0x0D, 0x0C, 0x20,
		0x20, 0x0B, 0x0C, 0x0A, 0x0D, 0x0B, 0x0C, 0x0D, 0x0D, 0x0A, 0x0B, 0x20, 0x09, 0x0C, 0x0B,
		0x09, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x4C, 0x7F, 0x80, 0x7A,
		0x27, 0x5A, 0xCF, 0x55, 0xE7, 0x8C, 0xA7, 0x6A, 0x61, 0xE9, 0xC0, 0x8E, 0x35,
	];
	const BASE: &[u8] = &[
		0x1B, 0x4C, 0x7F, 0x07, 0xD1, 0x12, 0xA9, 0x42, 0xB6, 0x36, 0x92, 0x40, 0x9E, 0x99, 0x4E,
		0x5A, 0xB5, 0x3C, 0xBB, 0x62, 0x7A, 0x79, 0xF9, 0x45, 0xA6, 0xE8, 0x9B, 0xFF, 0xB4, 0xD4,
		0x3E, 0x5B, 0x76, 0x0F, 0x19, 0x96, 0x4F, 0x50, 0x17, 0xED, 0x91, 0x33, 0x63, 0x5E, 0x27,
		0x80, 0x86, 0xD0, 0x1A, 0xDD, 0x66, 0xBF, 0x4B, 0x5C, 0x04, 0x2F, 0xC2, 0xA0, 0xBC, 0xC7,
		0x29, 0x06, 0xAB, 0xF1, 0x1C, 0x9F, 0x7C, 0xF6, 0x57, 0x43, 0x32, 0x47, 0x7B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0A, 0x0B, 0x20, 0x0A, 0x0B, 0x0A, 0x0A, 0x0D, 0x0A, 0x0A, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x5C, 0xC9, 0xFB, 0xB6, 0xB2, 0xA0, 0x77,
		0xA7, 0xD7, 0x7F, 0xCF, 0x81, 0xA3, 0x3F, 0x85, 0xAE, 0xAF, 0xBF, 0xD3, 0xEB, 0x41, 0x76,
		0x58, 0x6B, 0xA3, 0xA4, 0xC8, 0xD4,
	];
	const BASE: &[u8] = &[
		0x1B, 0xB0, 0x7C, 0x74, 0x87, 0xAB, 0x63, 0xB2, 0xD2, 0x5A, 0x33, 0x1F, 0xC0, 0x5C, 0x8A,
		0xE6, 0x5D, 0xFA, 0x14, 0xC9, 0x62, 0xF9, 0x98, 0x4A, 0xAA, 0x49, 0x16, 0x4D, 0x34, 0x9F,
		0x48, 0x7E, 0x22, 0x1A, 0x03, 0xFB, 0xA1, 0xB8, 0x96, 0x64, 0xDA, 0x19, 0x60, 0x3D, 0x8B,
		0x4C, 0x6E, 0xAC, 0x2E, 0x15, 0x44, 0xB5, 0x7D, 0xB6, 0x89, 0x37, 0x3C, 0x07, 0x32, 0xC6,
		0xA8, 0xA6, 0x6D, 0x17, 0x52, 0xE7, 0x28, 0x01, 0x5F, 0x86, 0x67, 0x75, 0x31, 0x65, 0x0F,
		0xC5, 0x61, 0x93, 0xF0, 0xF1, 0x70, 0x78, 0xDC, 0x4E, 0xDF, 0x3E, 0x25, 0xCA, 0x12, 0x7A,
		0x8E, 0x29, 0x2F, 0xEC, 0x13, 0xDB, 0x91, 0x84, 0x36, 0x10, 0xE9, 0x47, 0x9E, 0x8F, 0x06,
		0x04, 0xF2, 0xC3, 0x88, 0x53, 0x26, 0xA2, 0xE2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x20, 0x09, 0x09, 0x20, 0x0B, 0x0D, 0x20, 0x09, 0x20, 0x0A, 0x0D, 0x09, 0x0C, 0x0C,
		0x09, 0x0C, 0x0C, 0x0B, 0x09, 0x0B, 0x0A, 0x0C, 0x0C, 0x0B, 0x09, 0x0B, 0x09, 0x0B, 0x0D,
		0x20, 0x20, 0x09, 0x0B, 0x0A, 0x0B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x6E, 0x9B,
		0x0F, 0xC9, 0x03, 0x87, 0xCB, 0x52,
	];
	const BASE: &[u8] = &[
		0xD0, 0x6E, 0x17, 0x4E, 0xE0, 0xE1, 0x23, 0x35, 0x61, 0x10, 0xE6, 0xF8, 0x3D, 0x88, 0x26,
		0x11, 0x3B, 0x7E, 0x67, 0xC4, 0xB9, 0x31, 0xC9, 0xBC, 0x91, 0x9F, 0xED, 0x0E, 0xCA, 0xA5,
		0x1A, 0x7B, 0x24, 0x37, 0xC1, 0xDE, 0x74, 0x3E, 0x2F, 0x83, 0xFC, 0x78, 0xF0, 0xA7, 0xB5,
		0x4F, 0xE5, 0xE7, 0x04, 0xC6, 0x1F, 0xD2, 0xFA, 0x03, 0xB2, 0x68, 0xB7, 0x55, 0xAE, 0x4D,
		0x6B, 0x98, 0x5B, 0x46, 0x12, 0xA3, 0x66, 0x9D, 0x5A, 0x95, 0x47, 0x33, 0xBE, 0x81, 0x43,
		0xCD, 0x6A, 0xA4, 0xFF, 0x6F, 0x82, 0x08, 0x40, 0x02, 0xEA, 0x2A, 0xB6, 0x99, 0x1D, 0x4C,
		0x6D, 0xA6, 0x79, 0x1C, 0x48, 0xB0, 0x65, 0xAA, 0xEE, 0x96, 0xC3, 0xE2, 0x5C, 0x92, 0x14,
		0x9B, 0x3F, 0x97, 0x93, 0xC0, 0x2C, 0x3C, 0x90, 0x15, 0x01, 0x73, 0xE9, 0xFE, 0x49, 0x54,
		0xD5, 0x7A, 0x8B, 0x77, 0x1E, 0xDF, 0xD6, 0xF9, 0xF6, 0x71, 0x70, 0x56, 0xAF, 0x63, 0xD8,
		0x84, 0x8C, 0x76, 0x0F, 0x51, 0xF2, 0x34, 0x75, 0xBB, 0x5F, 0x8E, 0x53, 0xCF, 0xBA, 0xD1,
		0x5E, 0x1B, 0x5D, 0x38, 0x36, 0x62, 0x25, 0x9A, 0x50, 0x58, 0x59, 0xEF, 0x86, 0xD3, 0x44,
		0xD4, 0xC8, 0x7D, 0x2E, 0xB4, 0x4A, 0xE8, 0xE3, 0xA8, 0xF7, 0xA0, 0x8D, 0xF5, 0xE4, 0x16,
		0xEC, 0xBF, 0x06, 0x3A, 0xDA, 0xBD, 0xCE, 0x64, 0x89, 0xAD, 0x60, 0x4B, 0x94,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x0B, 0x0A, 0x09, 0x0B, 0x0B, 0x20, 0x0B, 0x0A, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x20,
		0x09, 0x20, 0x0B, 0x0C, 0x0C, 0x0A, 0x0B, 0x0D, 0x0A, 0x0B, 0x0D, 0x09, 0x0D, 0x2B, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2C, 0x97, 0xC2, 0x47, 0x09, 0x0C, 0x20, 0x2B, 0x0A, 0x2D, 0x0A, 0x0C,
		0x09, 0x0C, 0x20, 0x0A, 0x0D,
	];
	const BASE: &[u8] = &[
		0x74, 0x80, 0x01, 0xB6, 0xF8, 0x93, 0x87, 0x5F, 0xA6, 0x35, 0x37, 0x90, 0xEB, 0x04, 0xD7,
		0xD9, 0x31, 0x02, 0xAB, 0x9E, 0xEA, 0xAD, 0xF6, 0xDF, 0xF5, 0x6A, 0xC8, 0x7F, 0x14, 0xF4,
		0xEF, 0x6F, 0xBF, 0xE7, 0x9A, 0xA3, 0x77, 0xB8, 0xE3, 0xA8, 0x67, 0x53, 0xC3, 0x55, 0x32,
		0xC9, 0x2E, 0x34, 0x43, 0xDC, 0x9B, 0x70, 0xA7, 0xC0, 0xB7, 0x5A, 0xD5, 0xE4, 0x71, 0x03,
		0xF9, 0xA1, 0x38, 0xBA, 0x50, 0x7E, 0x59, 0xE8, 0xAF, 0x6D, 0x6E, 0x3F, 0x96, 0x2A, 0xEE,
		0xD6, 0x30, 0x3E, 0x9D, 0x95, 0x16, 0x4D, 0xDB, 0x62, 0x06, 0xC5, 0xCB, 0x84, 0xE1, 0x08,
		0x4E, 0xBE, 0x8A, 0xBC, 0x92, 0xCC, 0xA0, 0x89, 0xBB, 0x66, 0x3A, 0x05, 0xFA, 0x64, 0xDA,
		0x21, 0x8E, 0x48, 0xE2, 0x3C, 0x94, 0x54, 0xC2, 0x61, 0xAA, 0x1E, 0x8B, 0xB4, 0x22, 0x76,
		0x11, 0x4B, 0xB9, 0x81, 0x2F, 0x97, 0xF1, 0x75, 0xA5, 0x73, 0xEC, 0xAC, 0x33, 0xB2, 0xFB,
		0x4C, 0x5B, 0xD3, 0x68, 0x9F, 0x78, 0xB3, 0x2C, 0xD8, 0xED, 0x41, 0x07, 0x1A, 0x1F, 0x85,
		0xCD, 0xF7, 0x18, 0xCA, 0x8F, 0x56, 0xE6, 0x39, 0xB5, 0xCF, 0xD1, 0x7C, 0xC4, 0xCE, 0x83,
		0x9C, 0x6C, 0x15, 0xFD, 0xF2, 0xFF, 0x49, 0x8D, 0xF3, 0x7A, 0xBD, 0x19, 0xE9, 0x51, 0xE0,
		0x6B, 0xA9, 0x57, 0xD0, 0x4A, 0x13, 0x1B, 0x72, 0x10, 0x17, 0x52, 0x65, 0x47, 0xDE, 0x45,
		0x4F, 0x98, 0xC6, 0x63, 0x5E, 0x5C, 0xF0, 0x26, 0xFE, 0x58, 0x3B, 0xDD, 0x42, 0x40, 0xB1,
		0x27, 0x5D, 0x12, 0xD4, 0x0F, 0x28, 0xC1, 0xB0, 0xAE, 0x8C, 0x91, 0x99, 0xA2, 0x0E, 0x7D,
		0x86, 0x24, 0x7B, 0x88, 0x23, 0x3D, 0xC7, 0x82, 0x69, 0x1C, 0x79, 0xA4, 0x29, 0xFC, 0xD2,
		0x46, 0x36, 0x60, 0x44, 0x25, 0x1D, 0xE5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x20, 0x20, 0x0C, 0x0C, 0x0A, 0x0C, 0x20, 0x0B, 0x20, 0x0D, 0x0D, 0x0D, 0x0D, 0x0A,
		0x09, 0x09, 0x20, 0x09, 0x0A, 0x20, 0x20, 0x20, 0x09, 0x0B, 0x0A, 0x0D, 0x0D, 0x0D, 0x0D,
		0x09, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75,
		0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7,
		0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7,
		0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0xB7, 0x2A, 0x15, 0x7D, 0xC2, 0x74, 0xFF, 0xA8, 0x28,
		0x4C, 0xFF, 0xF9, 0xF4, 0x78, 0x22, 0x48, 0x01, 0xCF, 0x54, 0x60, 0x3D, 0x6F, 0x0F, 0x50,
		0x3F, 0xA1, 0x4E, 0x84, 0x6B, 0xA8, 0x98, 0x07, 0xB3, 0xD2, 0x09, 0x8E, 0xB2, 0x55, 0xCF,
	];
	const BASE: &[u8] = &[
		0x75, 0xB7,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0D, 0x20, 0x09, 0x09, 0x0C, 0x0A, 0x0D, 0x20, 0x0C, 0x0D, 0x0B, 0x0B, 0x20, 0x0C,
		0x0B, 0x0D, 0x0C, 0x0C, 0x20, 0x0B, 0x20, 0x20, 0x0C, 0x20, 0x0D, 0x0C, 0x0C, 0x0B, 0x0D,
		0x0A, 0x0B, 0x09, 0x09, 0x0A, 0x20, 0x09, 0x20, 0x0A, 0x0D, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F,
		0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x55, 0x49, 0x55, 0x55, 0x49, 0x55, 0x49, 0x49, 0x49, 0x55,
		0x49, 0x55, 0x55, 0x4F, 0x49, 0x4F, 0x49, 0x55, 0x4F, 0x55, 0xE4, 0x58, 0xAD, 0xF1, 0xB8,
		0xF5, 0xB9, 0x13,
	];
	const BASE: &[u8] = &[
		0x4F, 0x55, 0x49,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x09, 0x0D, 0x0C, 0x0C, 0x0A, 0x0B, 0x0C, 0x09, 0x0C, 0x0D, 0x0B, 0x0B, 0x09, 0x0D,
		0x20, 0x20, 0x0C, 0x0D, 0x0A, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF,
		0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF,
		0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0x5B, 0x7F, 0x7F, 0x90, 0x90, 0xCD, 0xCD, 0x7F, 0x90, 0x7F,
		0x90, 0xAF, 0x90, 0xCD, 0x6B, 0x35, 0x44, 0xE1, 0x21, 0x5E, 0x0D, 0x3F, 0xCF, 0x10, 0x57,
		0xEA, 0x4F, 0xBE, 0xF6, 0x7E, 0xF0,
	];
	const BASE: &[u8] = &[
		0xAF, 0x5B, 0xCD, 0x7F, 0x90,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0C, 0x0A, 0x0C, 0x0C, 0x0B, 0x09, 0x0B, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x20,
		0x0B, 0x09, 0x0D, 0x0C, 0x0B, 0x0A, 0x0C, 0x0B, 0x0A, 0x0B, 0x09, 0x20, 0x0A, 0x0D, 0x0C,
		0x0A, 0x20, 0x09, 0x0D, 0x0C, 0x20, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x2E, 0x89, 0x74, 0x2E, 0xB0, 0x74, 0x28, 0x2E, 0x2E, 0x2E, 0x50, 0x2E, 0x5E, 0xBD,
		0x6C, 0x96, 0x88, 0xF4,
	];
	const BASE: &[u8] = &[
		0x89, 0x2E, 0x28, 0xB0, 0x74, 0x08, 0x50,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0B, 0x0D, 0x09, 0x20, 0x0B, 0x0D, 0x20, 0x0A, 0x20, 0x0B, 0x0C, 0x09, 0x09, 0x0A,
		0x09, 0x09, 0x0B, 0x0A, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x20, 0x0A, 0x0A, 0x0A, 0x0D,
		0x0C, 0x0B, 0x0C, 0x0C, 0x0C, 0x09, 0x0C, 0x0A, 0x0B, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x26, 0x80, 0x75,
		0x75, 0x75, 0x80, 0x75, 0xC7, 0x77, 0x93, 0xED, 0xF4, 0x66, 0x4C, 0x33, 0xC1, 0xAD, 0x53,
		0x0F, 0x01, 0xE6,
	];
	const BASE: &[u8] = &[
		0x80, 0x77, 0x75, 0x37, 0x39, 0x61, 0xEA, 0xFD, 0xC7, 0x3D, 0x26,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0B, 0x0A, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x09, 0x0D, 0x0C, 0x0D, 0x0B, 0x0D,
		0x0D, 0x0C, 0x0C, 0x20, 0x0C, 0x09, 0x0D, 0x0A, 0x09, 0x20, 0x0B, 0x0A, 0x20, 0x0A, 0x0D,
		0x09, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
		0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
		0xA3, 0x04, 0xEA, 0x04, 0xD5, 0x77, 0xD6, 0x77, 0x77, 0x77, 0x92, 0x73, 0x87, 0x94, 0xAB,
		0x54, 0x35, 0xCC, 0x2B, 0xB2, 0xBA, 0xC6, 0xAD, 0x09, 0x64, 0x88, 0x91, 0x2E, 0xF6, 0xDE,
	];
	const BASE: &[u8] = &[
		0xA3, 0xE3, 0x04, 0x55, 0xD6, 0x51, 0x79, 0x06, 0xEA, 0x45, 0x77, 0xD5, 0xF2,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0B, 0x0C, 0x0D, 0x09, 0x0A, 0x09, 0x0B, 0x0B, 0x0C, 0x0A, 0x20, 0x09, 0x09, 0x20,
		0x0C, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xF9, 0xE5, 0xBB, 0x23, 0xE5, 0x7A, 0x55,
		0xF9, 0xC0, 0x72, 0xD4, 0xF5, 0x70, 0xAC, 0x52, 0x61, 0xA6, 0x56, 0xC6, 0x42, 0x70, 0x5C,
		0x0E, 0xEB, 0x33, 0x7D, 0x6F, 0xA0, 0xB8, 0xC8, 0x13, 0x56, 0xEF,
	];
	const BASE: &[u8] = &[
		0x81, 0x7F, 0xF9, 0x55, 0xD1, 0x23, 0x25, 0xE5, 0x04, 0x93, 0x64, 0x75, 0xBB, 0x10, 0xDC,
		0xB9, 0x65, 0x7A, 0x01,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x0B, 0x09, 0x09, 0x0A, 0x09, 0x0B, 0x0A, 0x0C, 0x0A, 0x0D, 0x0A, 0x20, 0x0B, 0x09,
		0x0D, 0x0B, 0x0A, 0x0C, 0x0A, 0x0D, 0x0C, 0x20, 0x09, 0x0A, 0x09, 0x20, 0x0B, 0x20, 0x0C,
		0x0C, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2,
		0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0xE2, 0x6E, 0x8C, 0xE4, 0xBD, 0xD3, 0x0E, 0x1C, 0x6B,
	];
	const BASE: &[u8] = &[
		0xE2, 0x0E, 0x59, 0x22, 0xFC, 0xE4, 0x17, 0xA4, 0x7B, 0x67, 0x14, 0xA1, 0xAA, 0x61, 0x24,
		0xD3, 0x6E, 0xC6, 0x8C, 0x30, 0x3F, 0xAF, 0x11, 0x8D, 0xBD, 0xDE, 0xD9, 0xA6, 0x62, 0xCE,
		0xF1, 0x9B, 0x89, 0x5D, 0x38, 0xFA, 0xCF, 0xEB, 0x3C, 0xC9, 0x3B, 0x01,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x09, 0x0A, 0x09, 0x20, 0x0C, 0x0D, 0x0D, 0x0B, 0x09, 0x0C, 0x0D, 0x51, 0x51, 0x51, 0x51,
		0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51,
		0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x3C,
		0xE9, 0x28, 0x77, 0x62, 0x83, 0x03, 0xC0, 0x53, 0xD1, 0xEE, 0x9A, 0x72, 0x50, 0x2F, 0x16,
		0xA0, 0x07, 0x5E, 0xF7, 0x57, 0x35, 0x2C, 0x49, 0x58, 0xF8, 0x36, 0x7A, 0xF9, 0x9D, 0x69,
		0x3E, 0x76, 0x9D, 0x0C, 0xD8, 0x91,
	];
	const BASE: &[u8] = &[
		0x51, 0x3C, 0xE9, 0xA5, 0xAF, 0x79, 0x42, 0x21, 0x7E, 0x45, 0x3A, 0x5B, 0x17, 0xAB, 0x7D,
		0x83, 0xE8, 0x29, 0x9C, 0xED, 0x77, 0x92, 0xEB, 0x6B, 0xA2, 0x12, 0xB8, 0xFF, 0xE3, 0xFC,
		0x0F, 0xFA, 0xC2, 0x2E, 0x18, 0xEA, 0x6A, 0x22, 0xDB, 0xC9, 0x05, 0x5D, 0xA3, 0x1F, 0x62,
		0x28, 0x13, 0x34, 0x04, 0x15, 0xB4, 0x7F, 0x65, 0x86, 0x41, 0x31, 0x87, 0x46, 0xB5, 0x8F,
		0x71, 0x94, 0xB2, 0xE2, 0xBF, 0xE7, 0xDD, 0x4D, 0x43, 0x70, 0xD4, 0x7C, 0x73,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0D, 0x09, 0x0A, 0x09, 0x0B, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8,
		0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0x7F, 0x22, 0xA5, 0x86, 0x72, 0xB1, 0x9B, 0xDD,
		0x20, 0xF7, 0x79, 0xAE, 0xA8, 0x7C, 0x24, 0xC4, 0x68, 0xAE, 0x2B, 0x3E, 0x3C,
	];
	const BASE: &[u8] = &[
		0xC8, 0xF2, 0x10, 0x4B, 0x29, 0xEA, 0x16, 0x72, 0x23, 0xA4, 0xE5, 0x5B, 0x41, 0x7F, 0x31,
		0x82, 0xCE, 0x7B, 0xCA, 0x22, 0x44, 0x8F, 0xE9, 0xC9, 0xE6, 0x8B, 0xF9, 0x04, 0x4C, 0xE4,
		0xBC, 0x0E, 0x89, 0x5D, 0xBB, 0xA5, 0xFF, 0x81, 0x02, 0xF1, 0x5F, 0x07, 0xE3, 0x5C, 0x14,
		0xD4, 0xE2, 0xD6, 0x03, 0xA9, 0x61, 0x8E, 0x3B, 0x86, 0xC1, 0x30, 0x28, 0x60, 0x4F, 0x40,
		0x65, 0xFE, 0x92, 0x2F, 0x19, 0x63, 0x3F, 0xBD, 0x59, 0x84, 0x49, 0x50, 0x8D, 0x12, 0xA6,
		0x53, 0x67, 0x71, 0xB4, 0x55, 0xF8, 0xAA, 0xA1, 0x46, 0x93, 0xD0, 0x69, 0x47, 0x15, 0x08,
		0x73, 0x2A, 0x43, 0xE8, 0x94, 0x62, 0x13, 0x48, 0x39, 0x11, 0xFB, 0xA0, 0xBA, 0x3D, 0x54,
		0x95, 0xE1, 0x9A, 0xAF, 0x9D, 0xB7, 0xDB, 0xCD,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0C, 0x0A, 0x0A, 0x0B, 0x0C, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0xAB, 0x83, 0x19, 0x04, 0x30, 0x2C,
	];
	const BASE: &[u8] = &[
		0x81, 0xAB, 0x68, 0xE4, 0xB9, 0x98, 0x39, 0x3C, 0xF1, 0xCA, 0x03, 0xDD, 0xCC, 0x6B, 0x16,
		0x65, 0xA9, 0x79, 0x6E, 0xF3, 0x72, 0x5A, 0x04, 0xE9, 0x59, 0x77, 0x8A, 0xC8, 0x12, 0x0E,
		0x8C, 0xA2, 0x31, 0x1F, 0xC1, 0xB2, 0x02, 0x54, 0xE8, 0x3E, 0xDE, 0x8D, 0xBA, 0xE6, 0xA1,
		0xFB, 0x3B, 0xDB, 0x36, 0x4D, 0xBF, 0x15, 0xF2, 0x30, 0xB5, 0x95, 0xD8, 0xF5, 0x51, 0xA0,
		0xF7, 0x43, 0x6F, 0xA8, 0x97, 0xC3, 0xD7, 0x2A, 0x63, 0x1C, 0xF8, 0x69, 0xB3, 0x71, 0x57,
		0x91, 0x82, 0xD0, 0x7E, 0x14, 0xD2, 0x10, 0x08, 0x21, 0xC5, 0x61, 0xCD, 0x42, 0x67, 0x9E,
		0xFA, 0x4A, 0x4E, 0xEE, 0x2E, 0xAE, 0x78, 0xEA, 0xA7, 0xE1, 0x4B, 0xD1, 0x4F, 0x73, 0x44,
		0x83, 0xE3, 0x70, 0xE2, 0x4C, 0x1A, 0x8B, 0xA6, 0x52, 0xAF, 0x94, 0xF9, 0xB0, 0x32, 0x64,
		0x5E, 0xE7, 0x22, 0xDC, 0xD5, 0x28, 0x7C, 0x01, 0x5D, 0x96, 0xDA, 0x86, 0x50, 0xAD, 0x93,
		0x24, 0x9B, 0xBE, 0x19, 0x9A, 0x60, 0xAC, 0xCB, 0xC4, 0x6C, 0x56, 0x87, 0x41, 0xC0, 0x8F,
		0xB4, 0xBB, 0xBC, 0x58, 0x37, 0x6A, 0xC9, 0x88, 0x9C, 0x7D, 0x85, 0x11, 0xBD, 0x5B, 0x27,
		0xE0, 0x66, 0xA5, 0x76, 0x05, 0xE5, 0xED, 0xFD, 0x26, 0xF6, 0x34, 0xD3, 0x25, 0x38, 0xB8,
		0x06, 0x33, 0x48, 0x9F, 0x74, 0xD9, 0x89, 0xD4, 0xAA, 0x75, 0xA3, 0xA4, 0x35,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0D, 0x0B, 0x0D, 0x20, 0x09, 0x20, 0x20, 0x0A, 0x0B, 0x0D, 0x09, 0x0C, 0x09, 0x0D,
		0x0B, 0x0A, 0x09, 0x09, 0x0B, 0x20, 0x0D, 0x0D, 0x20, 0x0C, 0x0C, 0x0B, 0x20, 0x0C, 0x0C,
		0x0C, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x2E, 0x02, 0xA6, 0xE7, 0x0A,
		0x2D, 0x2D, 0x20, 0x0C, 0x0C, 0x09, 0x20, 0x0B, 0x2D, 0x0D, 0x0C, 0x0C, 0x2B, 0x0B, 0x0A,
		0x0D, 0x0A, 0x20, 0x0D, 0x0C, 0x0C, 0x09, 0x2D, 0x2D, 0x09, 0x2B, 0x0B, 0x2D, 0x0D, 0x09,
		0x0A, 0x20, 0x20, 0x0B, 0x0C, 0x0D, 0x20, 0x09, 0x0B, 0x2D, 0x20,
	];
	const BASE: &[u8] = &[
		0xC7, 0x30, 0x1B, 0x2A, 0x2C, 0xC1, 0xA5, 0x4C, 0x26, 0x16, 0xF5, 0x70, 0x61, 0x53, 0x27,
		0x72, 0xCF, 0x35, 0x48, 0xBF, 0x0E, 0xE2, 0x6F, 0x11, 0x4F, 0x85, 0x58, 0x01, 0xF7, 0x4B,
		0x6E, 0x56, 0xCB, 0x5F, 0xC0, 0xF6, 0x65, 0x32, 0xFC, 0x31, 0x40, 0x12, 0x77, 0xAC, 0xBD,
		0xBA, 0x42, 0x3F, 0x7A, 0x46, 0x52, 0x92, 0x4A, 0xEE, 0x1C, 0x17, 0x63, 0xA7, 0x82, 0xCE,
		0x1E, 0xD1, 0x34, 0x28, 0x4D, 0x8C, 0x50, 0x91, 0xA0, 0xAF, 0xE3, 0x9C, 0x64, 0x8A, 0xCD,
		0x5D, 0xFA, 0x83, 0x59, 0xCA, 0xEA, 0x13, 0x84, 0xBC, 0xFB, 0xCC, 0x78, 0x43, 0x1D, 0xB1,
		0x96, 0x75, 0x07, 0xD5, 0x24, 0xA4, 0x41, 0xE9, 0xE0, 0x87, 0x93, 0xFE, 0x3A, 0xA2, 0x94,
		0x03, 0x90, 0x6C, 0xBE, 0x1F, 0xEF, 0xD3, 0xA6, 0x54, 0x3E, 0x21, 0xC4, 0x55, 0xB4, 0xF0,
		0x06, 0x8E, 0x6B, 0xE8, 0x97, 0x02, 0x9F, 0xF9, 0x19, 0x60, 0x22, 0xC5, 0x1A, 0xDE, 0x0F,
		0x89, 0x9D, 0x73, 0x10, 0x39, 0xC6, 0x7D, 0x2E, 0x7F, 0x7C, 0xB5, 0x18, 0xF3, 0x04, 0x98,
		0x15, 0xC3, 0xD6, 0x62, 0x8D, 0x8B, 0xA8, 0x86, 0xDB, 0xFF, 0xF1, 0x5C, 0xDD, 0xDC, 0x47,
		0x66, 0xF8, 0x81, 0xBB, 0x5A, 0x49, 0x80, 0xD7, 0x45, 0xF4, 0x88, 0x37, 0xB6, 0x25, 0x6A,
		0x9E, 0xD8, 0xAE, 0x9A, 0xE1, 0xD9, 0x51, 0x3C, 0xC8, 0xB2, 0xFD, 0xDF, 0xE7, 0x76, 0x57,
		0x14, 0xA3, 0x67, 0x29, 0xA9, 0x3D, 0x3B, 0x05, 0xAA, 0xD4, 0x44, 0x95, 0xB7, 0x79, 0xE6,
		0xDA, 0x33, 0x7E, 0x8F, 0x6D, 0x99, 0xAD, 0x69, 0xC2, 0x71, 0xED, 0x5E, 0xE5, 0xD2, 0xF2,
		0xB8, 0x38, 0xEC, 0xA1, 0x7B, 0x74, 0x23, 0xB3, 0x36, 0xB9, 0xEB, 0x08, 0xD0, 0x4E, 0x2F,
		0xAB, 0x9B, 0xE4, 0xB0, 0xC9, 0x68, 0x5B,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
		0x81, 0x81, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
		0xE0, 0xE0, 0xE0, 0xD8, 0x95, 0x32, 0x07, 0x7B, 0x5A, 0xA9, 0x3E, 0x1E, 0x75, 0x60, 0x34,
		0x4C, 0xE1, 0xE1, 0x6A, 0x5A, 0x79, 0x06,
	];
	const BASE: &[u8] = &[
		0x81, 0xE0,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
		0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x17, 0x97, 0x17,
		0x17, 0x97, 0x17, 0x97, 0x97, 0x97, 0x17, 0x97, 0x17, 0x17, 0xCC, 0x97, 0xCC, 0x97, 0x17,
		0xCC, 0x17, 0xFF, 0x75, 0x08, 0x02, 0x1D, 0x75, 0x24, 0xEB, 0xEA, 0x9F, 0x77, 0xC9, 0xDF,
		0x0F, 0xAF, 0x2B, 0x28, 0xE3, 0xCD, 0x4D, 0x6E, 0x13, 0xC2, 0x99, 0x03, 0x75, 0x1A, 0xF4,
		0x2C, 0x6B, 0xDC, 0x7D, 0xA5, 0x6A, 0x62, 0xC7, 0xE9, 0x55,
	];
	const BASE: &[u8] = &[
		0xCC, 0x17, 0x97,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2D, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C,
		0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C,
		0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0xF1, 0xBF, 0xBF, 0x8A, 0x8A, 0x1D, 0x1D, 0xBF, 0x8A, 0xBF,
		0x8A, 0x6C, 0x8A, 0x1D, 0x6B, 0x4C, 0x4D, 0x50, 0xDB, 0xA6, 0x92, 0x10, 0x32, 0xF7, 0x30,
		0xAC, 0x8E, 0x85, 0x0B, 0x0B, 0xB6, 0x57, 0xFA, 0xC3, 0x56, 0xBC, 0xB1, 0xBC, 0x4E, 0xE2,
		0xD8, 0x73, 0x25, 0x64, 0xA2, 0x12, 0xC4, 0xD8, 0x43, 0xC6, 0x03, 0x4A, 0x93, 0xC3, 0x37,
		0x53,
	];
	const BASE: &[u8] = &[
		0x6C, 0xF1, 0x1D, 0xBF, 0x8A,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0xD4,
		0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xD4, 0xC4, 0xD4, 0xF9, 0xC4, 0x72, 0xF9, 0x51,
		0xC4, 0xC4, 0xC4, 0x07, 0xC4, 0x35, 0xBA, 0x6B, 0x7E, 0xDC, 0x27, 0xA9, 0x33, 0x44, 0x02,
		0xA4, 0xF0, 0x88, 0x16, 0xD6, 0x4F, 0x30, 0x6B, 0xD6, 0x23, 0x39, 0x95, 0xA4, 0x08, 0x87,
		0xDF, 0x55, 0xC9, 0x29, 0x5B,
	];
	const BASE: &[u8] = &[
		0xD4, 0xC4, 0x51, 0x72, 0xF9, 0x13, 0x07,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
		0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0xF4, 0x89, 0x27,
		0x27, 0x27, 0x89, 0x27, 0xF9, 0x22, 0x98, 0x87, 0x72, 0xDF, 0x01, 0x5C, 0xEB, 0x1E, 0xE5,
		0x07, 0xAD, 0x44, 0x28, 0xDE, 0x8D, 0xFE, 0x70, 0xB1, 0x45, 0x05, 0xE6, 0x90, 0xE4, 0xCB,
		0x16, 0x85, 0x04, 0x41, 0xAA, 0xB6, 0x98,
	];
	const BASE: &[u8] = &[
		0x89, 0x22, 0x27, 0xFC, 0xEC, 0xD5, 0x9B, 0xCE, 0xF9, 0xD0, 0xF4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0x8F, 0xCA, 0x8F, 0x2F, 0x9B, 0x5B, 0x9B, 0x9B, 0x9B,
		0x1E, 0xED, 0x03, 0xC1, 0x5E, 0x1C, 0x74, 0xAE, 0xE3, 0x45, 0x38, 0x72, 0xBD, 0x4E, 0x33,
		0xC7, 0x12, 0xCB, 0x9E, 0x5E, 0x2E,
	];
	const BASE: &[u8] = &[
		0xFD, 0xF8, 0x8F, 0xE2, 0x5B, 0x7D, 0xA2, 0x37, 0xCA, 0xF5, 0x9B, 0x2F, 0x25,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2D, 0x2D, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6,
		0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0xB6, 0x54, 0x7B, 0xE9,
		0x77, 0x7B, 0x87, 0xFB, 0x54, 0xD9, 0x9D, 0xDC, 0x43, 0x55,
	];
	const BASE: &[u8] = &[
		0xB6, 0x17, 0x54, 0xFB, 0x15, 0x77, 0xBF, 0x7B, 0xF0, 0xC7, 0x01, 0x70, 0xE9, 0x5F, 0xAA,
		0x3A, 0x42, 0x87, 0x8F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0xB9,
		0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0xB9, 0x7C, 0x53, 0x94, 0x87, 0x89, 0x69,
		0xCC, 0x15, 0x0B, 0x97, 0x1E, 0xD6, 0x8F, 0xC2, 0x62, 0x91, 0x88, 0xE4, 0xB5, 0x4C, 0x97,
		0x0F, 0xBA, 0x20, 0xC2, 0xB1, 0x18, 0x04, 0xF7, 0xA5, 0x48, 0x0A, 0xD8, 0x0B, 0x78, 0x33,
		0xEF, 0xCB, 0xCE, 0xD3, 0xB7, 0x98, 0xE9, 0xCC, 0x7A, 0xF1,
	];
	const BASE: &[u8] = &[
		0xB9, 0x69, 0xEC, 0x5C, 0x36, 0x94, 0x45, 0x07, 0xA2, 0x7D, 0x4D, 0x96, 0xF9, 0x4A, 0xEE,
		0x89, 0x7C, 0xD1, 0x53, 0xE7, 0x7B, 0x29, 0x55, 0x2E, 0x87, 0x3A, 0x51, 0xBC, 0x2F, 0xEA,
		0xE1, 0x86, 0xDE, 0xC5, 0x80, 0xB0, 0x23, 0x27, 0x1F, 0x25, 0x05, 0x50,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0x6C, 0x02, 0xE3, 0x47, 0xFE, 0x61, 0x90, 0x63, 0xE5, 0x42, 0xA6, 0x50, 0xC6,
		0xE1, 0x67, 0xA6, 0x28, 0x7B, 0xE4, 0x79, 0x98, 0xC8, 0xF8, 0x59, 0x7A, 0x08, 0xE0, 0x79,
		0x66, 0xCF, 0xC0, 0x54, 0x03, 0xCC, 0x58, 0xE1, 0x05, 0x72, 0xDD, 0x6E,
	];
	const BASE: &[u8] = &[
		0xDC, 0x6C, 0x02, 0x24, 0x97, 0xD1, 0x34, 0x3C, 0x8F, 0xAE, 0x76, 0xAD, 0xC5, 0xCD, 0x8E,
		0x61, 0xB7, 0x4A, 0x26, 0x11, 0x47, 0x91, 0xBB, 0xB2, 0xD2, 0xFF, 0xAB, 0x87, 0xAA, 0x74,
		0x1B, 0xF4, 0xD3, 0xB8, 0x65, 0xFC, 0x80, 0xAF, 0x56, 0x86, 0x62, 0x5B, 0xD0, 0x4F, 0xFE,
		0xE3, 0xFD, 0x77, 0x7D, 0xD6, 0x0E, 0xA8, 0xBA, 0xF7, 0xED, 0x5E, 0x1C, 0x88, 0x2C, 0x1F,
		0xB3, 0xFB, 0xA1, 0x46, 0xC7, 0x2E, 0x7E, 0x94, 0x92, 0xBD, 0xC3, 0xD7, 0x10,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
		0xDC, 0xDC, 0x75, 0x9A, 0x24, 0xD5, 0xC7, 0x41, 0xBC, 0x5E, 0x0C, 0x19, 0x20, 0x06, 0x12,
		0x0D, 0x07, 0x1E, 0xE0, 0x93, 0x14, 0x09, 0x31,
	];
	const BASE: &[u8] = &[
		0xDC, 0x5C, 0x16, 0x8A, 0xC2, 0x5F, 0x9D, 0xC7, 0xA4, 0x77, 0x3A, 0xDE, 0x5B, 0x75, 0x98,
		0x56, 0xEF, 0x04, 0x80, 0x9A, 0xD3, 0xA8, 0xBF, 0xE4, 0x6A, 0x79, 0x9F, 0xB0, 0x54, 0x39,
		0x53, 0xDF, 0x18, 0x49, 0x95, 0x24, 0xC8, 0xA0, 0xC0, 0xBB, 0x23, 0xE8, 0x9C, 0x0F, 0x2F,
		0x40, 0x2A, 0x64, 0xF6, 0xFF, 0xD1, 0x3C, 0x43, 0xD5, 0xAC, 0x87, 0x62, 0xE7, 0x10, 0x6E,
		0x4F, 0xAB, 0xDD, 0x89, 0x85, 0x01, 0x66, 0x65, 0x17, 0xBD, 0x2E, 0xF7, 0x13, 0xFD, 0xDB,
		0x1D, 0xD6, 0x81, 0x02, 0xEA, 0xF4, 0xC3, 0xA3, 0x57, 0x30, 0x69, 0xEB, 0x6F, 0xE3, 0x96,
		0xB4, 0x1C, 0xC1, 0xAD, 0x68, 0x0E, 0xED, 0xC4, 0x3D, 0x55, 0x73, 0x26, 0x58, 0xF8, 0xAA,
		0x29, 0x15, 0x7E, 0x22, 0xB3, 0xB5, 0x70, 0x3F,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2B, 0x2B, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
		0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0xC2, 0xF1, 0xD1,
		0x80, 0xCD, 0x6D, 0xDE, 0x5D, 0x2C, 0x77, 0xD6, 0x0A, 0x15, 0xD9, 0xEB, 0x5C, 0x1D, 0xCA,
		0x04, 0x0A, 0x4E, 0x9E, 0x4F, 0x17, 0xCA, 0x96, 0x76, 0x9E, 0xD6, 0xD2, 0x1D, 0x5C, 0x9E,
		0xDD, 0xE8, 0x9F, 0x40, 0x4F, 0x4E, 0xDE, 0x0C, 0xC9, 0x12, 0xFA, 0x91,
	];
	const BASE: &[u8] = &[
		0x44, 0xC2, 0x6E, 0xC8, 0xA5, 0xD7, 0x51, 0x67, 0x6B, 0xB7, 0x57, 0x8A, 0x41, 0xC4, 0x9A,
		0x5A, 0xA6, 0x87, 0x7E, 0x8F, 0xCC, 0x06, 0x80, 0xAF, 0xD3, 0x95, 0x3D, 0xA7, 0xEC, 0x89,
		0x74, 0x90, 0x52, 0xA3, 0xF6, 0xBA, 0xEE, 0x72, 0x6F, 0x2A, 0xAD, 0x28, 0x97, 0xF3, 0x1E,
		0x63, 0x5E, 0xD0, 0x5F, 0x94, 0x18, 0x62, 0x82, 0xCD, 0xA1, 0xBC, 0xEA, 0x2F, 0xB3, 0xB1,
		0x02, 0xFB, 0xDA, 0x70, 0xE6, 0x30, 0x1F, 0x01, 0xFF, 0x34, 0xBD, 0x56, 0x71, 0x85, 0x8D,
		0x8B, 0x1C, 0x4B, 0xE9, 0x36, 0xC6, 0x86, 0x42, 0x03, 0xE5, 0xB6, 0xD5, 0x0E, 0x9B, 0x4D,
		0x08, 0x35, 0xF9, 0x10, 0xDB, 0x19, 0xE3, 0xCE, 0x50, 0x39, 0x8E, 0x22, 0xED, 0x8C, 0x3E,
		0xF1, 0x46, 0x5B, 0x49, 0x37, 0xDC, 0xAE, 0xC1, 0x88, 0xFD, 0x99, 0x25, 0xA4, 0x58, 0xA8,
		0x31, 0xA2, 0x0F, 0x3B, 0x81, 0x9C, 0x11, 0x23, 0xF0, 0x73, 0x75, 0xFC, 0x47, 0x1B, 0xB2,
		0xFE, 0x84, 0x7A, 0xD1, 0xE0, 0xB0, 0x79, 0x65, 0xF8, 0x7B, 0x13, 0x9D, 0xBE, 0x83, 0xE7,
		0x69, 0x45, 0xD4, 0xEF, 0xF5, 0x29, 0xB5, 0x3A, 0x3C, 0x48, 0x43, 0xDF, 0xBB, 0x4A, 0xC5,
		0x53, 0x2E, 0xF7, 0x27, 0x93, 0x64, 0x59, 0x6A, 0x14, 0xE1, 0x66, 0x54, 0x1A, 0x05, 0x07,
		0x7F, 0xC0, 0xCF, 0x21, 0xAC, 0x16, 0x6C, 0x68, 0x61, 0x92, 0x26, 0xB9, 0xB8,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_signs_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_signs_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x63, 0xFE, 0xB0, 0xE4,
		0x0A, 0x0C, 0x09, 0x2D, 0x09, 0x0B, 0x0B, 0x2D, 0x2D, 0x2D, 0x2D, 0x0D, 0x2D, 0x2B, 0x09,
		0x2B, 0x0C, 0x2D, 0x0A, 0x0D, 0x0D, 0x09, 0x09, 0x20, 0x0C, 0x0D, 0x2D, 0x0A, 0x0B, 0x2B,
		0x09, 0x20, 0x0C, 0x09, 0x0B, 0x09, 0x0A, 0x0D, 0x2D, 0x0B,
	];
	const BASE: &[u8] = &[
		0x42, 0x58, 0x47, 0x1E, 0xFF, 0x6A, 0xC5, 0xC8, 0xB3, 0xFB, 0x6F, 0x24, 0x4D, 0x3D, 0xA1,
		0x8D, 0x14, 0xA0, 0xCE, 0xD4, 0xD8, 0x50, 0xE6, 0x2C, 0x35, 0x5E, 0x98, 0xD3, 0xAD, 0xC9,
		0x02, 0xAF, 0x61, 0xEC, 0x55, 0x83, 0x86, 0xDB, 0x18, 0xC6, 0xF4, 0x8C, 0x52, 0xC7, 0x30,
		0xC3, 0x76, 0x21, 0x0E, 0x91, 0xB1, 0xD0, 0x31, 0xCA, 0xBC, 0x5F, 0xC0, 0x85, 0xCF, 0x37,
		0xA9, 0x66, 0x13, 0x77, 0xF1, 0xE1, 0x7A, 0xAC, 0xE3, 0x12, 0x82, 0xA6, 0x4F, 0xE7, 0x4A,
		0xFC, 0x5A, 0x49, 0x67, 0x8F, 0x17, 0x68, 0x15, 0xBD, 0x87, 0x7E, 0x7D, 0xF9, 0xBA, 0x7C,
		0xF6, 0xB2, 0x29, 0x03, 0x05, 0x93, 0xB4, 0xDA, 0x16, 0x6D, 0xA8, 0x84, 0xD1, 0xB6, 0x57,
		0xDE, 0xFA, 0x7F, 0x79, 0x7B, 0x07, 0x8A, 0xB0, 0x9B, 0x54, 0x3F, 0x70, 0x38, 0xF2, 0x81,
		0xF3, 0x9D, 0x9F, 0xB8, 0xE0, 0xFE, 0x94, 0x96, 0x40, 0x3B, 0x43, 0x2A, 0x95, 0xA3, 0x3E,
		0x45, 0x53, 0x3C, 0x3A, 0x25, 0xD7, 0x4E, 0x63, 0xD5, 0x5D, 0xF5, 0x1C, 0x11, 0x51, 0xF8,
		0x60, 0xBB, 0x6C, 0x32, 0x1A, 0x90, 0x0F, 0x1B, 0xA7, 0x39, 0x92, 0x97, 0x1D, 0x08, 0x10,
		0xC1, 0xDF, 0xD6, 0x89, 0x69, 0xA2, 0x33, 0xCC, 0x2F, 0xE8, 0xDD, 0xC4, 0xB7, 0x41, 0xE2,
		0x6B, 0x71, 0x19, 0xED, 0xF0, 0x04, 0x59, 0xDC, 0x8E, 0x88, 0x28, 0xEF, 0xE4, 0xEE, 0x6E,
		0x1F, 0x9A, 0x5B, 0x2E, 0xE9, 0x65, 0xC2, 0xCB, 0x46, 0xEB, 0xAE, 0x36, 0xF7, 0xCD, 0x48,
		0x23, 0xE5, 0x56, 0x9C, 0x4B, 0x64, 0xA5, 0x73, 0x9E, 0xA4, 0x06, 0xFD, 0xD2, 0xAA, 0xBF,
		0x78, 0xAB, 0x8B, 0x22, 0x4C, 0x80, 0x27, 0x72, 0x34, 0x44, 0xBE, 0x26, 0xEA, 0x01, 0x62,
		0x99, 0x75, 0xB9, 0x74, 0xD9, 0xB5, 0x5C,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_2_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x09, 0x0D, 0x0B, 0x09, 0x0C, 0x0A, 0x20, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
		0x9E, 0x9E, 0x9E, 0x9E, 0x9E, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
		0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
		0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x3E, 0x6E, 0x4C, 0x46, 0x2C, 0xDE, 0x70, 0xD8, 0x49,
		0xDC, 0xA3, 0x37, 0x48, 0xBA, 0x81, 0x58, 0xD6, 0x27,
	];
	const BASE: &[u8] = &[
		0x9E, 0x43,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_3_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0A, 0x09, 0x0B, 0x0D, 0x0A, 0x0A, 0x0B, 0x0C, 0x0D, 0x0D, 0x0C, 0x09, 0x20, 0x0B,
		0x20, 0x0D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D,
		0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0xDB, 0x9F, 0x23, 0x9F, 0x9F, 0x23,
		0x9F, 0x23, 0x23, 0x23, 0x9F, 0x23, 0x9F, 0x9F, 0xDB, 0x23, 0xDB, 0x23, 0x9F, 0xDB, 0x9F,
		0xB9,
	];
	const BASE: &[u8] = &[
		0xDB, 0x9F, 0x23,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_5_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0D, 0x0A, 0x0A, 0x0D, 0x0C, 0x09, 0x20, 0x0D, 0x0D, 0x0B, 0x20, 0x0A, 0x0C, 0x0A, 0x0A,
		0x0A, 0x0D, 0x0A, 0x20, 0x09, 0x20, 0x0B, 0x0A, 0x0C, 0x09, 0x20, 0x20, 0x0C, 0x0D, 0x0D,
		0x0B, 0x20, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B,
		0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x56, 0x56, 0x56, 0x24, 0xA7, 0xA7,
		0xC5, 0xC5, 0xA1, 0xA1, 0xA7, 0xC5, 0xA7, 0xC5, 0x56, 0xC5, 0xA1, 0x29, 0x99, 0x23, 0x1B,
		0xDF, 0xF4, 0x30, 0x35, 0xAD, 0x0D, 0xB1, 0xBE, 0x1D, 0x9E, 0xE0, 0x46, 0x90, 0x16, 0x86,
		0x1D, 0xDA, 0x0F, 0x21, 0x8B, 0xBB, 0x06, 0x3A, 0x46, 0xB9, 0x4B, 0x78, 0xB4, 0x15, 0xBE,
		0x8C, 0x73, 0x81, 0xDC,
	];
	const BASE: &[u8] = &[
		0x56, 0x24, 0xA1, 0xA7, 0xC5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_7_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0A, 0x09, 0x0A, 0x0C, 0x0C, 0x20, 0x0B, 0x0B, 0x09, 0x0B, 0x0B, 0x0C, 0x0D, 0x0B,
		0x09, 0x0D, 0x0C, 0x20, 0x20, 0x0B, 0x0B, 0x09, 0x0B, 0x20, 0x0A, 0x0B, 0x0A, 0x0D, 0x0C,
		0x0B, 0x0B, 0x09, 0x2D, 0x2D, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x2E, 0x80, 0x5B,
		0x2E, 0xE6, 0x5B, 0x2C, 0x2E, 0x2E, 0x2E, 0x03, 0x2E, 0x55, 0xA7, 0x7B, 0xCA, 0xBB, 0x7D,
		0x8E, 0x5F, 0x30, 0xB1, 0x9E,
	];
	const BASE: &[u8] = &[
		0x80, 0x2E, 0x2C, 0xE6, 0x5B, 0xD4, 0x03,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_11_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x2B, 0x2B, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53,
		0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x11, 0x53, 0xB5, 0xB5, 0xB5,
		0x53, 0xB5, 0x9A, 0xCF, 0x17, 0x60, 0xA0, 0xF9, 0xF1, 0x88, 0xC5, 0x7B, 0xDE, 0x15, 0x95,
		0x5F, 0xB2, 0xE8, 0x62, 0xA9, 0x47,
	];
	const BASE: &[u8] = &[
		0x53, 0xCF, 0xB5, 0x12, 0x29, 0xD8, 0xEE, 0x48, 0x9A, 0x9E, 0x11,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_13_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0B, 0x0B, 0x0A, 0x0C, 0x0D, 0x09, 0x0C, 0x20, 0x0D, 0x09, 0x0B, 0x0D, 0x0C, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x9B, 0xDB, 0x9B, 0xCE, 0x5C, 0x23, 0x5C,
		0x5C, 0x5C, 0x8A, 0xEF, 0x87, 0x28, 0xC1, 0x82, 0xD7, 0xAF, 0xCC, 0xDA, 0x39, 0xE5, 0x2B,
		0xB1, 0xBA, 0xE0, 0xEF, 0xC5, 0xC4, 0x0F,
	];
	const BASE: &[u8] = &[
		0xAA, 0x12, 0x9B, 0x6C, 0x23, 0x95, 0x9C, 0x9D, 0xDB, 0x76, 0x5C, 0xCE, 0x35,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_19_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x20, 0x20, 0x0C, 0x0B, 0x0A, 0x0A, 0x20, 0x09, 0x0B, 0x20, 0x09, 0x0B, 0x0B, 0x0D, 0x0A,
		0x0D, 0x09, 0x0A, 0x0A, 0x09, 0x20, 0x0A, 0x0A, 0x0A, 0x20, 0x0D, 0x0C, 0x09, 0x0C, 0x0A,
		0x0B, 0x0C, 0x0A, 0x0A, 0x0D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x75, 0x75, 0x75,
		0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0xD0, 0x63, 0x30, 0x9F, 0x63, 0xF8,
		0x68, 0xD0, 0xF4, 0x5D, 0x3E, 0xEB, 0x47, 0xEF, 0x4B, 0xA9, 0xC3, 0x24, 0x1E,
	];
	const BASE: &[u8] = &[
		0x75, 0x11, 0xD0, 0x68, 0xAF, 0x9F, 0xF5, 0x63, 0xF7, 0xA3, 0xD1, 0x53, 0x30, 0xE6, 0x76,
		0x3D, 0x36, 0xF8, 0xF3,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_42_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0B, 0x0B, 0x0B, 0x0D, 0x0B, 0x09, 0x20, 0x20, 0x09, 0x0B, 0x0A, 0x0C, 0x0A, 0x0C, 0x09,
		0x0A, 0x0C, 0x09, 0x0B, 0x20, 0x20, 0x2B, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F,
		0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x61, 0x6D, 0xD0, 0x5A, 0xB3, 0x53,
		0xA6, 0x59,
	];
	const BASE: &[u8] = &[
		0x9F, 0x53, 0xF6, 0x11, 0xAA, 0xD0, 0x44, 0xD8, 0x07, 0x75, 0x37, 0x81, 0x9E, 0x32, 0x1C,
		0xB3, 0x61, 0x89, 0x6D, 0x2C, 0x21, 0x8A, 0x88, 0xA1, 0x5A, 0x35, 0xBD, 0xD5, 0x1F, 0x49,
		0x36, 0x12, 0x73, 0x64, 0x7D, 0x8B, 0xD9, 0xBA, 0x56, 0x46, 0x79, 0x50,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_73_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x20, 0x0B, 0x0B, 0x0A, 0x0D, 0x09, 0x0D, 0x0A, 0x0D, 0x20, 0x0D, 0x2B, 0x2B, 0x2B,
		0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D,
		0x2D, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3,
		0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3,
		0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0xB3, 0x7D, 0x30, 0x3F,
		0xBB, 0x8F, 0x91, 0xD6, 0x57, 0xC7, 0x6F, 0xDC, 0x79, 0x88, 0x15, 0x7F, 0x69, 0x1C, 0xEC,
		0x9F, 0x92, 0xC2, 0xD6, 0xE7, 0xF7, 0x56, 0x0A, 0xD9, 0x38, 0xBE,
	];
	const BASE: &[u8] = &[
		0xB3, 0x7D, 0x30, 0x89, 0xDD, 0xD5, 0xDA, 0xA3, 0xEA, 0x44, 0x5C, 0xA8, 0x5A, 0xEB, 0x32,
		0x91, 0x43, 0x1B, 0x47, 0xFA, 0xBB, 0x62, 0x83, 0x6E, 0x40, 0xF1, 0x87, 0x07, 0x80, 0x26,
		0x02, 0x90, 0xC8, 0x85, 0xB5, 0xF2, 0xF5, 0x39, 0xC4, 0xF8, 0xC1, 0xBF, 0x6C, 0x67, 0x8F,
		0x3F, 0x06, 0x37, 0xE0, 0x53, 0xFB, 0xFF, 0x29, 0xEF, 0xF3, 0xDE, 0xC3, 0x8A, 0x81, 0xAD,
		0x93, 0x59, 0xFC, 0x23, 0x2A, 0x64, 0xCC, 0xEE, 0x4D, 0xCF, 0x1E, 0x54, 0xE5,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_113_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0B, 0x09, 0x0C, 0x0C, 0x09, 0x20, 0x20, 0x20, 0x09, 0x0C, 0x0D, 0x0C, 0x09, 0x0D,
		0x0B, 0x0D, 0x0C, 0x0C, 0x20, 0x0A, 0x0A, 0x0C, 0x0C, 0x0D, 0x0B, 0x0D, 0x0B, 0x09, 0x20,
		0x0A, 0x0C, 0x09, 0x0D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2B, 0x2D, 0x2B, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF,
		0x89, 0xE7, 0x8F, 0xE6, 0xC2, 0xE8, 0xE2, 0x71, 0xF1, 0xD5, 0x3D, 0x4A, 0x3A, 0x52, 0xAD,
		0x9A, 0x01, 0x4F, 0xFE, 0x1E, 0xD4, 0x20, 0xC6, 0xA8, 0x0B, 0x67, 0x80, 0x5A, 0xA4, 0x1C,
		0xC6, 0xC6, 0xA3, 0x65, 0x4A, 0x68, 0xA1, 0x35,
	];
	const BASE: &[u8] = &[
		0xDF, 0x5D, 0xCE, 0x4E, 0xB3, 0xB4, 0xFB, 0xC2, 0x51, 0x75, 0x4C, 0x4B, 0x66, 0x89, 0xF7,
		0xA5, 0xB9, 0xD1, 0x25, 0xE7, 0x07, 0x0F, 0x9F, 0xB0, 0x3E, 0xBD, 0x5E, 0x13, 0xC7, 0x4D,
		0x16, 0xEE, 0xA7, 0x90, 0x3F, 0x8F, 0xB8, 0x76, 0x98, 0x74, 0xAF, 0xFD, 0x05, 0x31, 0xD2,
		0x40, 0x88, 0x63, 0xF5, 0xDB, 0xBF, 0xFC, 0xCD, 0xE6, 0x15, 0x23, 0x79, 0x41, 0x7C, 0x39,
		0xCA, 0x64, 0xB1, 0x2F, 0xBC, 0x49, 0xDC, 0x55, 0x84, 0xE0, 0x7D, 0xEA, 0xD6, 0x8B, 0xD7,
		0xA6, 0x9B, 0xE1, 0x1F, 0xB6, 0xEB, 0x78, 0x1A, 0x85, 0x21, 0xEC, 0x11, 0x2E, 0x5C, 0x24,
		0x30, 0xAE, 0xC4, 0x08, 0x50, 0xA0, 0x38, 0xF6, 0x43, 0xAA, 0x58, 0x9C, 0x99, 0x3C, 0x8A,
		0x6C, 0x0E, 0xF8, 0x5B, 0x53, 0x9E, 0x77, 0xBE,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_193_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0A, 0x0A, 0x0C, 0x0D, 0x0D, 0x0B, 0x0A, 0x20, 0x0C, 0x0D, 0x09, 0x0B, 0x20, 0x0A, 0x0A,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2B,
		0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xEE, 0xAC, 0xDE, 0x06, 0x81, 0x88, 0x6E, 0x44,
	];
	const BASE: &[u8] = &[
		0xF0, 0xEE, 0x5C, 0xA4, 0x7C, 0x28, 0x40, 0xF1, 0xD2, 0xBF, 0xC1, 0x4C, 0x52, 0x05, 0x13,
		0xEF, 0x30, 0xC8, 0xF5, 0xB3, 0xB7, 0xEA, 0x06, 0x24, 0xFB, 0x3F, 0x38, 0x29, 0xCE, 0xFA,
		0x36, 0x8E, 0x73, 0x33, 0x97, 0x3A, 0x5B, 0xA7, 0x76, 0xD9, 0xC9, 0x6B, 0x7F, 0x8B, 0x83,
		0xF3, 0x3B, 0x56, 0x50, 0x69, 0x86, 0x54, 0x26, 0x81, 0x51, 0xC7, 0xBD, 0xAE, 0x87, 0x58,
		0x9B, 0xA0, 0x9F, 0x1C, 0x5E, 0x4D, 0x08, 0xDA, 0xE7, 0x48, 0x2A, 0x35, 0xA6, 0xD4, 0xE4,
		0xD0, 0x78, 0x14, 0xE8, 0x6C, 0x95, 0x07, 0x31, 0x3E, 0x66, 0xE9, 0x22, 0x21, 0x5A, 0xAA,
		0xA8, 0xBB, 0x27, 0x59, 0x9D, 0x39, 0xE3, 0x63, 0x4E, 0x77, 0x6D, 0x64, 0x42, 0xB1, 0x1F,
		0xAC, 0xFD, 0x2F, 0xF7, 0xA2, 0x23, 0x98, 0xC0, 0xB0, 0xBE, 0x02, 0x34, 0xB6, 0x16, 0xDB,
		0xC3, 0x5F, 0x99, 0x7D, 0xED, 0xAD, 0x25, 0xAF, 0x57, 0x11, 0x89, 0x90, 0x82, 0x7B, 0x84,
		0xFE, 0xCA, 0x7A, 0xDE, 0x79, 0x01, 0xD3, 0xF2, 0xB8, 0xC5, 0xCC, 0xA3, 0x80, 0xDF, 0x19,
		0xB5, 0xE0, 0xCB, 0x60, 0x6A, 0x2C, 0x8A, 0xF9, 0x8D, 0x67, 0x3D, 0xE6, 0xDD, 0x4B, 0xA5,
		0x68, 0x2E, 0x12, 0xD8, 0x53, 0xB9, 0x7E, 0x4F, 0x61, 0x47, 0x41, 0xB4, 0xCD, 0xCF, 0x9A,
		0xE5, 0xEC, 0xC4, 0xF8, 0x96, 0xF4, 0xD6, 0xFF, 0x74, 0x85, 0x1B, 0x70, 0xE1,
	];

	helper(S, BASE, 2147483647);
}
// endregion
// region: s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes
#[test]
fn s_has_whitespaces_and_signs_and_zeros_and_2147483647_in_base_247_and_insignificant_bytes() {
	const S: &[u8] = &[
		0x0C, 0x0B, 0x0C, 0x0C, 0x09, 0x0B, 0x0B, 0x0A, 0x0B, 0x0A, 0x0B, 0x09, 0x09, 0x09, 0x20,
		0x0C, 0x0B, 0x0D, 0x20, 0x09, 0x0A, 0x20, 0x0D, 0x20, 0x0C, 0x20, 0x09, 0x0A, 0x0D, 0x20,
		0x09, 0x09, 0x2D, 0x2B, 0x2D, 0x2D, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2B, 0x2D, 0x2B, 0x2D, 0x2D, 0x2D, 0x2D,
		0x2D, 0x2B, 0x2B, 0x2D, 0x2D, 0x2D, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
		0x5C, 0x5C, 0x5C, 0xF5, 0xA0, 0x9B, 0x0E, 0x20, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x0D, 0x0D,
		0x0B, 0x20, 0x20, 0x0C, 0x2D, 0x0D, 0x2B, 0x0B, 0x20, 0x0A, 0x2D, 0x0A, 0x0D, 0x0D, 0x0D,
		0x0A, 0x09, 0x0C, 0x0B, 0x0D, 0x2B, 0x0B, 0x20, 0x2D, 0x2D, 0x20, 0x09, 0x09, 0x2B, 0x20,
	];
	const BASE: &[u8] = &[
		0x5C, 0x05, 0x51, 0x5A, 0x03, 0x93, 0x12, 0x01, 0xEB, 0x53, 0x41, 0x85, 0x61, 0xD5, 0x92,
		0xE2, 0x71, 0x65, 0x58, 0x1B, 0x80, 0x08, 0xBB, 0xB2, 0x42, 0x3A, 0xEF, 0xAB, 0x98, 0x63,
		0x7B, 0xC3, 0xDB, 0xCC, 0xB5, 0xA5, 0x10, 0x91, 0x3D, 0x6E, 0x5F, 0x37, 0x04, 0xEC, 0x62,
		0xBE, 0x9D, 0x76, 0x2F, 0x52, 0x02, 0xF7, 0x43, 0x1D, 0xF2, 0x11, 0x87, 0x29, 0x77, 0xA8,
		0x3F, 0x6C, 0x97, 0xE3, 0x79, 0xFD, 0x17, 0xDE, 0xD4, 0xB4, 0xE8, 0x4C, 0xF6, 0x35, 0x21,
		0x95, 0xCA, 0xF0, 0xA7, 0xDC, 0xF3, 0x4E, 0x64, 0xF1, 0x36, 0x66, 0xAD, 0x88, 0x83, 0x4A,
		0x07, 0xD6, 0xD9, 0x15, 0x44, 0xD0, 0x26, 0x30, 0xD3, 0x74, 0x5E, 0xE7, 0x22, 0xA2, 0x1F,
		0x54, 0xC8, 0x45, 0xE1, 0x14, 0x1C, 0x9A, 0x9B, 0xF8, 0x70, 0x18, 0xC0, 0xC2, 0x8A, 0x6D,
		0x16, 0x13, 0x27, 0xCF, 0x50, 0xA0, 0x6A, 0x8B, 0x1E, 0xF9, 0xFF, 0xCD, 0x9E, 0x7D, 0x8C,
		0x57, 0x8D, 0x1A, 0x39, 0x96, 0x2A, 0xC6, 0xF5, 0x49, 0x24, 0xA3, 0x72, 0x34, 0xFC, 0xC1,
		0x47, 0x5D, 0xFA, 0x7C, 0xE6, 0xB0, 0xA6, 0xFB, 0x4D, 0xA1, 0x46, 0x90, 0x33, 0x4F, 0x82,
		0xAE, 0xE5, 0x94, 0xD7, 0x19, 0xC5, 0x25, 0x75, 0x6F, 0x67, 0xAA, 0x81, 0x40, 0xD8, 0xA4,
		0x8E, 0x06, 0xBF, 0x84, 0x0F, 0xBA, 0x5B, 0x56, 0xDA, 0x89, 0x60, 0xB7, 0x0E, 0xCB, 0xB1,
		0xB8, 0x3C, 0x68, 0xDF, 0xAC, 0x23, 0x3B, 0x7E, 0xC4, 0xBD, 0x73, 0x8F, 0xEA, 0x55, 0x86,
		0xDD, 0x78, 0x2C, 0x99, 0x6B, 0xEE, 0x9C, 0x32, 0xED, 0xA9, 0xF4, 0x3E, 0x48, 0x69, 0x38,
		0x7F, 0xCE, 0xFE, 0x59, 0x2E, 0x9F, 0xC9, 0x4B, 0xB6, 0xE0, 0x28, 0xBC, 0x7A, 0xD1, 0xB9,
		0xB3, 0xE9, 0x31, 0xAF, 0xD2, 0xC7, 0xE4,
	];

	helper(S, BASE, 2147483647);
}
// endregion
