#[cfg(test)]
mod tests {
	use std::ffi::c_void;

	#[link(name = "asm")]
	extern "C" {
		fn ft_memcpy(dst: *mut c_void, src: *const c_void, n: usize) -> *mut c_void;
	}

	#[inline(always)]
	fn helper(dst: &mut [u8], src: &[u8], n: usize) {
		assert!(n <= dst.len(), "copy would overflow dst");
		assert!(n <= src.len(), "copy would overflow src");

		let initial_last_bytes_of_dst: Vec<u8> = dst[n..].to_vec();

		println!("dst.as_mut_ptr(): {:p}", dst.as_mut_ptr());
		println!("    src.as_ptr(): {:p}", src.as_ptr());
		assert_eq!(
			unsafe { ft_memcpy(dst.as_mut_ptr() as *mut c_void, src.as_ptr() as *const c_void, n) },
			dst.as_mut_ptr() as *mut c_void
		);
		assert_eq!(dst[..n], src[..n]);
		assert_eq!(dst[n..], initial_last_bytes_of_dst);
	}

	// region: ft_memcpy_00
	#[test]
	fn ft_memcpy_00() {
		const SRC: [u8; 0] = [];

		helper(&mut [], &SRC, 0);
	}
	// endregion

	// region: ft_memcpy_01
	#[test]
	fn ft_memcpy_01() {
		const SRC: [u8; 2] = [0xDD, 0x93];

		helper(&mut [0x08, 0x86], &SRC, 1);
	}
	// endregion

	// region: ft_memcpy_02
	#[test]
	fn ft_memcpy_02() {
		const SRC: [u8; 3] = [0x1C, 0x2A, 0xD3];

		helper(&mut [0x31, 0xBE, 0x7C], &SRC, 2);
	}
	// endregion

	// region: ft_memcpy_03
	#[test]
	fn ft_memcpy_03() {
		const SRC: [u8; 4] = [0x93, 0x86, 0xE7, 0xBC];

		helper(&mut [0xA1, 0x7E, 0x53, 0x19], &SRC, 3);
	}
	// endregion

	// region: ft_memcpy_04
	#[test]
	fn ft_memcpy_04() {
		const SRC: [u8; 5] = [0x57, 0x14, 0xEC, 0x3B, 0x08];

		helper(&mut [0x62, 0x2B, 0x69, 0xBE, 0x44], &SRC, 4);
	}
	// endregion

	// region: ft_memcpy_05
	#[test]
	fn ft_memcpy_05() {
		const SRC: [u8; 6] = [0x27, 0x65, 0x2E, 0xB5, 0x40, 0x1F];

		helper(&mut [0x85, 0x48, 0x98, 0xF5, 0x59, 0xE4], &SRC, 5);
	}
	// endregion

	// region: ft_memcpy_06
	#[test]
	fn ft_memcpy_06() {
		const SRC: [u8; 7] = [0x76, 0xA6, 0xEA, 0x3E, 0x0F, 0x56, 0x73];

		helper(&mut [0xF9, 0x94, 0xA2, 0xAD, 0xE5, 0x4B, 0xA8], &SRC, 6);
	}
	// endregion

	// region: ft_memcpy_07
	#[test]
	fn ft_memcpy_07() {
		const SRC: [u8; 8] = [0x9E, 0x96, 0xA6, 0xCD, 0xA9, 0x5F, 0x17, 0xE2];

		helper(&mut [0x23, 0xE2, 0x3E, 0xEE, 0x71, 0xAE, 0xA7, 0xBA], &SRC, 7);
	}
	// endregion

	// region: ft_memcpy_08
	#[test]
	fn ft_memcpy_08() {
		const SRC: [u8; 9] = [0xA9, 0xA4, 0xA4, 0x79, 0xD9, 0x8E, 0x47, 0x9A, 0x12];

		helper(&mut [0xD0, 0x77, 0x77, 0xA9, 0x8F, 0x7D, 0x63, 0x60, 0x50], &SRC, 8);
	}
	// endregion

	// region: ft_memcpy_09
	#[test]
	fn ft_memcpy_09() {
		const SRC: [u8; 10] = [0x40, 0x32, 0x5D, 0x52, 0x19, 0xAE, 0x39, 0x54, 0x18, 0x71];

		helper(&mut [0xD5, 0x72, 0xCD, 0xAA, 0xB6, 0x3F, 0x39, 0xB1, 0x6C, 0x73], &SRC, 9);
	}
	// endregion

	// region: ft_memcpy_10
	#[test]
	fn ft_memcpy_10() {
		const SRC: [u8; 11] = [0x46, 0x8F, 0xBA, 0x8A, 0x4F, 0xA9, 0x5F, 0x28, 0xE3, 0xED, 0x8D];

		helper(&mut [0xE8, 0x8C, 0xBD, 0xDB, 0x88, 0xBA, 0xCC, 0x89, 0xC0, 0xE6, 0x15], &SRC, 10);
	}
	// endregion

	// region: ft_memcpy_11
	#[test]
	fn ft_memcpy_11() {
		const SRC: [u8; 12] = [
			// region: SRC
			0xCC, 0xA2, 0x60, 0x70, 0x02, 0x65, 0x8F, 0x08, 0xE0, 0x8A, 0xA8, 0x29,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0xEA, 0xF3, 0x93, 0x0D, 0xD1, 0x5D, 0x82, 0x8F, 0x67, 0x5D, 0x8A,
				0xCC,
				// endregion
			],
			&SRC,
			11,
		);
	}
	// endregion

	// region: ft_memcpy_12
	#[test]
	fn ft_memcpy_12() {
		const SRC: [u8; 13] = [
			// region: SRC
			0x13, 0xCB, 0x0D, 0xDB, 0x54, 0x8B, 0x82, 0x4B, 0xBA, 0xE5, 0xB7, 0xFD,
			0xD0,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x45, 0xF6, 0x92, 0x4E, 0xA0, 0x90, 0x99, 0xE7, 0xD5, 0x32, 0xA4, 0x26,
				0xEC,
				// endregion
			],
			&SRC,
			12,
		);
	}
	// endregion

	// region: ft_memcpy_13
	#[test]
	fn ft_memcpy_13() {
		const SRC: [u8; 14] = [
			// region: SRC
			0x6D, 0x81, 0xAB, 0xFE, 0xFA, 0x4C, 0x67, 0xA6, 0xB1, 0x93, 0xD6, 0xA2, 0x30,
			0x38,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x67, 0x17, 0xC6, 0x86, 0xF8, 0x57, 0x2E, 0x7E, 0xD5, 0x7F, 0x43, 0x83, 0xE7,
				0x91,
				// endregion
			],
			&SRC,
			13,
		);
	}
	// endregion

	// region: ft_memcpy_14
	#[test]
	fn ft_memcpy_14() {
		const SRC: [u8; 15] = [
			// region: SRC
			0x23, 0xF6, 0xFD, 0x03, 0x52, 0x22, 0x03, 0x38, 0x01, 0x5C, 0x20, 0xAF, 0xB1, 0xDB,
			0xC2,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x48, 0x59, 0x0E, 0xBB, 0xC4, 0x41, 0x41, 0xE6, 0x07, 0xFF, 0x03, 0x01, 0x62, 0x7B,
				0xB2,
				// endregion
			],
			&SRC,
			14,
		);
	}
	// endregion

	// region: ft_memcpy_15
	#[test]
	fn ft_memcpy_15() {
		const SRC: [u8; 16] = [
			// region: SRC
			0x49, 0xEA, 0xE5, 0x17, 0xEE, 0x3D, 0x05, 0x8C, 0x0B, 0xD9, 0x69, 0xB4, 0x92, 0x51,
			0x40, 0xDD,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0xB8, 0x7B, 0x7A, 0x8A, 0x48, 0x7A, 0xAA, 0x51, 0x0E, 0xE3, 0xE4, 0x07, 0x32, 0x55,
				0x68, 0xB5,
				// endregion
			],
			&SRC,
			15,
		);
	}
	// endregion

	// region: ft_memcpy_16
	#[test]
	fn ft_memcpy_16() {
		const SRC: [u8; 33] = [
			// region: SRC
			0xD4, 0x22, 0x78, 0xF4, 0xF0, 0xB8, 0xD7, 0xA0, 0x03, 0x2B, 0x84, 0xD3, 0x0B, 0xBC,
			0x55, 0xD0, 0xD4, 0x46, 0x44, 0xD3, 0x67, 0xD4, 0xF2, 0x17, 0x1B, 0x63, 0xCA, 0xA2,
			0x0F, 0x5E, 0x9D, 0x22, 0xF4,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x9B, 0x36, 0x24, 0xEC, 0x53, 0x08, 0x64, 0xD7, 0x65, 0x87, 0xDF, 0x0E, 0x4E, 0x8C,
				0x63, 0x58, 0xC3, 0x8F, 0x51, 0x6F, 0xF3, 0x34, 0x8B, 0x09, 0x45, 0x24, 0x9A, 0xC0,
				0xC8, 0xF5, 0x96, 0x61, 0x70,
				// endregion
			],
			&SRC,
			32,
		);
	}
	// endregion

	// region: ft_memcpy_17
	#[test]
	fn ft_memcpy_17() {
		const SRC: [u8; 26] = [
			// region: SRC
			0xA3, 0x05, 0x95, 0xB1, 0xE6, 0x2C, 0xFF, 0x1B, 0x14, 0xAB, 0x56, 0x19, 0xE1, 0xC6,
			0x86, 0xA9, 0x44, 0x75, 0xC3, 0xC5, 0x96, 0x8F, 0xC6, 0x2D, 0x22,
			0xA4,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x4B, 0x1C, 0x7C, 0xF5, 0x26, 0xCD, 0xDE, 0x23, 0x49, 0x18, 0xB6, 0x35, 0x5D, 0x9D,
				0x8D, 0x67, 0xF0, 0x4C, 0xEB, 0x07, 0x0F, 0x44, 0x49, 0x89, 0xC7,
				0xDC,
				// endregion
			],
			&SRC,
			25,
		);
	}
	// endregion

	// region: ft_memcpy_18
	#[test]
	fn ft_memcpy_18() {
		const SRC: [u8; 43] = [
			// region: SRC
			0xFC, 0x3B, 0x38, 0xE3, 0xC7, 0xC8, 0xFF, 0x31, 0xA4, 0xA4, 0x93, 0x8F, 0x5D, 0x54,
			0xEC, 0xF6, 0xC0, 0xD4, 0xBB, 0xE2, 0x89, 0x44, 0x86, 0xAF, 0x57, 0xC3, 0xF1, 0x73,
			0xAC, 0x3D, 0x31, 0x7D, 0x2C, 0x85, 0x31, 0xBF, 0x83, 0xBC, 0xBA, 0xC3, 0xF9, 0xF1,
			0x60,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x6A, 0x1B, 0xA9, 0x51, 0x9F, 0xD6, 0x71, 0x3E, 0x36, 0x57, 0x1E, 0x9B, 0x29, 0x9D,
				0x3F, 0x28, 0x84, 0xA5, 0x51, 0xD4, 0x34, 0xC1, 0x70, 0xF9, 0xCB, 0xC1, 0x78, 0xFE,
				0x18, 0x0F, 0x96, 0x1E, 0x1F, 0xE9, 0xB7, 0x97, 0x7B, 0x30, 0x62, 0x20, 0x25, 0x65,
				0x7D,
				// endregion
			],
			&SRC,
			42,
		);
	}
	// endregion

	// region: ft_memcpy_19
	#[test]
	fn ft_memcpy_19() {
		const SRC: [u8; 20] = [
			// region: SRC
			0x59, 0xB6, 0x48, 0x06, 0x65, 0x8B, 0x4D, 0x2C, 0x4A, 0x9E, 0xF5, 0x0C, 0x95, 0xC7,
			0x4F, 0xA4, 0xB9, 0x9B, 0x42, 0xCC,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0xB8, 0x88, 0x64, 0x15, 0xD2, 0x44, 0xF9, 0xEF, 0xFA, 0x35, 0xB0, 0xB4, 0x54, 0x2E,
				0xC3, 0xD4, 0x2E, 0x28, 0xA7, 0xF6,
				// endregion
			],
			&SRC,
			19,
		);
	}
	// endregion

	// region: ft_memcpy_20
	#[test]
	fn ft_memcpy_20() {
		const SRC: [u8; 61] = [
			// region: SRC
			0xB8, 0x37, 0xD5, 0xAE, 0x9B, 0xFC, 0x02, 0x98, 0x57, 0x2F, 0xCA, 0xA7, 0x1B, 0x46,
			0xB9, 0xA2, 0xDD, 0x49, 0x5F, 0x88, 0xF3, 0x28, 0xDF, 0xDB, 0x21, 0x5B, 0xF1, 0x44,
			0xEF, 0x57, 0xDD, 0xFB, 0x46, 0xF5, 0x60, 0x35, 0xDC, 0x49, 0x6C, 0x59, 0x60, 0x37,
			0x4E, 0x55, 0x08, 0x1A, 0x61, 0x1D, 0x03, 0xCC, 0xD7, 0x1B, 0xAE, 0xC7, 0x82, 0x70,
			0xB9, 0x01, 0x44, 0x13, 0x8A,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x70, 0x40, 0x95, 0xB3, 0x10, 0x65, 0x6B, 0xBE, 0xAA, 0xB2, 0xAA, 0xF1, 0xCF, 0x8F,
				0xF1, 0x59, 0x6C, 0xB9, 0x2A, 0x0B, 0x68, 0xF8, 0x5D, 0xCD, 0x60, 0x9F, 0x2B, 0xA0,
				0xA0, 0x08, 0x4F, 0x14, 0x38, 0x16, 0x89, 0x11, 0x89, 0x84, 0x60, 0x7E, 0xB3, 0xB1,
				0xEC, 0x5B, 0xFF, 0x31, 0x2F, 0x17, 0xF4, 0x6B, 0x14, 0x41, 0x2C, 0x43, 0x2A, 0xC3,
				0xDC, 0xEE, 0xEB, 0x8A, 0x56,
				// endregion
			],
			&SRC,
			60,
		);
	}
	// endregion

	// region: ft_memcpy_21
	#[test]
	fn ft_memcpy_21() {
		const SRC: [u8; 54] = [
			// region: SRC
			0x1A, 0x72, 0xB5, 0xCC, 0x77, 0x3E, 0x49, 0x8B, 0xC9, 0x67, 0x0E, 0x3D, 0x36, 0x0F,
			0x51, 0x44, 0x75, 0x9A, 0x94, 0x71, 0x2A, 0xB4, 0x89, 0xCE, 0x65, 0x5E, 0x59, 0xB4,
			0x5A, 0xB6, 0x33, 0x2A, 0xE0, 0xA0, 0x3B, 0xAE, 0xC7, 0x2C, 0xE8, 0x42, 0x4F, 0x82,
			0x60, 0x76, 0x90, 0xE6, 0x30, 0x0A, 0x0A, 0x9B, 0x11, 0x98, 0xD8,
			0xB1,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0xE6, 0xB6, 0xF1, 0x42, 0x8C, 0x03, 0x39, 0x73, 0xAB, 0xE7, 0xDA, 0x64, 0xE8, 0xAC,
				0x44, 0x7C, 0x1C, 0x59, 0xC9, 0x20, 0x9F, 0xE6, 0xC0, 0x64, 0xD1, 0x53, 0x77, 0x7A,
				0x94, 0x47, 0x3E, 0x6D, 0x9E, 0xB1, 0xCA, 0xA4, 0x44, 0xCF, 0xA6, 0x8A, 0xD8, 0x1B,
				0xF5, 0xCB, 0x71, 0xD8, 0x6A, 0x3F, 0x72, 0xAB, 0xBC, 0x6C, 0x38,
				0x72,
				// endregion
			],
			&SRC,
			53,
		);
	}
	// endregion

	// region: ft_memcpy_22
	#[test]
	fn ft_memcpy_22() {
		const SRC: [u8; 87] = [
			// region: SRC
			0x38, 0x4F, 0x03, 0xE9, 0x9F, 0xE8, 0x8E, 0x9B, 0x20, 0xAD, 0x9D, 0x12, 0x6C, 0xA2,
			0x60, 0x67, 0xF0, 0x7F, 0x63, 0xBE, 0x49, 0x48, 0xCD, 0x6F, 0x54, 0xEC, 0xCB, 0xBF,
			0xB0, 0xC6, 0x72, 0x82, 0xE2, 0xA6, 0xCD, 0x1E, 0x4A, 0x1F, 0x80, 0x73, 0xBE, 0x57,
			0xDC, 0xBC, 0x64, 0x8B, 0x28, 0xCB, 0x58, 0x1A, 0xC5, 0x03, 0xFE, 0x58, 0xF0, 0x6E,
			0xC8, 0x15, 0x22, 0x4A, 0x4F, 0xB4, 0xD1, 0x6E, 0x9A, 0x11, 0x38, 0x53, 0x5C, 0x2E,
			0x94, 0x24, 0xF6, 0xE1, 0x95, 0xA2, 0x39, 0x1E, 0x11, 0x53, 0x1B, 0xD8, 0xC1, 0x55,
			0x24, 0x75, 0xE7,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x43, 0x83, 0x46, 0x24, 0x6D, 0xF8, 0x59, 0x81, 0x6B, 0x88, 0x56, 0x0D, 0x3C, 0x84,
				0xF2, 0xDD, 0x31, 0x30, 0x00, 0x79, 0xAB, 0xCC, 0x62, 0x3D, 0x0A, 0x19, 0x39, 0xD0,
				0x5A, 0xF9, 0xBB, 0xFA, 0x30, 0x99, 0x0B, 0x47, 0xA6, 0x5C, 0x27, 0x91, 0xFC, 0xCE,
				0xFC, 0x5D, 0xBC, 0xE5, 0x92, 0x48, 0x55, 0xDD, 0x41, 0xA8, 0xD6, 0xC6, 0xFD, 0xFB,
				0xFA, 0xDD, 0x24, 0x95, 0x02, 0x76, 0x36, 0x69, 0xC3, 0x9E, 0x53, 0x30, 0x5D, 0xD2,
				0x19, 0x01, 0xEA, 0x80, 0x47, 0x39, 0xC4, 0x8B, 0x70, 0x98, 0x73, 0x67, 0xFA, 0x92,
				0x7D, 0x90, 0x2D,
				// endregion
			],
			&SRC,
			86,
		);
	}
	// endregion

	// region: ft_memcpy_23
	#[test]
	fn ft_memcpy_23() {
		const SRC: [u8; 32] = [
			// region: SRC
			0x12, 0x55, 0xCB, 0xB7, 0x5E, 0x71, 0xD2, 0x08, 0x2C, 0x52, 0x6E, 0x96, 0x2F, 0x42,
			0x84, 0x21, 0xDA, 0xE9, 0x69, 0x10, 0x74, 0x4F, 0x5C, 0x77, 0x29, 0xD8, 0x5E, 0x16,
			0x9F, 0xF6, 0x78, 0x35,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x8D, 0x42, 0x86, 0x56, 0x51, 0x74, 0x4B, 0x89, 0x01, 0xA7, 0xF8, 0x8F, 0x0C, 0xC9,
				0x90, 0x42, 0x7D, 0x09, 0xFF, 0x30, 0xDC, 0x6E, 0x29, 0x13, 0x35, 0xBB, 0x45, 0x3D,
				0x62, 0xBE, 0xFF, 0x4F,
				// endregion
			],
			&SRC,
			31,
		);
	}
	// endregion

	// region: ft_memcpy_24
	#[test]
	fn ft_memcpy_24() {
		const SRC: [u8; 4] = [0xDB, 0x06, 0x59, 0xEF];

		helper(&mut [0x0E, 0x00, 0x30, 0x7C], &SRC, 0);
	}
	// endregion

	// region: ft_memcpy_25
	#[test]
	fn ft_memcpy_25() {
		const SRC: [u8; 51] = [
			// region: SRC
			0xD2, 0x58, 0xF8, 0x97, 0x00, 0x7D, 0x8F, 0x41, 0xE3, 0xF6, 0x1F, 0x69, 0x24, 0xF4,
			0x77, 0x32, 0xE2, 0x58, 0x9D, 0xC4, 0xC3, 0xDE, 0x25, 0x0E, 0xA6, 0x49, 0xE8, 0xA3,
			0x8D, 0x2F, 0xE4, 0xD3, 0x38, 0x5E, 0x35, 0xAD, 0x7B, 0xA5, 0xFB, 0xBE, 0x91, 0xCE,
			0xF6, 0xFD, 0x86, 0xE3, 0xEE, 0x2A, 0xCC, 0x87, 0xD0,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0xCA, 0x2A, 0xD8, 0x92, 0xF0, 0x55, 0x72, 0x4C, 0x40, 0xE4, 0x32, 0x62, 0x4E, 0x29,
				0x7E, 0x03, 0x9F, 0xB6, 0xA7, 0x76, 0x0F, 0xD1, 0x1E, 0xBD, 0x59, 0x8C, 0x37, 0x04,
				0x30, 0xCD, 0xEA, 0x33, 0x13, 0xAA, 0xCA, 0x07, 0x63, 0x30, 0xB4, 0x4A, 0x10,
				0x8B,
				// endregion
			],
			&SRC,
			37,
		);
	}
	// endregion

	// region: ft_memcpy_26
	#[test]
	fn ft_memcpy_26() {
		const SRC: [u8; 666] = [
			// region: SRC
			0x16, 0x63, 0xFC, 0xE6, 0x81, 0x74, 0xFF, 0xCC, 0x69, 0x32, 0x3B, 0xC1, 0x06, 0x3F,
			0xA3, 0x61, 0x64, 0x23, 0x28, 0xB8, 0x09, 0xF4, 0x3B, 0x91, 0x98, 0xD6, 0x42, 0xA8,
			0xEB, 0xC9, 0xD4, 0xCC, 0xB7, 0x6F, 0x5E, 0x8A, 0x14, 0x6F, 0x17, 0xC3, 0x98, 0xD8,
			0xBD, 0xCF, 0x42, 0xB4, 0x7E, 0x25, 0x3A, 0xB7, 0xD3, 0x45, 0x4C, 0x96, 0xB7, 0x95,
			0xCF, 0xA5, 0xE0, 0x60, 0xD6, 0x93, 0x54, 0x17, 0x6C, 0x73, 0xFA, 0xAF, 0x4E, 0xBF,
			0x88, 0x7B, 0xAA, 0xAA, 0x5A, 0x27, 0x00, 0x9C, 0xA7, 0xFB, 0xD0, 0x4A, 0x70, 0xEB,
			0x27, 0xD1, 0x03, 0xF1, 0x44, 0xF6, 0xBE, 0xBA, 0xC7, 0x9F, 0x5F, 0xDE, 0xDB, 0x9E,
			0x75, 0x4B, 0x15, 0xAA, 0xAB, 0x03, 0x70, 0xE7, 0x6D, 0x37, 0x82, 0xC0, 0x7E, 0x9E,
			0xB5, 0x2E, 0xA1, 0xE2, 0xF9, 0x06, 0x78, 0x6A, 0x88, 0x83, 0x7B, 0x45, 0xFB, 0x5A,
			0x28, 0x60, 0x44, 0x35, 0x0A, 0xBB, 0x89, 0x2C, 0x69, 0x4E, 0x3A, 0xFE, 0x8E, 0xE8,
			0xEF, 0x01, 0xF9, 0x67, 0x01, 0x69, 0x9E, 0x77, 0xC7, 0xAC, 0x0C, 0x94, 0xF3, 0xF1,
			0xEF, 0xC1, 0xA5, 0x0B, 0x66, 0x05, 0x65, 0xB7, 0x1C, 0x90, 0x56, 0x86, 0x56, 0x8A,
			0x79, 0x18, 0x1A, 0x60, 0xF7, 0xC7, 0x49, 0xD3, 0xF4, 0x64, 0xBF, 0xEF, 0xB1, 0x46,
			0xC3, 0x53, 0x37, 0x3F, 0x77, 0x21, 0x31, 0x3D, 0xDD, 0x84, 0x4B, 0xA5, 0x7B, 0xBB,
			0x0E, 0x57, 0xC1, 0x22, 0x68, 0xAC, 0xDB, 0xF0, 0xDC, 0x5C, 0x16, 0x2E, 0xCD, 0x2B,
			0xBA, 0x38, 0xD2, 0x2B, 0x46, 0xDC, 0x5C, 0x53, 0xB4, 0xB7, 0x53, 0xE1, 0xF7, 0xB5,
			0x5D, 0x7E, 0xAE, 0xCF, 0x80, 0x7B, 0xE3, 0xA7, 0x26, 0xF5, 0x80, 0xFA, 0x20, 0xCF,
			0x15, 0x36, 0xB0, 0x54, 0xA6, 0x95, 0x88, 0xEF, 0x6C, 0x16, 0xA1, 0xDF, 0xAA, 0xD8,
			0x4F, 0x3D, 0x4F, 0x63, 0xDE, 0x8D, 0x9E, 0x74, 0xC6, 0x26, 0xCD, 0x13, 0x11, 0x66,
			0x83, 0x80, 0xF9, 0xA3, 0x05, 0xBE, 0x4C, 0x48, 0x3F, 0xAF, 0x53, 0x48, 0xCE, 0x20,
			0x05, 0x41, 0xC9, 0xC3, 0x61, 0xD9, 0xAC, 0x9F, 0xA0, 0x73, 0xA8, 0xFB, 0x7B, 0xF7,
			0xB2, 0xFD, 0xCD, 0x09, 0x45, 0xA3, 0x29, 0xD1, 0xD0, 0xFD, 0xBD, 0x6C, 0x07, 0x9C,
			0x35, 0x3F, 0xAA, 0x99, 0x21, 0x22, 0xBF, 0xEA, 0x69, 0x7C, 0xB2, 0x2F, 0x68, 0x33,
			0xF2, 0x6A, 0x2A, 0xDA, 0x46, 0x46, 0xF7, 0xE2, 0x62, 0x79, 0x8E, 0x9C, 0x15, 0x62,
			0xF5, 0x96, 0x02, 0xE3, 0x8B, 0x77, 0x48, 0xAD, 0xE1, 0x74, 0x08, 0x01, 0x67, 0xA8,
			0x27, 0x63, 0xCD, 0xC8, 0x72, 0xA2, 0xDF, 0xAF, 0x16, 0xCA, 0xE2, 0x34, 0xD8, 0xD6,
			0xD6, 0xC1, 0x66, 0xAE, 0x26, 0x01, 0xFF, 0x79, 0x43, 0xF6, 0x7B, 0xCA, 0x40, 0x54,
			0xF7, 0xB7, 0x30, 0x72, 0x13, 0xF0, 0xA3, 0x7A, 0x94, 0x8D, 0x0A, 0xD7, 0x70, 0x96,
			0xC6, 0x46, 0xDB, 0xC8, 0xE2, 0x48, 0xA4, 0xDB, 0x53, 0x34, 0x6C, 0x4B, 0xD9, 0x88,
			0x5A, 0xC5, 0x50, 0xF4, 0xF5, 0x1F, 0x92, 0xC1, 0xC7, 0xA6, 0x09, 0x95, 0x56, 0x1A,
			0x83, 0x0B, 0xAE, 0x07, 0xEB, 0xFF, 0xEC, 0xC8, 0x8A, 0x10, 0xB0, 0x81, 0x3D, 0x25,
			0xF0, 0xA9, 0xB9, 0x6F, 0x69, 0xA7, 0xBF, 0xE1, 0x8D, 0xE4, 0xEF, 0x32, 0x43, 0xD2,
			0xDF, 0xFB, 0xDF, 0xC8, 0xC0, 0xE6, 0xBF, 0x66, 0xA2, 0xE1, 0xC9, 0xB2, 0x71, 0xE1,
			0x3C, 0x4D, 0x32, 0xA4, 0xA0, 0x42, 0x47, 0xA5, 0x11, 0xD9, 0xA0, 0x7A, 0x1D, 0xC6,
			0xC2, 0x73, 0xB9, 0xFD, 0x2E, 0xC5, 0xEA, 0xCE, 0xE7, 0x08, 0x8E, 0x6F, 0x47, 0x5F,
			0x5F, 0x21, 0x67, 0xC3, 0x5C, 0x37, 0xE8, 0xDA, 0x5F, 0x74, 0xD9, 0x2E, 0xE9, 0x01,
			0x0F, 0x67, 0x78, 0x35, 0x05, 0x6A, 0x1E, 0xB6, 0x67, 0x17, 0x47, 0xFF, 0x77, 0xC2,
			0x7C, 0xFA, 0xBF, 0xB0, 0x92, 0xF5, 0x81, 0x9F, 0x56, 0xD3, 0x32, 0xD7, 0x4A, 0x0B,
			0xF9, 0x6A, 0x35, 0x9E, 0x2D, 0xE5, 0x5B, 0x50, 0xD5, 0xA0, 0xF2, 0x5C, 0xC7, 0x8F,
			0xC3, 0x4F, 0x56, 0xD5, 0xB2, 0x17, 0x26, 0x69, 0x1B, 0x03, 0x64, 0xC1, 0xC6, 0x88,
			0xF1, 0x4E, 0x2B, 0x6C, 0xA8, 0x64, 0x93, 0xBC, 0xEF, 0xEB, 0x07, 0x16, 0x1C, 0x26,
			0xD8, 0xE9, 0x12, 0x12, 0xD3, 0x60, 0xBB, 0xB3, 0x61, 0x6F, 0xF1, 0x05, 0x9F, 0xCF,
			0xF7, 0x16, 0x83, 0xE9, 0xB4, 0x27, 0x67, 0xAB, 0x84, 0xE0, 0x12, 0x39, 0xD1, 0x95,
			0x1D, 0x5F, 0xAB, 0xB7, 0x93, 0x8A, 0xE6, 0xCB, 0x68, 0xA4, 0x3A, 0xC0, 0x66, 0xB1,
			0x10, 0x0B, 0x3E, 0x57, 0xB2, 0x66, 0x90, 0xE0, 0x6C, 0x8A, 0xDF, 0xEC, 0xB2, 0xEF,
			0x18, 0x04, 0xA3, 0x45, 0xBD, 0xAD, 0x32, 0xFC, 0x15, 0xFB, 0xB3, 0x0A, 0x49, 0x4A,
			0x90, 0xD2, 0xF9, 0x5F, 0x8A, 0x46, 0x9C, 0x8B, 0x6E, 0x31, 0x1D, 0xBD, 0x7D, 0x59,
			0x8B, 0x95, 0xA8, 0x9C, 0x1B, 0x9F, 0xF2, 0x88,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x1D, 0xE2, 0x27, 0x4D, 0x90, 0x59, 0x45, 0x43, 0x61, 0x43, 0x4C, 0xDE, 0x1F, 0xAB,
				0x21, 0xD8, 0x22, 0x2D, 0xF0, 0x1B, 0xBC, 0x1F, 0x73, 0x37, 0xA7, 0x0A, 0x9D, 0x48,
				0x3A, 0x13, 0xF6, 0x94, 0xBB, 0x4F, 0x37, 0xB7, 0x22, 0xD1, 0xC9, 0x52, 0x82, 0x88,
				0x30, 0x63, 0x2D, 0x1A, 0xD6, 0xD7, 0xF5, 0x06, 0x7F, 0x52, 0xA9, 0x39, 0xF2, 0xFE,
				0x5E, 0xE6, 0xA5, 0x82, 0x1F, 0x01, 0x1A, 0xDC, 0xAE, 0x78, 0xE2, 0x89, 0x05, 0x90,
				0xE2, 0x79, 0x6C, 0x00, 0xC9, 0x95, 0x76, 0xA7, 0xC6, 0xDA, 0x6E, 0xFB, 0xC9, 0x90,
				0x2C, 0xC5, 0xA5, 0xD7, 0xAA, 0xD5, 0x69, 0x52, 0x56, 0x4F, 0xCF, 0x5A, 0x7F, 0x8C,
				0x25, 0x35, 0x61, 0xFC, 0x49, 0xBB, 0x5A, 0x58, 0xC1, 0xF6, 0xBE, 0xCE, 0xC2, 0x4F,
				0x2A, 0xB6, 0xFC, 0xC7, 0x2D, 0x3A, 0x46, 0xA6, 0x20, 0x18, 0x7F, 0x22, 0x95, 0xF6,
				0xA4, 0xBF, 0xC3, 0x32, 0x18, 0x81, 0x95, 0x57, 0xE2, 0xE0, 0x37, 0x2D, 0x02, 0x12,
				0x28, 0x81, 0x1F, 0x2B, 0xD6, 0x36, 0xBE, 0x5C, 0x62, 0x0E, 0xE3, 0x1C, 0x79, 0xB5,
				0x60, 0x44, 0x5C, 0x35, 0xE8, 0xE0, 0x25, 0xDB, 0x36, 0x2F, 0x02, 0x1F, 0x03, 0x9D,
				0x01, 0x88, 0xE8, 0xE9, 0x0D, 0x4F, 0x41, 0xA1, 0xA3, 0xD4, 0xFB, 0x88, 0x91, 0x54,
				0xD0, 0x39, 0xAF, 0xB3, 0x7B, 0xB4, 0xD3, 0xBF, 0x8F, 0xFE, 0x32, 0xE3, 0xD8, 0xC6,
				0x70, 0x09, 0x6C, 0xB2, 0x74, 0xE5, 0x36, 0x3A, 0x3B, 0x1C, 0xB5, 0xAC, 0xDC, 0xDB,
				0xB1, 0xFE, 0xD6, 0xE8, 0x51, 0xAC, 0x42, 0x1B, 0x8A, 0x29, 0xF5, 0x1B, 0x75, 0x87,
				0x63, 0xA7, 0x46, 0x3B, 0x57, 0xE4, 0x56, 0x7D, 0x5A, 0x51, 0xA0, 0xE6, 0x1E, 0x6A,
				0xEA, 0xDC, 0x75, 0x2B, 0xF5, 0x22, 0x9F, 0xC9, 0x1F, 0x0F, 0xEE, 0x7D, 0x50, 0x63,
				0xAE, 0x65, 0x5B, 0x6B, 0x8F, 0xB9, 0x74, 0x07, 0xD1, 0xFD, 0x02, 0xE7, 0x9E, 0x4A,
				0x5A, 0x4D, 0xC8, 0x3F, 0xB7, 0x3C, 0x7C, 0x37, 0x7D, 0xC5, 0xEF, 0xFA, 0x35, 0x83,
				0x6C, 0x8D, 0xBD, 0xDC, 0x44, 0x56, 0xB6, 0xFA, 0xB7, 0x79, 0x46, 0x51, 0xEF, 0x39,
				0xB1, 0x55, 0x0E, 0x69, 0xEA, 0x1C, 0xDA, 0xBC, 0x44, 0xB6, 0x7C, 0x61, 0x17, 0x2B,
				0xC3, 0x02, 0x55, 0xB5, 0xD8, 0xAA, 0x11, 0x9B, 0x66, 0xDC, 0x73, 0x65, 0x4B, 0x05,
				0x40, 0xB1, 0x51, 0xE1, 0xC3, 0x08, 0x74, 0x32, 0xA6, 0xD6, 0x01, 0xEF, 0xF1, 0xDF,
				0xBD, 0xC9, 0x19, 0xE3, 0x11, 0x47, 0xE1, 0xD5, 0xF7, 0x00, 0x91, 0xFD, 0xC4, 0x89,
				0xF3, 0x3D, 0xA8, 0x44, 0xF1, 0x88, 0x3C, 0xE4, 0x1C, 0x98, 0x01, 0x09, 0x44, 0xA1,
				0xD3, 0xD3, 0x3B, 0x50, 0x06, 0xB9, 0x87, 0x11, 0x02, 0x62, 0xD0, 0x0B, 0xA4, 0x4E,
				0xBF, 0xE6, 0xAA, 0x80, 0x04, 0xB5, 0x58, 0x6A, 0x3E, 0x54, 0x86, 0xA1, 0x0E, 0xF2,
				0xCD, 0x0B, 0x8C, 0x91, 0x68, 0xF8, 0x15, 0x92, 0x09, 0x9C, 0x99, 0x17, 0x4B, 0x70,
				0x34, 0x00, 0xD5, 0xA3, 0x78, 0xC4, 0x75, 0x9A, 0x67, 0xFF, 0x10, 0xDF, 0xB4, 0xF1,
				0x68, 0xAF, 0x86, 0x22, 0x2B, 0x81, 0x76, 0x07, 0xCE, 0x2F, 0xB1, 0x6D, 0x5D, 0x04,
				0xC5, 0x24, 0x9E, 0x1D, 0xC7, 0xA7, 0xCD, 0xF3, 0x03, 0x8B, 0x7D, 0xB3, 0x18, 0x2D,
				0x58, 0xAB, 0x33, 0x34, 0xE8, 0xD7, 0x8C, 0xFB, 0x50, 0x9F, 0x63, 0xAE, 0x51, 0x34,
				0x73, 0xFC, 0x70, 0x6B, 0x4F, 0x41, 0x9C, 0x24, 0xAC, 0xEA, 0x44, 0xC7, 0x52, 0x3E,
				0x34, 0xE8, 0xB3, 0x49, 0x5E, 0x6B, 0xA6, 0x9C, 0x83, 0x49, 0x82, 0x31, 0x98, 0x10,
				0x87, 0xA6, 0x47, 0x68, 0x25, 0x92, 0x58, 0x76, 0x4D, 0x84, 0x01, 0xE0, 0xB4, 0xBD,
				0x4D, 0x16, 0xF2, 0x11, 0xEA, 0xE8, 0xF3, 0x23, 0x5C, 0x6A, 0x11, 0x46, 0x30, 0x97,
				0x63, 0xA8, 0x03, 0x28, 0x99, 0xE2, 0x67, 0x2A, 0x57, 0x55, 0xC7, 0x63, 0x91, 0xDB,
				0xA0, 0x46, 0x69, 0xAD, 0xEB, 0xC8, 0x0B, 0x6E, 0x02, 0x3F, 0xFF, 0xEC, 0x2E, 0x47,
				0x62, 0xDA, 0xFC, 0xBD, 0x44, 0xF6, 0x8D, 0xAB, 0xA8, 0x95, 0xFD, 0xDC, 0x47, 0x58,
				0x0C, 0x69, 0x8B, 0x4D, 0x84, 0x78, 0x13, 0xD9, 0xC5, 0xF2, 0x49, 0xDC, 0x03, 0xE4,
				0x06, 0x6A, 0xCD, 0x6D, 0x3A, 0x46, 0xD7, 0x72, 0xAE, 0xEB, 0x46, 0x50, 0x75, 0xED,
				0x25, 0x7E, 0xA3, 0xF4, 0x15, 0x51, 0xB3, 0x7A, 0x41, 0xF6, 0x31, 0x58, 0x5E, 0x8A,
				0x24, 0xDD, 0xD6, 0xC5, 0x11, 0xBF, 0x4B, 0x67, 0x98, 0xBB, 0x47, 0xFE, 0xB0, 0x1E,
				0x66, 0x7E, 0x97, 0x1A, 0x46, 0x4C, 0x17, 0xA4, 0xE4, 0xC1, 0x95, 0x8F, 0x92, 0x7C,
				0xF1, 0x4F, 0xF8, 0xAF, 0xF7, 0x83, 0x70, 0x5F, 0x80, 0x1B, 0xA2, 0x6F, 0xD1, 0x11,
				0x6E, 0x8D, 0x59, 0x11, 0x43, 0x6E, 0x0B, 0x03, 0x63, 0xE5, 0x21, 0xA4, 0x54, 0x20,
				0x4C, 0xCD, 0xD8, 0xB8, 0x1F, 0x78, 0x3E, 0xF2, 0x80, 0xDA, 0x97, 0x9A, 0x9C, 0x35,
				0x97, 0xFB, 0xC9, 0x25, 0xBD, 0x73, 0x0D, 0x51, 0xCA, 0x86, 0xE6, 0x8F, 0xC8, 0x42,
				0xA8, 0x90, 0xAA, 0x11, 0x0A, 0xDC, 0x87, 0x84, 0x52, 0xDF, 0xBC, 0x78, 0x4F, 0x44,
				0x49, 0x30, 0xA5, 0xEA, 0x43, 0x93, 0x11, 0x63, 0x9B, 0x58, 0xB6, 0x59, 0x39, 0xFF,
				0xE3, 0x05, 0x17, 0xDB, 0xE8, 0xE2, 0x61, 0x7C, 0xB8, 0x11, 0x67, 0x0B, 0x8E, 0xF1,
				0x47, 0xE6, 0x66, 0xE0, 0x42, 0x3C, 0x47, 0xB3, 0x30, 0xC4, 0x66, 0x75, 0xF2, 0x38,
				0x65, 0x25, 0x55, 0xA8, 0x2A, 0xE1, 0x45, 0x9B, 0x77, 0x64, 0xE2, 0x4B, 0xE8, 0x38,
				0x73, 0xBC, 0x84, 0x73, 0x8D, 0xEE, 0x3A, 0x05, 0x4B, 0x12, 0xD6, 0xB8, 0x87, 0xBA,
				0x87, 0x72, 0x93, 0x64, 0x73, 0xB0, 0x46,
				// endregion
			],
			&SRC,
			666,
		);
	}
	// endregion

	// region: ft_memcpy_27
	#[test]
	fn ft_memcpy_27() {
		const SRC: [u8; 1234] = [
			// region: SRC
			0x19, 0x1A, 0x0A, 0xC8, 0x27, 0xD3, 0xFB, 0x57, 0xAF, 0x06, 0x3E, 0xAD, 0x0B, 0x6B,
			0x9F, 0x1B, 0xE5, 0x4B, 0x05, 0x04, 0xE6, 0xBE, 0x18, 0x05, 0x05, 0x8D, 0x05, 0x51,
			0xD1, 0xC8, 0x56, 0x90, 0x21, 0xDB, 0x07, 0xA6, 0x4E, 0xD0, 0x6A, 0x6C, 0x69, 0xB2,
			0x21, 0x65, 0xB4, 0xAE, 0x27, 0xD9, 0x07, 0x07, 0xA4, 0x11, 0xA1, 0x4D, 0x32, 0x34,
			0x78, 0x9E, 0x88, 0x14, 0x13, 0x6E, 0xEC, 0x42, 0xCC, 0xDF, 0x0A, 0x7D, 0x9E, 0xB0,
			0x80, 0x1B, 0x40, 0xCE, 0x69, 0xFC, 0x15, 0x6C, 0xC4, 0x26, 0xE5, 0x9F, 0x3D, 0x08,
			0x61, 0x80, 0x3F, 0x7D, 0xEB, 0x02, 0x56, 0x9A, 0x3C, 0x7C, 0x38, 0x04, 0x0A, 0x80,
			0x52, 0xC3, 0xBF, 0x76, 0xC6, 0xFD, 0xA7, 0x97, 0x4E, 0xCE, 0x69, 0x80, 0x36, 0x8C,
			0xEC, 0xBB, 0x6E, 0x6F, 0x64, 0xEE, 0x03, 0x33, 0xFE, 0x15, 0xB9, 0x15, 0xB7, 0xA9,
			0x96, 0x8B, 0xA7, 0xEC, 0x55, 0x79, 0x47, 0x15, 0x47, 0x1D, 0x1C, 0xB1, 0x6E, 0xA2,
			0xEF, 0x53, 0xA6, 0xD4, 0xAD, 0x96, 0x71, 0xF9, 0x39, 0xBC, 0xF9, 0x3D, 0x4E, 0x1A,
			0x30, 0x20, 0x4F, 0xA2, 0x87, 0x4C, 0x57, 0xEE, 0x05, 0xE0, 0x43, 0x35, 0x2F, 0x9B,
			0x91, 0x6A, 0x56, 0x1F, 0x6A, 0x23, 0x14, 0x90, 0x67, 0xB6, 0x91, 0xDE, 0xDC, 0x63,
			0xC8, 0xBF, 0x2E, 0xA5, 0xA2, 0x77, 0x68, 0xEE, 0x7D, 0x31, 0xD4, 0x89, 0xBA, 0x4B,
			0xC9, 0x45, 0x55, 0x66, 0x3E, 0xC0, 0x31, 0xAA, 0x93, 0xAE, 0xB7, 0xFB, 0xFB, 0xE7,
			0x7A, 0x0B, 0xA2, 0x02, 0xBD, 0xF5, 0x92, 0xE0, 0xD2, 0xDB, 0x89, 0x7E, 0xDC, 0x70,
			0x05, 0xE0, 0x63, 0x0D, 0xAA, 0x21, 0x40, 0xFE, 0x03, 0x94, 0xF5, 0x0B, 0x52, 0x13,
			0xFF, 0x2C, 0x47, 0x14, 0x68, 0xD6, 0x21, 0x81, 0x46, 0x0C, 0xEB, 0x4F, 0xC6, 0x0F,
			0xEF, 0x45, 0x1C, 0x14, 0xE4, 0x4A, 0x8B, 0x7B, 0xEF, 0xB2, 0xE4, 0x5A, 0x9B, 0x48,
			0xD1, 0xDA, 0x4B, 0x73, 0x6A, 0xA9, 0xC0, 0x93, 0x1B, 0x5E, 0xB7, 0xB3, 0xB7, 0xFF,
			0xAB, 0x6D, 0x3A, 0xDB, 0xF0, 0x7E, 0xD4, 0x14, 0x48, 0xF8, 0x05, 0xF8, 0x21, 0x5F,
			0xD7, 0x5F, 0x47, 0xFB, 0xD3, 0x00, 0xE0, 0xA0, 0x17, 0x1D, 0x9C, 0x8E, 0x39, 0xBA,
			0x8F, 0x6B, 0xCF, 0x0F, 0x7B, 0x33, 0x45, 0x8C, 0x65, 0x12, 0x81, 0x55, 0x19, 0xE7,
			0xD0, 0xF4, 0xC9, 0x23, 0x07, 0x6F, 0x1C, 0xF5, 0xBA, 0xE6, 0xE1, 0xC3, 0x7A, 0x42,
			0x15, 0xBE, 0xBA, 0xE5, 0xEC, 0xB7, 0xD7, 0x99, 0xA7, 0xDB, 0x60, 0x08, 0x32, 0x2C,
			0x2A, 0x91, 0xAB, 0x5A, 0xC8, 0xE7, 0xDC, 0x52, 0xB4, 0x75, 0x4A, 0xBE, 0x60, 0xDC,
			0x41, 0xCB, 0x4F, 0xF4, 0xE6, 0xEA, 0x0B, 0x97, 0x9D, 0xB9, 0xF7, 0xBD, 0xE9, 0xF6,
			0x9A, 0x0A, 0xEB, 0xA3, 0xAF, 0x7D, 0x06, 0xCD, 0xAD, 0x1E, 0x65, 0x25, 0xE4, 0x5F,
			0x05, 0x74, 0x1B, 0xE0, 0x00, 0x64, 0x8B, 0x07, 0x50, 0xFB, 0x3A, 0x0A, 0xB3, 0x9F,
			0xEC, 0x91, 0xE2, 0x49, 0x6B, 0x45, 0x53, 0xE6, 0xFF, 0x3D, 0x88, 0xC6, 0xD8, 0xEA,
			0xA9, 0x68, 0x7C, 0x62, 0x69, 0x1C, 0xEF, 0xA4, 0xFD, 0x32, 0x27, 0x33, 0x8F, 0xB2,
			0x18, 0x73, 0xB2, 0x8B, 0x0A, 0x80, 0xEA, 0xC8, 0xDC, 0x89, 0x85, 0xB6, 0xA6, 0x0A,
			0x40, 0x77, 0x90, 0x57, 0x4F, 0x3B, 0xFA, 0x89, 0x6B, 0xCF, 0xC5, 0x97, 0x57, 0x29,
			0x64, 0xCE, 0x98, 0xF6, 0x9B, 0x98, 0x3D, 0x6D, 0xF8, 0x4F, 0x2C, 0xBA, 0xAB, 0xB9,
			0xDC, 0x17, 0x5A, 0x1E, 0x05, 0x9B, 0xC3, 0x7C, 0xC8, 0x12, 0xBA, 0x5A, 0x82, 0x47,
			0xAE, 0x9F, 0x87, 0x52, 0x70, 0xAF, 0x6C, 0x3F, 0xAF, 0x8E, 0x5B, 0xCC, 0xE2, 0x44,
			0x86, 0xFE, 0x41, 0x3C, 0x71, 0xCA, 0xEB, 0x9F, 0x99, 0x74, 0xEA, 0x85, 0xD7, 0xE1,
			0x86, 0x5A, 0x7A, 0x72, 0x44, 0x1B, 0x92, 0x64, 0xE3, 0xD5, 0x9B, 0xE7, 0xBE, 0x8B,
			0x9C, 0xDD, 0x08, 0x4D, 0x15, 0x86, 0xA9, 0x53, 0x3C, 0x4D, 0xE9, 0x3A, 0xEA, 0xAE,
			0xCD, 0x4B, 0x40, 0x7D, 0x6E, 0x6D, 0x64, 0x25, 0xAC, 0x71, 0x9E, 0x07, 0xEC, 0x38,
			0x1A, 0xD5, 0x55, 0x28, 0xAA, 0xA1, 0x4B, 0xAF, 0xCD, 0xFC, 0x3B, 0xA0, 0x96, 0xAC,
			0x8F, 0xDE, 0x65, 0xAE, 0x34, 0x2B, 0xEA, 0x1A, 0xB3, 0xF9, 0x3E, 0x44, 0xAC, 0x99,
			0x22, 0x2E, 0xF6, 0x4E, 0xBC, 0x80, 0x92, 0x08, 0x29, 0xFC, 0xF7, 0xC7, 0xDB, 0xFC,
			0x44, 0x0E, 0xE2, 0x25, 0xA4, 0x8B, 0x27, 0x90, 0xC9, 0x78, 0x43, 0x30, 0x61, 0xAA,
			0xCC, 0x40, 0x95, 0x90, 0x03, 0x2C, 0xD9, 0x9E, 0xE1, 0x3B, 0x9D, 0x41, 0xE0, 0xEF,
			0x32, 0x26, 0x90, 0xA3, 0x8D, 0x88, 0xD5, 0x7E, 0xF4, 0x5B, 0x85, 0xA5, 0x1C, 0x66,
			0x36, 0xA8, 0x85, 0x09, 0x0B, 0xEB, 0x04, 0xA3, 0x6B, 0x9F, 0x0E, 0x25, 0x26, 0xC3,
			0x97, 0xED, 0x97, 0x15, 0xD2, 0x32, 0xD1, 0x89, 0x93, 0xCE, 0x78, 0xA6, 0x71, 0xBF,
			0x4E, 0xD0, 0x91, 0x5E, 0xB3, 0x80, 0x5B, 0xBD, 0x1A, 0x32, 0x60, 0xEF, 0xE9, 0x03,
			0xBB, 0xFC, 0xCF, 0xF4, 0xB3, 0x17, 0xD2, 0xEE, 0x9C, 0x11, 0x37, 0x6A, 0x86, 0x5D,
			0xDD, 0x9F, 0x33, 0xBB, 0x1A, 0x84, 0xEB, 0xE7, 0x6B, 0xC5, 0xE1, 0xA8, 0xF6, 0x44,
			0x9D, 0xF1, 0x3B, 0x92, 0xA3, 0xF1, 0xE4, 0xA5, 0x3E, 0xE9, 0xE8, 0x94, 0xC7, 0xE0,
			0x27, 0xFE, 0xF8, 0xAE, 0xB7, 0x38, 0x02, 0xEB, 0xC2, 0x9C, 0x26, 0xF3, 0x6B, 0x3E,
			0x91, 0x42, 0xF5, 0xB9, 0x66, 0x9A, 0x1A, 0xCC, 0x78, 0xEA, 0xE9, 0x70, 0x2F, 0xA5,
			0x4C, 0xE1, 0xEA, 0xC9, 0x4E, 0x29, 0x1F, 0x06, 0x19, 0x06, 0xAD, 0x65, 0x15, 0x86,
			0xEF, 0xBF, 0x85, 0xFC, 0x97, 0xB8, 0xD0, 0x84, 0x78, 0x04, 0xEA, 0x42, 0x20, 0xF5,
			0x11, 0x62, 0x1D, 0xBD, 0x9E, 0xBC, 0xC4, 0x77, 0x8E, 0x81, 0xB6, 0x46, 0x7A, 0x8C,
			0xF1, 0x06, 0x86, 0xBB, 0x47, 0x40, 0x8E, 0xB4, 0x27, 0x1F, 0xCC, 0x15, 0x5A, 0x33,
			0xA7, 0xAC, 0xFD, 0x47, 0xB6, 0x13, 0x96, 0xC7, 0xF7, 0xA9, 0xDB, 0xED, 0xF3, 0xC9,
			0x3E, 0x80, 0x25, 0xFA, 0x05, 0xFC, 0xC7, 0x0B, 0x32, 0x22, 0xBB, 0x78, 0x2D, 0x4A,
			0xB5, 0x6A, 0xCE, 0xCB, 0x6C, 0x5D, 0x8C, 0x62, 0x0A, 0x74, 0x02, 0xF3, 0x26, 0xA3,
			0x08, 0xC8, 0x1D, 0xC7, 0xC3, 0x37, 0x19, 0xBC, 0xC9, 0xF4, 0x36, 0x0C, 0xF6, 0xD9,
			0xDB, 0x27, 0xF2, 0x37, 0x05, 0xF0, 0xCB, 0x2C, 0x7E, 0x71, 0xF0, 0xD9, 0x43, 0x7F,
			0x5F, 0x98, 0x49, 0x33, 0x6E, 0x46, 0xFC, 0x2F, 0x79, 0x58, 0x9E, 0xD0, 0x71, 0x8C,
			0xCB, 0x92, 0x7D, 0x1B, 0x45, 0x3E, 0xF7, 0x51, 0x65, 0x5E, 0x7C, 0xA7, 0xAE, 0x27,
			0xD0, 0x79, 0x43, 0x48, 0xE8, 0x17, 0x00, 0xA2, 0x5A, 0x90, 0x97, 0x72, 0x54, 0x9D,
			0x85, 0x7D, 0xF6, 0xAF, 0x82, 0xC9, 0x7F, 0xA3, 0x10, 0xCA, 0xC2, 0xCD, 0xD9, 0x4E,
			0xF0, 0x1D, 0x0A, 0xDD, 0x86, 0x4C, 0xDB, 0x63, 0xAF, 0xD6, 0xC8, 0x61, 0xE5, 0x3A,
			0x70, 0x0B, 0x19, 0xE8, 0x3C, 0xE1, 0xC8, 0x2A, 0xD7, 0xF1, 0xCA, 0xEC, 0xA0, 0x8F,
			0x65, 0x79, 0xDC, 0x62, 0xC2, 0x82, 0xA1, 0x9D, 0xF4, 0x15, 0xF8, 0x80, 0x9F, 0xAF,
			0x40, 0x61, 0x0F, 0xE8, 0x6E, 0x90, 0xAB, 0x10, 0x08, 0x07, 0x3A, 0xA1, 0x9F, 0xBB,
			0x33, 0xE9, 0xAF, 0x63, 0xFC, 0x29, 0x06, 0x78, 0x10, 0x8C, 0xC2, 0x65, 0x55, 0xA3,
			0xB7, 0x79, 0xBD, 0xBD, 0x81, 0x42, 0xE6, 0xD0, 0x93, 0x22, 0xB5, 0x0E, 0x25, 0xC3,
			0x7F, 0x4E, 0x7D, 0x31, 0x37, 0x8B, 0x4F, 0x9E, 0x18, 0x84, 0xAC, 0x32, 0xBF, 0xDC,
			0x19, 0xDE, 0x3F, 0x1F, 0xB4, 0xE2, 0x01, 0xC8, 0x6E, 0x12, 0x26, 0xCA, 0xFB, 0x68,
			0xC5, 0x08, 0xCB, 0xC4, 0x02, 0x68, 0x4D, 0xD6, 0xF2, 0x97, 0x7E, 0x2F, 0x71, 0xE7,
			0x4C, 0x4D, 0x24, 0x92, 0x33, 0x70, 0xB7, 0x83, 0x18, 0x0A, 0x1C, 0xB6, 0xED, 0x3E,
			0x4F, 0x55, 0xF9, 0x25, 0x57, 0x87, 0x10, 0xA8, 0x28, 0x59, 0xEB, 0xD9, 0x3C, 0x7C,
			0x89, 0x71, 0x7E, 0x88, 0xB6, 0x1B, 0x57, 0x03, 0x31, 0x54, 0x7D, 0xB4, 0x28, 0x56,
			0xA1, 0x6C, 0xE8, 0x6D, 0x35, 0xB6, 0x05, 0xAE, 0x82, 0x7A, 0xB2, 0xDF, 0xCB, 0x65,
			0xA3, 0x29, 0x4C, 0x3B, 0xFC, 0xAA, 0x6D, 0x5D, 0x0C, 0x75, 0x90, 0xF1, 0xF3, 0x03,
			0xC1, 0xD0, 0x59, 0xF3, 0x6E, 0x53, 0x8C, 0x49, 0xB0, 0x62, 0xAD, 0xD4, 0x23, 0x19,
			0xBB, 0x32, 0x35, 0xE8, 0xEF, 0x38, 0xAB, 0x89, 0x80, 0xE4, 0x05, 0x86, 0x02, 0x40,
			0xCC, 0xE0, 0xF4, 0x16, 0x91, 0x15, 0x15, 0x2E, 0x07, 0x75, 0x86, 0xBA, 0x59, 0x9F,
			0x12, 0xE0, 0x5E, 0x1B, 0xF5, 0xC5, 0x28, 0x7A, 0xCF, 0x3B, 0x8B, 0xCB, 0xA9, 0xA9,
			0xDB, 0xF0, 0xD3, 0xF4, 0xCE, 0x49, 0x6E, 0xF7, 0x57, 0x58, 0x4D, 0x4C, 0xA9, 0x0C,
			0x35, 0x50, 0xB4, 0x7C, 0x34, 0x72, 0x3D, 0xDA, 0x70, 0x2D, 0xFF, 0x45, 0xE2, 0x6E,
			0x3E, 0x5F, 0xDD, 0x3E, 0xE9, 0x53, 0x60, 0x44, 0x39, 0x60, 0xC3, 0x99, 0x57, 0x7B,
			0xEE, 0xD4,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x38, 0xA1, 0x38, 0x44, 0x00, 0xC6, 0xFD, 0xED, 0x20, 0x7F, 0x1B, 0xDD, 0xB3, 0x9E,
				0x81, 0xBB, 0x1E, 0xD4, 0xAC, 0x2A, 0x5B, 0xED, 0x5A, 0x06, 0x63, 0x01, 0x47, 0xB2,
				0xB5, 0x4B, 0x02, 0xF4, 0x3E, 0x57, 0xCB, 0xDD, 0xAF, 0x15, 0x57, 0xC1, 0xA7, 0xB0,
				0x0E, 0x0A, 0x04, 0x21, 0x83, 0xDE, 0x9B, 0xC1, 0xAF, 0x46, 0x18, 0x0C, 0x20, 0x7E,
				0x02, 0xEB, 0x02, 0xD4, 0x36, 0xD0, 0xB1, 0x52, 0x61, 0x17, 0x78, 0x3C, 0xD5, 0xFC,
				0x2D, 0xD6, 0xF7, 0xF2, 0xD7, 0x6D, 0x27, 0xE6, 0xAB, 0x84, 0x82, 0x08, 0x1D, 0xCB,
				0x55, 0x32, 0x8F, 0x17, 0x34, 0x11, 0xB3, 0x5A, 0x54, 0x38, 0x29, 0x6B, 0xAF, 0xF5,
				0x6A, 0x14, 0xFA, 0xB9, 0x95, 0x99, 0xDF, 0xFC, 0x47, 0x7A, 0xE8, 0xD3, 0xFA, 0xD6,
				0xD1, 0xD7, 0x1B, 0xD4, 0x64, 0x27, 0x98, 0x16, 0xC8, 0x08, 0x68, 0x96, 0x66, 0x90,
				0x8C, 0x9E, 0x30, 0x19, 0x48, 0x23, 0x44, 0x2D, 0xBF, 0x53, 0x3C, 0xD2, 0xF8, 0x41,
				0x41, 0x67, 0x6E, 0xAC, 0x29, 0x7C, 0x2F, 0x8D, 0xD2, 0x56, 0xFE, 0x8C, 0x80, 0xA5,
				0xDA, 0xA9, 0x3F, 0x45, 0x6F, 0x7B, 0xF1, 0x6E, 0x12, 0x04, 0x1A, 0xF1, 0xDF, 0x61,
				0x6F, 0x1B, 0xE3, 0x39, 0x67, 0x18, 0x17, 0xF0, 0xAF, 0xA7, 0xEB, 0x1E, 0x3C, 0xBB,
				0x89, 0x25, 0x44, 0x18, 0x92, 0xFA, 0x2D, 0x00, 0x8C, 0x3A, 0xDD, 0xF8, 0x83, 0x64,
				0x65, 0xE0, 0xEC, 0x39, 0xEC, 0x9E, 0x1C, 0x10, 0xCD, 0xCB, 0xCB, 0x25, 0x01, 0x44,
				0xF4, 0x56, 0x3B, 0x44, 0xAC, 0x15, 0x6D, 0x16, 0x4E, 0xBC, 0x20, 0xC7, 0xBE, 0xFA,
				0x2F, 0x61, 0x6A, 0x01, 0xE7, 0x31, 0xC7, 0x46, 0xED, 0x10, 0xBC, 0x64, 0xE3, 0x3C,
				0x14, 0x90, 0x47, 0x6D, 0xD9, 0xF8, 0x12, 0x13, 0xD2, 0xF9, 0x69, 0x0F, 0xC7, 0x26,
				0x37, 0xEC, 0x9C, 0x64, 0x9D, 0xA8, 0xB3, 0x04, 0xBF, 0xB0, 0x4B, 0xE1, 0xFA, 0x63,
				0x1C, 0x80, 0xC0, 0x3C, 0xA3, 0x67, 0xA8, 0x62, 0x85, 0x23, 0x05, 0xA5, 0xD0, 0x3A,
				0x17, 0x6F, 0xE5, 0x73, 0x8A, 0x3B, 0xA1, 0x3D, 0x7F, 0xC0, 0x78, 0xA8, 0x62, 0x40,
				0x3C, 0xC0, 0x2C, 0xE6, 0x1E, 0x4E, 0x8C, 0x7E, 0xD4, 0xC7, 0xA8, 0x20, 0x34, 0x53,
				0x59, 0x6C, 0xB4, 0x6E, 0xEF, 0x6F, 0x86, 0xE7, 0x7A, 0xC1, 0x30, 0xE8, 0x47, 0x44,
				0xD6, 0x4E, 0xDB, 0xB3, 0xB3, 0x4F, 0x65, 0x26, 0x97, 0x16, 0x3F, 0x57, 0x04, 0x20,
				0xA9, 0xFE, 0x2E, 0x56, 0x59, 0x85, 0x0D, 0x68, 0xCB, 0x41, 0x23, 0x25, 0x0A, 0x43,
				0x24, 0xD9, 0x7C, 0xE2, 0x46, 0x54, 0xD1, 0xE7, 0xC6, 0x57, 0xC8, 0xF5, 0x2E, 0x2E,
				0x33, 0xDF, 0x68, 0xAB, 0xEA, 0x7A, 0xAF, 0x76, 0xDF, 0xCE, 0x15, 0x1D, 0x4E, 0x5A,
				0x3B, 0x45, 0xCE, 0xF1, 0xBA, 0x56, 0xAE, 0x3A, 0x90, 0xB5, 0x6C, 0xD1, 0x39, 0x54,
				0x7E, 0xC5, 0xEC, 0xEF, 0xAA, 0x96, 0xF5, 0x60, 0x40, 0x7A, 0x0D, 0x37, 0xCE, 0x8E,
				0x40, 0x61, 0x44, 0x26, 0xE3, 0x88, 0x90, 0xED, 0x1A, 0xED, 0x46, 0x29, 0x27, 0xCC,
				0x03, 0xC6, 0xF9, 0x33, 0x79, 0x38, 0xD2, 0x3E, 0x31, 0x14, 0x6A, 0x43, 0xA6, 0xE1,
				0x1A, 0x18, 0x39, 0xC6, 0x56, 0x1B, 0x03, 0x1E, 0xEE, 0xF8, 0xD3, 0xD5, 0xF0, 0xC8,
				0x38, 0xB9, 0x60, 0x5F, 0x1A, 0xFC, 0x20, 0xEF, 0xED, 0x35, 0x9E, 0x5E, 0x64, 0x8A,
				0x89, 0xF1, 0xD7, 0x84, 0xC3, 0xD7, 0x9B, 0x74, 0x9A, 0xC9, 0x34, 0x3F, 0xB2, 0x77,
				0xD5, 0x3B, 0x06, 0x0E, 0x12, 0x57, 0x8B, 0xCD, 0x8A, 0x48, 0xBC, 0x20, 0x6C, 0x45,
				0x94, 0x94, 0x71, 0x02, 0x8B, 0xCD, 0x94, 0x94, 0x67, 0x3B, 0x18, 0x4A, 0x81, 0x87,
				0x5A, 0x7E, 0xB2, 0xC8, 0x6F, 0x2E, 0x23, 0xC1, 0xEC, 0x8D, 0x5A, 0xB6, 0x46, 0x4A,
				0xC5, 0x58, 0xD3, 0xEA, 0x42, 0x67, 0x89, 0xFA, 0x15, 0x91, 0x21, 0xBB, 0x4D, 0xE3,
				0x6B, 0xC0, 0xF4, 0xF0, 0x96, 0xF4, 0xBE, 0x1D, 0x02, 0x55, 0xF5, 0x40, 0x19, 0x7F,
				0xC7, 0x4D, 0x27, 0x0B, 0xFF, 0xC6, 0xCA, 0xD0, 0xC9, 0x11, 0x67, 0xD7, 0x3F, 0x80,
				0x57, 0x10, 0x8F, 0x1A, 0xD4, 0x7D, 0x00, 0x19, 0xC8, 0x7F, 0xE8, 0x0B, 0x35, 0x05,
				0x53, 0x71, 0xE0, 0xE5, 0x20, 0xD0, 0xE9, 0x1B, 0x89, 0x99, 0x01, 0x14, 0x50, 0xA5,
				0x90, 0x95, 0xEF, 0x02, 0x7A, 0x4E, 0x05, 0x8B, 0xD6, 0xFA, 0x97, 0xA9, 0xFD, 0xD6,
				0x1B, 0x42, 0x30, 0x4E, 0x90, 0x6E, 0x4D, 0x9B, 0xAD, 0x95, 0xEC, 0xB1, 0x09, 0x50,
				0x78, 0x49, 0xD3, 0x93, 0xC1, 0x62, 0x55, 0xD5, 0x7F, 0x1B, 0x82, 0x6C, 0x91, 0x0B,
				0xAA, 0x31, 0xBB, 0x06, 0x9E, 0xD6, 0x6D, 0x5F, 0xF2, 0x6B, 0xAC, 0x9E, 0xE0, 0x4F,
				0xD3, 0xA4, 0x17, 0x61, 0xC8, 0xD7, 0xF2, 0xE5, 0x8F, 0xA8, 0xD2, 0x62, 0x0A, 0xE2,
				0xC9, 0x56, 0x7D, 0x0A, 0x43, 0x9D, 0x08, 0x78, 0x25, 0x93, 0x59, 0x8E, 0xFA, 0x33,
				0x3B, 0xC1, 0x36, 0x15, 0x81, 0xE4, 0xC0, 0xE1, 0x5A, 0x71, 0xBA, 0x73, 0xD4, 0x5B,
				0x92, 0x63, 0x61, 0x56, 0xCB, 0xC4, 0x6D, 0x52, 0xC5, 0xF7, 0x25, 0xB4, 0x76, 0xE1,
				0xBD, 0xE8, 0x4B, 0x36, 0xD3, 0xE0, 0x8A, 0xE2, 0x93, 0x33, 0xDA, 0xAA, 0xF3, 0x37,
				0xA8, 0xBF, 0x84, 0xB5, 0xFA, 0xC6, 0xBB, 0xDD, 0xA2, 0x98, 0x1E, 0xF6, 0x27, 0xB0,
				0x7B, 0xE3, 0x63, 0x11, 0x21, 0xB5, 0x96, 0xE3, 0xE0, 0x2D, 0xB8, 0xE1, 0xB1, 0x27,
				0x36, 0xC0, 0x9C, 0x44, 0x0E, 0xE6, 0xA9, 0x14, 0xA6, 0xB6, 0xCE, 0xD1, 0xF0, 0x0D,
				0x9D, 0x56, 0xB8, 0x62, 0x3A, 0x83, 0x1F, 0x39, 0xC4, 0xB5, 0x47, 0xA6, 0xE1, 0x3B,
				0xA4, 0x7F, 0x80, 0x21, 0x14, 0x2C, 0xD5, 0xF9, 0xCE, 0xAC, 0xDA, 0xE5, 0x1A, 0x9C,
				0xD1, 0x43, 0x1D, 0x63, 0x33, 0x64, 0xE3, 0x32, 0x01, 0x0E, 0x40, 0x8A, 0x27, 0x26,
				0xBD, 0x99, 0x52, 0xAB, 0xCE, 0x0B, 0x0C, 0x23, 0x51, 0xEC, 0x41, 0xB2, 0x4F, 0xC0,
				0x62, 0x92, 0x7C, 0x67, 0x88, 0xE6, 0xBE, 0x3A, 0xFE, 0x8B, 0x73, 0xB0, 0x18, 0x48,
				0x1D, 0x60, 0xB4, 0xE8, 0x76, 0x1D, 0x6D, 0x02, 0x18, 0x8A, 0xBD, 0x4C, 0x40, 0xE1,
				0x88, 0x42, 0x59, 0xFC, 0x55, 0x4E, 0x32, 0x56, 0x51, 0xE8, 0x4B, 0x30, 0x56, 0x70,
				0x21, 0xCE, 0x7E, 0x94, 0xCE, 0x3D, 0x0A, 0x46, 0x01, 0xF4, 0xF9, 0x12, 0x0F, 0x08,
				0x93, 0xD8, 0xD5, 0xC0, 0x0D, 0x8F, 0x7B, 0xB3, 0x62, 0x80, 0xB1, 0xAD, 0x8F, 0x7E,
				0xB7, 0x14, 0xF9, 0x46, 0x27, 0x08, 0xAD, 0xE2, 0x31, 0xE5, 0x25, 0x28, 0xD6, 0x95,
				0xD3, 0x42, 0x03, 0xC4, 0x8D, 0x87, 0xDA, 0xC9, 0x4E, 0x8B, 0x81, 0x33, 0xDE, 0x28,
				0xF4, 0xBB, 0x11, 0xF7, 0x45, 0xE4, 0x2B, 0x7B, 0x22, 0xF8, 0x8A, 0xF0, 0x4F, 0x0F,
				0x97, 0x34, 0xD3, 0x82, 0x0D, 0xB8, 0x29, 0xFF, 0xCA, 0xE3, 0x8B, 0xD2, 0x9E, 0x11,
				0xD1, 0x79, 0xDF, 0x3F, 0xF7, 0xB3, 0x2F, 0x57, 0xD3, 0x40, 0x0D, 0x93, 0x57, 0xD1,
				0x66, 0x96, 0x17, 0xC5, 0x08, 0xB4, 0x5F, 0x25, 0xC3, 0xAE, 0x27, 0x5F, 0x32, 0xD5,
				0x84, 0xEF, 0x11, 0xEA, 0x28, 0x9A, 0x2A, 0x0D, 0xC1, 0xA8, 0xC8, 0x29, 0xB0, 0x12,
				0x14, 0x87, 0xE7, 0xF4, 0x26, 0xA8, 0x12, 0xA9, 0x42, 0x38, 0x93, 0xB2, 0xD6, 0xD8,
				0xE7, 0x97, 0x60, 0x97, 0xD1, 0xC5, 0x12, 0x31, 0xCF, 0x13, 0x19, 0xF4, 0x80, 0x70,
				0x6A, 0xD1, 0x8F, 0xA7, 0x14, 0x6B, 0x30, 0xC2, 0xAA, 0xBE, 0xA4, 0x70, 0x04, 0xFC,
				0x40, 0x45, 0x10, 0x5C, 0x27, 0xED, 0xD2, 0x26, 0xC4, 0xB9, 0x63, 0x71, 0x79, 0xF8,
				0x74, 0x97, 0x01, 0x5F, 0xFC, 0x69, 0xFB, 0xBD, 0x1F, 0xDA, 0x8B, 0x54, 0x1A, 0x09,
				0x02, 0x96, 0xA9, 0xD8, 0x81, 0xFC, 0xF1, 0x98, 0x10, 0x80, 0xA8, 0x15, 0xE9, 0x4F,
				0xFD, 0x17, 0x54, 0x3B, 0xB9, 0xD4, 0x3C, 0x83, 0xB2, 0x18, 0x5A, 0x48, 0xCD, 0xCA,
				0x06, 0xF7, 0x12, 0x1D, 0x41, 0x0E, 0x9E, 0x16, 0x8F, 0x2E, 0x3F, 0x8D, 0x1F, 0xD6,
				0x66, 0x29, 0xC9, 0xDA, 0x28, 0xEC, 0xB9, 0x82, 0x5D, 0x83, 0x72, 0x0A, 0x7D, 0x20,
				0x4E, 0xE2, 0x99, 0x1A, 0x2E, 0xB4, 0x5D, 0x5A, 0x76, 0x30, 0x60, 0x3A, 0x27, 0x36,
				0xF3, 0xBC, 0x9D, 0xF9, 0xDE, 0xE8, 0xF7, 0x7E, 0x02, 0x9E, 0xB5, 0xD8, 0x39, 0xA1,
				0x20, 0xCA, 0xFE, 0x58, 0xC2, 0xC1, 0xC2, 0x08, 0xD7, 0x0A, 0xE8, 0xC6, 0x63, 0xE0,
				0x22, 0x6F, 0x18, 0x91, 0x11, 0xD3, 0x84, 0x54, 0x2F, 0x96, 0x21, 0x2A, 0x09, 0x21,
				0xD3, 0x00, 0xE0, 0x4C, 0x46, 0xC4, 0xA3, 0xB0, 0xBB, 0x14, 0xF1, 0xEA, 0x1F, 0x58,
				0x57, 0x06, 0x3D, 0xF5, 0x51, 0x18, 0x9E, 0x60, 0x1D, 0x57, 0xCE, 0x7B, 0x59, 0x3F,
				0x67, 0x26, 0x9F, 0xCE, 0x82, 0x90, 0xA4, 0xFB, 0x54, 0x05, 0x47, 0x02, 0x35, 0xA8,
				0x01, 0x0B, 0xF1, 0xB7, 0x63, 0xF6, 0x48, 0x07, 0xA1, 0x74, 0x05, 0xA5, 0x5A, 0x35,
				0x09, 0x6C, 0x1F, 0xD8, 0x84, 0xDF, 0x1B, 0x95, 0xBD, 0x95, 0x80, 0x52, 0xCB, 0x5C,
				0x92, 0x9C,
				// endregion
			],
			&SRC,
			1234,
		);
	}
	// endregion

	// region: ft_memcpy_28
	#[test]
	fn ft_memcpy_28() {
		const SRC: [u8; 144] = [
			// region: SRC
			0xE4, 0x58, 0x01, 0xF3, 0x75, 0x68, 0xC7, 0xF4, 0x59, 0xC0, 0x8B, 0x91, 0xE5, 0x70,
			0xCE, 0x63, 0x4D, 0x5D, 0x2C, 0xAE, 0x0E, 0x6B, 0xAF, 0x45, 0x3C, 0xEE, 0xE5, 0x96,
			0x94, 0x80, 0x0E, 0x93, 0x02, 0xB2, 0xF2, 0x21, 0xAA, 0x0D, 0x41, 0xAA, 0x14, 0x31,
			0x19, 0x96, 0xD9, 0x1E, 0xE5, 0x99, 0xA1, 0xAE, 0xA9, 0x02, 0x66, 0x56, 0x43, 0x0A,
			0x5D, 0xB8, 0xBF, 0xDB, 0xFF, 0x58, 0x82, 0xAC, 0x38, 0x40, 0xD7, 0xB1, 0x98, 0x05,
			0xEA, 0x0C, 0xCF, 0x57, 0xE5, 0xD8, 0x6B, 0xC3, 0x55, 0x0F, 0xCB, 0xB0, 0x03, 0xD2,
			0xE7, 0x11, 0x53, 0x68, 0x1B, 0x38, 0x5A, 0x7A, 0xBE, 0x67, 0xF8, 0x8D, 0x79, 0xBB,
			0xFB, 0x07, 0xC0, 0x01, 0x44, 0xDA, 0x0A, 0x57, 0xDF, 0x72, 0x31, 0xD9, 0x56, 0xB0,
			0x09, 0xBC, 0x37, 0x7B, 0xAA, 0x97, 0x31, 0x39, 0xE8, 0xD0, 0xF9, 0x30, 0x5B, 0x7D,
			0xB3, 0x11, 0xF6, 0xCC, 0x55, 0x01, 0xFB, 0xE0, 0xD5, 0x0B, 0xFE, 0xBF, 0xDE, 0x83,
			0xB9, 0x42, 0x22, 0x41,
			// endregion
		];

		helper(
			&mut [
				// region: dst
				0x17, 0x12, 0x8D, 0x45, 0xCE, 0xDF, 0xE7, 0xCB, 0x4F, 0x84, 0x7F, 0x0C, 0xFC, 0xCE,
				0xC5, 0x10, 0x54, 0x98, 0x1F, 0x67, 0x8C, 0x92, 0xF6, 0xB4, 0x93, 0xD8, 0x14, 0xE0,
				0xA9, 0x68, 0x64, 0xC7, 0xE9, 0x48, 0x26, 0x06, 0x06, 0x74, 0xA8, 0x32, 0xB8, 0x4A,
				0x94, 0x41, 0xC4, 0xD5, 0x19, 0xF1, 0xF9, 0xEB, 0x34, 0x1B, 0x18, 0x19, 0xCF, 0xB3,
				0x9C, 0xF9, 0xAB, 0x9F, 0x4A, 0x2E, 0x1D, 0x11, 0xAD, 0xC4, 0xC7, 0x7E, 0x4C, 0x9E,
				0x99, 0xF0, 0x48, 0x89, 0x4A, 0x34, 0x1D, 0x85, 0xEA, 0x31, 0xF0, 0xB9, 0x4C, 0xE2,
				0xA9, 0x94, 0x74, 0x2B, 0xF1, 0xC2, 0x7A,
				// endregion
			],
			&SRC,
			91,
		);
	}
	// endregion
}
