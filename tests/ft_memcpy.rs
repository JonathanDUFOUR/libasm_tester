#[cfg(test)]
mod tests {
	use std::ffi::c_void;

	#[link(name = "asm")]
	extern "C" {
		fn ft_memcpy(dst: *mut c_void, src: *const c_void, n: usize) -> *mut c_void;
	}

	#[inline(always)]
	fn unit_test_helper(dst: &mut [u8], src: &[u8], n: usize) {
		assert!(n <= dst.len(), "copy would overflow dst");
		assert!(n <= src.len(), "copy would overflow src");

		let initial_last_bytes_of_dst: Vec<u8> = dst[n..].to_vec();

		assert_eq!(
			unsafe { ft_memcpy(dst.as_mut_ptr() as *mut c_void, src.as_ptr() as *const c_void, n) },
			dst.as_mut_ptr() as *mut c_void
		);
		assert_eq!(dst[..n], src[..n]);
		assert_eq!(dst[n..], initial_last_bytes_of_dst);
	}

	// region: ft_memcpy_00
	#[test]
	fn ft_memcpy_00() {
		const SRC: [u8; 0] = [];

		let mut dst: [u8; 0] = [];

		unit_test_helper(&mut dst, &SRC, 0);
	}
	// endregion

	// region: ft_memcpy_01
	#[test]
	fn ft_memcpy_01() {
		const SRC: [u8; 2] = [0xdd, 0x93];

		let mut dst: [u8; 2] = [0x08, 0x86];

		unit_test_helper(&mut dst, &SRC, 1);
	}
	// endregion

	// region: ft_memcpy_02
	#[test]
	fn ft_memcpy_02() {
		const SRC: [u8; 3] = [0x1c, 0x2a, 0xd3];

		let mut dst: [u8; 3] = [0x31, 0xbe, 0x7c];

		unit_test_helper(&mut dst, &SRC, 2);
	}
	// endregion

	// region: ft_memcpy_03
	#[test]
	fn ft_memcpy_03() {
		const SRC: [u8; 4] = [0x93, 0x86, 0xe7, 0xbc];

		let mut dst: [u8; 4] = [0xa1, 0x7e, 0x53, 0x19];

		unit_test_helper(&mut dst, &SRC, 3);
	}
	// endregion

	// region: ft_memcpy_04
	#[test]
	fn ft_memcpy_04() {
		const SRC: [u8; 5] = [0x57, 0x14, 0xec, 0x3b, 0x08];

		let mut dst: [u8; 5] = [0x62, 0x2b, 0x69, 0xbe, 0x44];

		unit_test_helper(&mut dst, &SRC, 4);
	}
	// endregion

	// region: ft_memcpy_05
	#[test]
	fn ft_memcpy_05() {
		const SRC: [u8; 6] = [0x27, 0x65, 0x2e, 0xb5, 0x40, 0x1f];

		let mut dst: [u8; 6] = [0x85, 0x48, 0x98, 0xf5, 0x59, 0xe4];

		unit_test_helper(&mut dst, &SRC, 5);
	}
	// endregion

	// region: ft_memcpy_06
	#[test]
	fn ft_memcpy_06() {
		const SRC: [u8; 7] = [0x76, 0xa6, 0xea, 0x3e, 0x0f, 0x56, 0x73];

		let mut dst: [u8; 7] = [0xf9, 0x94, 0xa2, 0xad, 0xe5, 0x4b, 0xa8];

		unit_test_helper(&mut dst, &SRC, 6);
	}
	// endregion

	// region: ft_memcpy_07
	#[test]
	fn ft_memcpy_07() {
		const SRC: [u8; 8] = [0x9e, 0x96, 0xa6, 0xcd, 0xa9, 0x5f, 0x17, 0xe2];

		let mut dst: [u8; 8] = [0x23, 0xe2, 0x3e, 0xee, 0x71, 0xae, 0xa7, 0xba];

		unit_test_helper(&mut dst, &SRC, 7);
	}
	// endregion

	// region: ft_memcpy_08
	#[test]
	fn ft_memcpy_08() {
		const SRC: [u8; 9] = [0xa9, 0xa4, 0xa4, 0x79, 0xd9, 0x8e, 0x47, 0x9a, 0x12];

		let mut dst: [u8; 9] = [0xd0, 0x77, 0x77, 0xa9, 0x8f, 0x7d, 0x63, 0x60, 0x50];

		unit_test_helper(&mut dst, &SRC, 8);
	}
	// endregion

	// region: ft_memcpy_09
	#[test]
	fn ft_memcpy_09() {
		const SRC: [u8; 10] = [0x40, 0x32, 0x5d, 0x52, 0x19, 0xae, 0x39, 0x54, 0x18, 0x71];

		let mut dst: [u8; 10] = [0xd5, 0x72, 0xcd, 0xaa, 0xb6, 0x3f, 0x39, 0xb1, 0x6c, 0x73];

		unit_test_helper(&mut dst, &SRC, 9);
	}
	// endregion

	// region: ft_memcpy_10
	#[test]
	fn ft_memcpy_10() {
		const SRC: [u8; 11] = [0x46, 0x8f, 0xba, 0x8a, 0x4f, 0xa9, 0x5f, 0x28, 0xe3, 0xed, 0x8d];

		let mut dst: [u8; 11] = [0xe8, 0x8c, 0xbd, 0xdb, 0x88, 0xba, 0xcc, 0x89, 0xc0, 0xe6, 0x15];

		unit_test_helper(&mut dst, &SRC, 10);
	}
	// endregion

	// region: ft_memcpy_11
	#[test]
	fn ft_memcpy_11() {
		const SRC: [u8; 12] = [
			// region: SRC
			0xcc, 0xa2, 0x60, 0x70, 0x02, 0x65, 0x8f, 0x08, 0xe0, 0x8a, 0xa8, 0x29,
			// endregion
		];

		let mut dst: [u8; 12] = [
			// region: dst
			0xea, 0xf3, 0x93, 0x0d, 0xd1, 0x5d, 0x82, 0x8f, 0x67, 0x5d, 0x8a, 0xcc,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 11);
	}
	// endregion

	// region: ft_memcpy_12
	#[test]
	fn ft_memcpy_12() {
		const SRC: [u8; 13] = [
			// region: SRC
			0x13, 0xcb, 0x0d, 0xdb, 0x54, 0x8b, 0x82, 0x4b, 0xba, 0xe5, 0xb7, 0xfd,
			0xd0,
			// endregion
		];

		let mut dst: [u8; 13] = [
			// region: dst
			0x45, 0xf6, 0x92, 0x4e, 0xa0, 0x90, 0x99, 0xe7, 0xd5, 0x32, 0xa4, 0x26,
			0xec,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 12);
	}
	// endregion

	// region: ft_memcpy_13
	#[test]
	fn ft_memcpy_13() {
		const SRC: [u8; 14] = [
			// region: SRC
			0x6d, 0x81, 0xab, 0xfe, 0xfa, 0x4c, 0x67, 0xa6, 0xb1, 0x93, 0xd6, 0xa2, 0x30,
			0x38,
			// endregion
		];

		let mut dst: [u8; 14] = [
			// region: dst
			0x67, 0x17, 0xc6, 0x86, 0xf8, 0x57, 0x2e, 0x7e, 0xd5, 0x7f, 0x43, 0x83, 0xe7,
			0x91,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 13);
	}
	// endregion

	// region: ft_memcpy_14
	#[test]
	fn ft_memcpy_14() {
		const SRC: [u8; 15] = [
			// region: SRC
			0x23, 0xf6, 0xfd, 0x03, 0x52, 0x22, 0x03, 0x38, 0x01, 0x5c, 0x20, 0xaf, 0xb1, 0xdb,
			0xc2,
			// endregion
		];

		let mut dst: [u8; 15] = [
			// region: dst
			0x48, 0x59, 0x0e, 0xbb, 0xc4, 0x41, 0x41, 0xe6, 0x07, 0xff, 0x03, 0x01, 0x62, 0x7b,
			0xb2,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 14);
	}
	// endregion

	// region: ft_memcpy_15
	#[test]
	fn ft_memcpy_15() {
		const SRC: [u8; 16] = [
			// region: SRC
			0x49, 0xea, 0xe5, 0x17, 0xee, 0x3d, 0x05, 0x8c, 0x0b, 0xd9, 0x69, 0xb4, 0x92, 0x51,
			0x40, 0xdd,
			// endregion
		];

		let mut dst: [u8; 16] = [
			// region: dst
			0xb8, 0x7b, 0x7a, 0x8a, 0x48, 0x7a, 0xaa, 0x51, 0x0e, 0xe3, 0xe4, 0x07, 0x32, 0x55,
			0x68, 0xb5,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 15);
	}
	// endregion

	// region: ft_memcpy_16
	#[test]
	fn ft_memcpy_16() {
		const SRC: [u8; 33] = [
			// region: SRC
			0xd4, 0x22, 0x78, 0xf4, 0xf0, 0xb8, 0xd7, 0xa0, 0x03, 0x2b, 0x84, 0xd3, 0x0b, 0xbc,
			0x55, 0xd0, 0xd4, 0x46, 0x44, 0xd3, 0x67, 0xd4, 0xf2, 0x17, 0x1b, 0x63, 0xca, 0xa2,
			0x0f, 0x5e, 0x9d, 0x22, 0xf4,
			// endregion
		];

		let mut dst: [u8; 33] = [
			// region: dst
			0x9b, 0x36, 0x24, 0xec, 0x53, 0x08, 0x64, 0xd7, 0x65, 0x87, 0xdf, 0x0e, 0x4e, 0x8c,
			0x63, 0x58, 0xc3, 0x8f, 0x51, 0x6f, 0xf3, 0x34, 0x8b, 0x09, 0x45, 0x24, 0x9a, 0xc0,
			0xc8, 0xf5, 0x96, 0x61, 0x70,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 32);
	}
	// endregion

	// region: ft_memcpy_17
	#[test]
	fn ft_memcpy_17() {
		const SRC: [u8; 26] = [
			// region: SRC
			0xa3, 0x05, 0x95, 0xb1, 0xe6, 0x2c, 0xff, 0x1b, 0x14, 0xab, 0x56, 0x19, 0xe1, 0xc6,
			0x86, 0xa9, 0x44, 0x75, 0xc3, 0xc5, 0x96, 0x8f, 0xc6, 0x2d, 0x22,
			0xa4,
			// endregion
		];

		let mut dst: [u8; 26] = [
			// region: dst
			0x4b, 0x1c, 0x7c, 0xf5, 0x26, 0xcd, 0xde, 0x23, 0x49, 0x18, 0xb6, 0x35, 0x5d, 0x9d,
			0x8d, 0x67, 0xf0, 0x4c, 0xeb, 0x07, 0x0f, 0x44, 0x49, 0x89, 0xc7,
			0xdc,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 25);
	}
	// endregion

	// region: ft_memcpy_18
	#[test]
	fn ft_memcpy_18() {
		const SRC: [u8; 43] = [
			// region: SRC
			0xfc, 0x3b, 0x38, 0xe3, 0xc7, 0xc8, 0xff, 0x31, 0xa4, 0xa4, 0x93, 0x8f, 0x5d, 0x54,
			0xec, 0xf6, 0xc0, 0xd4, 0xbb, 0xe2, 0x89, 0x44, 0x86, 0xaf, 0x57, 0xc3, 0xf1, 0x73,
			0xac, 0x3d, 0x31, 0x7d, 0x2c, 0x85, 0x31, 0xbf, 0x83, 0xbc, 0xba, 0xc3, 0xf9, 0xf1,
			0x60,
			// endregion
		];

		let mut dst: [u8; 43] = [
			// region: dst
			0x6a, 0x1b, 0xa9, 0x51, 0x9f, 0xd6, 0x71, 0x3e, 0x36, 0x57, 0x1e, 0x9b, 0x29, 0x9d,
			0x3f, 0x28, 0x84, 0xa5, 0x51, 0xd4, 0x34, 0xc1, 0x70, 0xf9, 0xcb, 0xc1, 0x78, 0xfe,
			0x18, 0x0f, 0x96, 0x1e, 0x1f, 0xe9, 0xb7, 0x97, 0x7b, 0x30, 0x62, 0x20, 0x25, 0x65,
			0x7d,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 42);
	}
	// endregion

	// region: ft_memcpy_19
	#[test]
	fn ft_memcpy_19() {
		const SRC: [u8; 20] = [
			// region: SRC
			0x59, 0xb6, 0x48, 0x06, 0x65, 0x8b, 0x4d, 0x2c, 0x4a, 0x9e, 0xf5, 0x0c, 0x95, 0xc7,
			0x4f, 0xa4, 0xb9, 0x9b, 0x42, 0xcc,
			// endregion
		];

		let mut dst: [u8; 20] = [
			// region: dst
			0xb8, 0x88, 0x64, 0x15, 0xd2, 0x44, 0xf9, 0xef, 0xfa, 0x35, 0xb0, 0xb4, 0x54, 0x2e,
			0xc3, 0xd4, 0x2e, 0x28, 0xa7, 0xf6,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 19);
	}
	// endregion

	// region: ft_memcpy_20
	#[test]
	fn ft_memcpy_20() {
		const SRC: [u8; 61] = [
			// region: SRC
			0xb8, 0x37, 0xd5, 0xae, 0x9b, 0xfc, 0x02, 0x98, 0x57, 0x2f, 0xca, 0xa7, 0x1b, 0x46,
			0xb9, 0xa2, 0xdd, 0x49, 0x5f, 0x88, 0xf3, 0x28, 0xdf, 0xdb, 0x21, 0x5b, 0xf1, 0x44,
			0xef, 0x57, 0xdd, 0xfb, 0x46, 0xf5, 0x60, 0x35, 0xdc, 0x49, 0x6c, 0x59, 0x60, 0x37,
			0x4e, 0x55, 0x08, 0x1a, 0x61, 0x1d, 0x03, 0xcc, 0xd7, 0x1b, 0xae, 0xc7, 0x82, 0x70,
			0xb9, 0x01, 0x44, 0x13, 0x8a,
			// endregion
		];

		let mut dst: [u8; 61] = [
			// region: dst
			0x70, 0x40, 0x95, 0xb3, 0x10, 0x65, 0x6b, 0xbe, 0xaa, 0xb2, 0xaa, 0xf1, 0xcf, 0x8f,
			0xf1, 0x59, 0x6c, 0xb9, 0x2a, 0x0b, 0x68, 0xf8, 0x5d, 0xcd, 0x60, 0x9f, 0x2b, 0xa0,
			0xa0, 0x08, 0x4f, 0x14, 0x38, 0x16, 0x89, 0x11, 0x89, 0x84, 0x60, 0x7e, 0xb3, 0xb1,
			0xec, 0x5b, 0xff, 0x31, 0x2f, 0x17, 0xf4, 0x6b, 0x14, 0x41, 0x2c, 0x43, 0x2a, 0xc3,
			0xdc, 0xee, 0xeb, 0x8a, 0x56,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 60);
	}
	// endregion

	// region: ft_memcpy_21
	#[test]
	fn ft_memcpy_21() {
		const SRC: [u8; 54] = [
			// region: SRC
			0x1a, 0x72, 0xb5, 0xcc, 0x77, 0x3e, 0x49, 0x8b, 0xc9, 0x67, 0x0e, 0x3d, 0x36, 0x0f,
			0x51, 0x44, 0x75, 0x9a, 0x94, 0x71, 0x2a, 0xb4, 0x89, 0xce, 0x65, 0x5e, 0x59, 0xb4,
			0x5a, 0xb6, 0x33, 0x2a, 0xe0, 0xa0, 0x3b, 0xae, 0xc7, 0x2c, 0xe8, 0x42, 0x4f, 0x82,
			0x60, 0x76, 0x90, 0xe6, 0x30, 0x0a, 0x0a, 0x9b, 0x11, 0x98, 0xd8,
			0xb1,
			// endregion
		];

		let mut dst: [u8; 54] = [
			// region: dst
			0xe6, 0xb6, 0xf1, 0x42, 0x8c, 0x03, 0x39, 0x73, 0xab, 0xe7, 0xda, 0x64, 0xe8, 0xac,
			0x44, 0x7c, 0x1c, 0x59, 0xc9, 0x20, 0x9f, 0xe6, 0xc0, 0x64, 0xd1, 0x53, 0x77, 0x7a,
			0x94, 0x47, 0x3e, 0x6d, 0x9e, 0xb1, 0xca, 0xa4, 0x44, 0xcf, 0xa6, 0x8a, 0xd8, 0x1b,
			0xf5, 0xcb, 0x71, 0xd8, 0x6a, 0x3f, 0x72, 0xab, 0xbc, 0x6c, 0x38,
			0x72,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 53);
	}
	// endregion

	// region: ft_memcpy_22
	#[test]
	fn ft_memcpy_22() {
		const SRC: [u8; 87] = [
			// region: SRC
			0x38, 0x4f, 0x03, 0xe9, 0x9f, 0xe8, 0x8e, 0x9b, 0x20, 0xad, 0x9d, 0x12, 0x6c, 0xa2,
			0x60, 0x67, 0xf0, 0x7f, 0x63, 0xbe, 0x49, 0x48, 0xcd, 0x6f, 0x54, 0xec, 0xcb, 0xbf,
			0xb0, 0xc6, 0x72, 0x82, 0xe2, 0xa6, 0xcd, 0x1e, 0x4a, 0x1f, 0x80, 0x73, 0xbe, 0x57,
			0xdc, 0xbc, 0x64, 0x8b, 0x28, 0xcb, 0x58, 0x1a, 0xc5, 0x03, 0xfe, 0x58, 0xf0, 0x6e,
			0xc8, 0x15, 0x22, 0x4a, 0x4f, 0xb4, 0xd1, 0x6e, 0x9a, 0x11, 0x38, 0x53, 0x5c, 0x2e,
			0x94, 0x24, 0xf6, 0xe1, 0x95, 0xa2, 0x39, 0x1e, 0x11, 0x53, 0x1b, 0xd8, 0xc1, 0x55,
			0x24, 0x75, 0xe7,
			// endregion
		];

		let mut dst: [u8; 87] = [
			// region: dst
			0x43, 0x83, 0x46, 0x24, 0x6d, 0xf8, 0x59, 0x81, 0x6b, 0x88, 0x56, 0x0d, 0x3c, 0x84,
			0xf2, 0xdd, 0x31, 0x30, 0x00, 0x79, 0xab, 0xcc, 0x62, 0x3d, 0x0a, 0x19, 0x39, 0xd0,
			0x5a, 0xf9, 0xbb, 0xfa, 0x30, 0x99, 0x0b, 0x47, 0xa6, 0x5c, 0x27, 0x91, 0xfc, 0xce,
			0xfc, 0x5d, 0xbc, 0xe5, 0x92, 0x48, 0x55, 0xdd, 0x41, 0xa8, 0xd6, 0xc6, 0xfd, 0xfb,
			0xfa, 0xdd, 0x24, 0x95, 0x02, 0x76, 0x36, 0x69, 0xc3, 0x9e, 0x53, 0x30, 0x5d, 0xd2,
			0x19, 0x01, 0xea, 0x80, 0x47, 0x39, 0xc4, 0x8b, 0x70, 0x98, 0x73, 0x67, 0xfa, 0x92,
			0x7d, 0x90, 0x2d,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 86);
	}
	// endregion

	// region: ft_memcpy_23
	#[test]
	fn ft_memcpy_23() {
		const SRC: [u8; 32] = [
			// region: SRC
			0x12, 0x55, 0xcb, 0xb7, 0x5e, 0x71, 0xd2, 0x08, 0x2c, 0x52, 0x6e, 0x96, 0x2f, 0x42,
			0x84, 0x21, 0xda, 0xe9, 0x69, 0x10, 0x74, 0x4f, 0x5c, 0x77, 0x29, 0xd8, 0x5e, 0x16,
			0x9f, 0xf6, 0x78, 0x35,
			// endregion
		];

		let mut dst: [u8; 32] = [
			// region: dst
			0x8d, 0x42, 0x86, 0x56, 0x51, 0x74, 0x4b, 0x89, 0x01, 0xa7, 0xf8, 0x8f, 0x0c, 0xc9,
			0x90, 0x42, 0x7d, 0x09, 0xff, 0x30, 0xdc, 0x6e, 0x29, 0x13, 0x35, 0xbb, 0x45, 0x3d,
			0x62, 0xbe, 0xff, 0x4f,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 31);
	}
	// endregion

	// region: ft_memcpy_24
	#[test]
	fn ft_memcpy_24() {
		const SRC: [u8; 4] = [0xdb, 0x06, 0x59, 0xef];

		let mut dst: [u8; 4] = [0x0e, 0x00, 0x30, 0x7c];

		unit_test_helper(&mut dst, &SRC, 0);
	}
	// endregion

	// region: ft_memcpy_25
	#[test]
	fn ft_memcpy_25() {
		const SRC: [u8; 51] = [
			// region: SRC
			0xd2, 0x58, 0xf8, 0x97, 0x00, 0x7d, 0x8f, 0x41, 0xe3, 0xf6, 0x1f, 0x69, 0x24, 0xf4,
			0x77, 0x32, 0xe2, 0x58, 0x9d, 0xc4, 0xc3, 0xde, 0x25, 0x0e, 0xa6, 0x49, 0xe8, 0xa3,
			0x8d, 0x2f, 0xe4, 0xd3, 0x38, 0x5e, 0x35, 0xad, 0x7b, 0xa5, 0xfb, 0xbe, 0x91, 0xce,
			0xf6, 0xfd, 0x86, 0xe3, 0xee, 0x2a, 0xcc, 0x87, 0xd0,
			// endregion
		];

		let mut dst: [u8; 42] = [
			// region: dst
			0xca, 0x2a, 0xd8, 0x92, 0xf0, 0x55, 0x72, 0x4c, 0x40, 0xe4, 0x32, 0x62, 0x4e, 0x29,
			0x7e, 0x03, 0x9f, 0xb6, 0xa7, 0x76, 0x0f, 0xd1, 0x1e, 0xbd, 0x59, 0x8c, 0x37, 0x04,
			0x30, 0xcd, 0xea, 0x33, 0x13, 0xaa, 0xca, 0x07, 0x63, 0x30, 0xb4, 0x4a, 0x10,
			0x8b,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 37);
	}
	// endregion

	// region: ft_memcpy_26
	#[test]
	fn ft_memcpy_26() {
		const SRC: [u8; 666] = [
			// region: SRC
			0x16, 0x63, 0xfc, 0xe6, 0x81, 0x74, 0xff, 0xcc, 0x69, 0x32, 0x3b, 0xc1, 0x06, 0x3f,
			0xa3, 0x61, 0x64, 0x23, 0x28, 0xb8, 0x09, 0xf4, 0x3b, 0x91, 0x98, 0xd6, 0x42, 0xa8,
			0xeb, 0xc9, 0xd4, 0xcc, 0xb7, 0x6f, 0x5e, 0x8a, 0x14, 0x6f, 0x17, 0xc3, 0x98, 0xd8,
			0xbd, 0xcf, 0x42, 0xb4, 0x7e, 0x25, 0x3a, 0xb7, 0xd3, 0x45, 0x4c, 0x96, 0xb7, 0x95,
			0xcf, 0xa5, 0xe0, 0x60, 0xd6, 0x93, 0x54, 0x17, 0x6c, 0x73, 0xfa, 0xaf, 0x4e, 0xbf,
			0x88, 0x7b, 0xaa, 0xaa, 0x5a, 0x27, 0x00, 0x9c, 0xa7, 0xfb, 0xd0, 0x4a, 0x70, 0xeb,
			0x27, 0xd1, 0x03, 0xf1, 0x44, 0xf6, 0xbe, 0xba, 0xc7, 0x9f, 0x5f, 0xde, 0xdb, 0x9e,
			0x75, 0x4b, 0x15, 0xaa, 0xab, 0x03, 0x70, 0xe7, 0x6d, 0x37, 0x82, 0xc0, 0x7e, 0x9e,
			0xb5, 0x2e, 0xa1, 0xe2, 0xf9, 0x06, 0x78, 0x6a, 0x88, 0x83, 0x7b, 0x45, 0xfb, 0x5a,
			0x28, 0x60, 0x44, 0x35, 0x0a, 0xbb, 0x89, 0x2c, 0x69, 0x4e, 0x3a, 0xfe, 0x8e, 0xe8,
			0xef, 0x01, 0xf9, 0x67, 0x01, 0x69, 0x9e, 0x77, 0xc7, 0xac, 0x0c, 0x94, 0xf3, 0xf1,
			0xef, 0xc1, 0xa5, 0x0b, 0x66, 0x05, 0x65, 0xb7, 0x1c, 0x90, 0x56, 0x86, 0x56, 0x8a,
			0x79, 0x18, 0x1a, 0x60, 0xf7, 0xc7, 0x49, 0xd3, 0xf4, 0x64, 0xbf, 0xef, 0xb1, 0x46,
			0xc3, 0x53, 0x37, 0x3f, 0x77, 0x21, 0x31, 0x3d, 0xdd, 0x84, 0x4b, 0xa5, 0x7b, 0xbb,
			0x0e, 0x57, 0xc1, 0x22, 0x68, 0xac, 0xdb, 0xf0, 0xdc, 0x5c, 0x16, 0x2e, 0xcd, 0x2b,
			0xba, 0x38, 0xd2, 0x2b, 0x46, 0xdc, 0x5c, 0x53, 0xb4, 0xb7, 0x53, 0xe1, 0xf7, 0xb5,
			0x5d, 0x7e, 0xae, 0xcf, 0x80, 0x7b, 0xe3, 0xa7, 0x26, 0xf5, 0x80, 0xfa, 0x20, 0xcf,
			0x15, 0x36, 0xb0, 0x54, 0xa6, 0x95, 0x88, 0xef, 0x6c, 0x16, 0xa1, 0xdf, 0xaa, 0xd8,
			0x4f, 0x3d, 0x4f, 0x63, 0xde, 0x8d, 0x9e, 0x74, 0xc6, 0x26, 0xcd, 0x13, 0x11, 0x66,
			0x83, 0x80, 0xf9, 0xa3, 0x05, 0xbe, 0x4c, 0x48, 0x3f, 0xaf, 0x53, 0x48, 0xce, 0x20,
			0x05, 0x41, 0xc9, 0xc3, 0x61, 0xd9, 0xac, 0x9f, 0xa0, 0x73, 0xa8, 0xfb, 0x7b, 0xf7,
			0xb2, 0xfd, 0xcd, 0x09, 0x45, 0xa3, 0x29, 0xd1, 0xd0, 0xfd, 0xbd, 0x6c, 0x07, 0x9c,
			0x35, 0x3f, 0xaa, 0x99, 0x21, 0x22, 0xbf, 0xea, 0x69, 0x7c, 0xb2, 0x2f, 0x68, 0x33,
			0xf2, 0x6a, 0x2a, 0xda, 0x46, 0x46, 0xf7, 0xe2, 0x62, 0x79, 0x8e, 0x9c, 0x15, 0x62,
			0xf5, 0x96, 0x02, 0xe3, 0x8b, 0x77, 0x48, 0xad, 0xe1, 0x74, 0x08, 0x01, 0x67, 0xa8,
			0x27, 0x63, 0xcd, 0xc8, 0x72, 0xa2, 0xdf, 0xaf, 0x16, 0xca, 0xe2, 0x34, 0xd8, 0xd6,
			0xd6, 0xc1, 0x66, 0xae, 0x26, 0x01, 0xff, 0x79, 0x43, 0xf6, 0x7b, 0xca, 0x40, 0x54,
			0xf7, 0xb7, 0x30, 0x72, 0x13, 0xf0, 0xa3, 0x7a, 0x94, 0x8d, 0x0a, 0xd7, 0x70, 0x96,
			0xc6, 0x46, 0xdb, 0xc8, 0xe2, 0x48, 0xa4, 0xdb, 0x53, 0x34, 0x6c, 0x4b, 0xd9, 0x88,
			0x5a, 0xc5, 0x50, 0xf4, 0xf5, 0x1f, 0x92, 0xc1, 0xc7, 0xa6, 0x09, 0x95, 0x56, 0x1a,
			0x83, 0x0b, 0xae, 0x07, 0xeb, 0xff, 0xec, 0xc8, 0x8a, 0x10, 0xb0, 0x81, 0x3d, 0x25,
			0xf0, 0xa9, 0xb9, 0x6f, 0x69, 0xa7, 0xbf, 0xe1, 0x8d, 0xe4, 0xef, 0x32, 0x43, 0xd2,
			0xdf, 0xfb, 0xdf, 0xc8, 0xc0, 0xe6, 0xbf, 0x66, 0xa2, 0xe1, 0xc9, 0xb2, 0x71, 0xe1,
			0x3c, 0x4d, 0x32, 0xa4, 0xa0, 0x42, 0x47, 0xa5, 0x11, 0xd9, 0xa0, 0x7a, 0x1d, 0xc6,
			0xc2, 0x73, 0xb9, 0xfd, 0x2e, 0xc5, 0xea, 0xce, 0xe7, 0x08, 0x8e, 0x6f, 0x47, 0x5f,
			0x5f, 0x21, 0x67, 0xc3, 0x5c, 0x37, 0xe8, 0xda, 0x5f, 0x74, 0xd9, 0x2e, 0xe9, 0x01,
			0x0f, 0x67, 0x78, 0x35, 0x05, 0x6a, 0x1e, 0xb6, 0x67, 0x17, 0x47, 0xff, 0x77, 0xc2,
			0x7c, 0xfa, 0xbf, 0xb0, 0x92, 0xf5, 0x81, 0x9f, 0x56, 0xd3, 0x32, 0xd7, 0x4a, 0x0b,
			0xf9, 0x6a, 0x35, 0x9e, 0x2d, 0xe5, 0x5b, 0x50, 0xd5, 0xa0, 0xf2, 0x5c, 0xc7, 0x8f,
			0xc3, 0x4f, 0x56, 0xd5, 0xb2, 0x17, 0x26, 0x69, 0x1b, 0x03, 0x64, 0xc1, 0xc6, 0x88,
			0xf1, 0x4e, 0x2b, 0x6c, 0xa8, 0x64, 0x93, 0xbc, 0xef, 0xeb, 0x07, 0x16, 0x1c, 0x26,
			0xd8, 0xe9, 0x12, 0x12, 0xd3, 0x60, 0xbb, 0xb3, 0x61, 0x6f, 0xf1, 0x05, 0x9f, 0xcf,
			0xf7, 0x16, 0x83, 0xe9, 0xb4, 0x27, 0x67, 0xab, 0x84, 0xe0, 0x12, 0x39, 0xd1, 0x95,
			0x1d, 0x5f, 0xab, 0xb7, 0x93, 0x8a, 0xe6, 0xcb, 0x68, 0xa4, 0x3a, 0xc0, 0x66, 0xb1,
			0x10, 0x0b, 0x3e, 0x57, 0xb2, 0x66, 0x90, 0xe0, 0x6c, 0x8a, 0xdf, 0xec, 0xb2, 0xef,
			0x18, 0x04, 0xa3, 0x45, 0xbd, 0xad, 0x32, 0xfc, 0x15, 0xfb, 0xb3, 0x0a, 0x49, 0x4a,
			0x90, 0xd2, 0xf9, 0x5f, 0x8a, 0x46, 0x9c, 0x8b, 0x6e, 0x31, 0x1d, 0xbd, 0x7d, 0x59,
			0x8b, 0x95, 0xa8, 0x9c, 0x1b, 0x9f, 0xf2, 0x88,
			// endregion
		];

		let mut dst: [u8; 777] = [
			// region: dst
			0x1d, 0xe2, 0x27, 0x4d, 0x90, 0x59, 0x45, 0x43, 0x61, 0x43, 0x4c, 0xde, 0x1f, 0xab,
			0x21, 0xd8, 0x22, 0x2d, 0xf0, 0x1b, 0xbc, 0x1f, 0x73, 0x37, 0xa7, 0x0a, 0x9d, 0x48,
			0x3a, 0x13, 0xf6, 0x94, 0xbb, 0x4f, 0x37, 0xb7, 0x22, 0xd1, 0xc9, 0x52, 0x82, 0x88,
			0x30, 0x63, 0x2d, 0x1a, 0xd6, 0xd7, 0xf5, 0x06, 0x7f, 0x52, 0xa9, 0x39, 0xf2, 0xfe,
			0x5e, 0xe6, 0xa5, 0x82, 0x1f, 0x01, 0x1a, 0xdc, 0xae, 0x78, 0xe2, 0x89, 0x05, 0x90,
			0xe2, 0x79, 0x6c, 0x00, 0xc9, 0x95, 0x76, 0xa7, 0xc6, 0xda, 0x6e, 0xfb, 0xc9, 0x90,
			0x2c, 0xc5, 0xa5, 0xd7, 0xaa, 0xd5, 0x69, 0x52, 0x56, 0x4f, 0xcf, 0x5a, 0x7f, 0x8c,
			0x25, 0x35, 0x61, 0xfc, 0x49, 0xbb, 0x5a, 0x58, 0xc1, 0xf6, 0xbe, 0xce, 0xc2, 0x4f,
			0x2a, 0xb6, 0xfc, 0xc7, 0x2d, 0x3a, 0x46, 0xa6, 0x20, 0x18, 0x7f, 0x22, 0x95, 0xf6,
			0xa4, 0xbf, 0xc3, 0x32, 0x18, 0x81, 0x95, 0x57, 0xe2, 0xe0, 0x37, 0x2d, 0x02, 0x12,
			0x28, 0x81, 0x1f, 0x2b, 0xd6, 0x36, 0xbe, 0x5c, 0x62, 0x0e, 0xe3, 0x1c, 0x79, 0xb5,
			0x60, 0x44, 0x5c, 0x35, 0xe8, 0xe0, 0x25, 0xdb, 0x36, 0x2f, 0x02, 0x1f, 0x03, 0x9d,
			0x01, 0x88, 0xe8, 0xe9, 0x0d, 0x4f, 0x41, 0xa1, 0xa3, 0xd4, 0xfb, 0x88, 0x91, 0x54,
			0xd0, 0x39, 0xaf, 0xb3, 0x7b, 0xb4, 0xd3, 0xbf, 0x8f, 0xfe, 0x32, 0xe3, 0xd8, 0xc6,
			0x70, 0x09, 0x6c, 0xb2, 0x74, 0xe5, 0x36, 0x3a, 0x3b, 0x1c, 0xb5, 0xac, 0xdc, 0xdb,
			0xb1, 0xfe, 0xd6, 0xe8, 0x51, 0xac, 0x42, 0x1b, 0x8a, 0x29, 0xf5, 0x1b, 0x75, 0x87,
			0x63, 0xa7, 0x46, 0x3b, 0x57, 0xe4, 0x56, 0x7d, 0x5a, 0x51, 0xa0, 0xe6, 0x1e, 0x6a,
			0xea, 0xdc, 0x75, 0x2b, 0xf5, 0x22, 0x9f, 0xc9, 0x1f, 0x0f, 0xee, 0x7d, 0x50, 0x63,
			0xae, 0x65, 0x5b, 0x6b, 0x8f, 0xb9, 0x74, 0x07, 0xd1, 0xfd, 0x02, 0xe7, 0x9e, 0x4a,
			0x5a, 0x4d, 0xc8, 0x3f, 0xb7, 0x3c, 0x7c, 0x37, 0x7d, 0xc5, 0xef, 0xfa, 0x35, 0x83,
			0x6c, 0x8d, 0xbd, 0xdc, 0x44, 0x56, 0xb6, 0xfa, 0xb7, 0x79, 0x46, 0x51, 0xef, 0x39,
			0xb1, 0x55, 0x0e, 0x69, 0xea, 0x1c, 0xda, 0xbc, 0x44, 0xb6, 0x7c, 0x61, 0x17, 0x2b,
			0xc3, 0x02, 0x55, 0xb5, 0xd8, 0xaa, 0x11, 0x9b, 0x66, 0xdc, 0x73, 0x65, 0x4b, 0x05,
			0x40, 0xb1, 0x51, 0xe1, 0xc3, 0x08, 0x74, 0x32, 0xa6, 0xd6, 0x01, 0xef, 0xf1, 0xdf,
			0xbd, 0xc9, 0x19, 0xe3, 0x11, 0x47, 0xe1, 0xd5, 0xf7, 0x00, 0x91, 0xfd, 0xc4, 0x89,
			0xf3, 0x3d, 0xa8, 0x44, 0xf1, 0x88, 0x3c, 0xe4, 0x1c, 0x98, 0x01, 0x09, 0x44, 0xa1,
			0xd3, 0xd3, 0x3b, 0x50, 0x06, 0xb9, 0x87, 0x11, 0x02, 0x62, 0xd0, 0x0b, 0xa4, 0x4e,
			0xbf, 0xe6, 0xaa, 0x80, 0x04, 0xb5, 0x58, 0x6a, 0x3e, 0x54, 0x86, 0xa1, 0x0e, 0xf2,
			0xcd, 0x0b, 0x8c, 0x91, 0x68, 0xf8, 0x15, 0x92, 0x09, 0x9c, 0x99, 0x17, 0x4b, 0x70,
			0x34, 0x00, 0xd5, 0xa3, 0x78, 0xc4, 0x75, 0x9a, 0x67, 0xff, 0x10, 0xdf, 0xb4, 0xf1,
			0x68, 0xaf, 0x86, 0x22, 0x2b, 0x81, 0x76, 0x07, 0xce, 0x2f, 0xb1, 0x6d, 0x5d, 0x04,
			0xc5, 0x24, 0x9e, 0x1d, 0xc7, 0xa7, 0xcd, 0xf3, 0x03, 0x8b, 0x7d, 0xb3, 0x18, 0x2d,
			0x58, 0xab, 0x33, 0x34, 0xe8, 0xd7, 0x8c, 0xfb, 0x50, 0x9f, 0x63, 0xae, 0x51, 0x34,
			0x73, 0xfc, 0x70, 0x6b, 0x4f, 0x41, 0x9c, 0x24, 0xac, 0xea, 0x44, 0xc7, 0x52, 0x3e,
			0x34, 0xe8, 0xb3, 0x49, 0x5e, 0x6b, 0xa6, 0x9c, 0x83, 0x49, 0x82, 0x31, 0x98, 0x10,
			0x87, 0xa6, 0x47, 0x68, 0x25, 0x92, 0x58, 0x76, 0x4d, 0x84, 0x01, 0xe0, 0xb4, 0xbd,
			0x4d, 0x16, 0xf2, 0x11, 0xea, 0xe8, 0xf3, 0x23, 0x5c, 0x6a, 0x11, 0x46, 0x30, 0x97,
			0x63, 0xa8, 0x03, 0x28, 0x99, 0xe2, 0x67, 0x2a, 0x57, 0x55, 0xc7, 0x63, 0x91, 0xdb,
			0xa0, 0x46, 0x69, 0xad, 0xeb, 0xc8, 0x0b, 0x6e, 0x02, 0x3f, 0xff, 0xec, 0x2e, 0x47,
			0x62, 0xda, 0xfc, 0xbd, 0x44, 0xf6, 0x8d, 0xab, 0xa8, 0x95, 0xfd, 0xdc, 0x47, 0x58,
			0x0c, 0x69, 0x8b, 0x4d, 0x84, 0x78, 0x13, 0xd9, 0xc5, 0xf2, 0x49, 0xdc, 0x03, 0xe4,
			0x06, 0x6a, 0xcd, 0x6d, 0x3a, 0x46, 0xd7, 0x72, 0xae, 0xeb, 0x46, 0x50, 0x75, 0xed,
			0x25, 0x7e, 0xa3, 0xf4, 0x15, 0x51, 0xb3, 0x7a, 0x41, 0xf6, 0x31, 0x58, 0x5e, 0x8a,
			0x24, 0xdd, 0xd6, 0xc5, 0x11, 0xbf, 0x4b, 0x67, 0x98, 0xbb, 0x47, 0xfe, 0xb0, 0x1e,
			0x66, 0x7e, 0x97, 0x1a, 0x46, 0x4c, 0x17, 0xa4, 0xe4, 0xc1, 0x95, 0x8f, 0x92, 0x7c,
			0xf1, 0x4f, 0xf8, 0xaf, 0xf7, 0x83, 0x70, 0x5f, 0x80, 0x1b, 0xa2, 0x6f, 0xd1, 0x11,
			0x6e, 0x8d, 0x59, 0x11, 0x43, 0x6e, 0x0b, 0x03, 0x63, 0xe5, 0x21, 0xa4, 0x54, 0x20,
			0x4c, 0xcd, 0xd8, 0xb8, 0x1f, 0x78, 0x3e, 0xf2, 0x80, 0xda, 0x97, 0x9a, 0x9c, 0x35,
			0x97, 0xfb, 0xc9, 0x25, 0xbd, 0x73, 0x0d, 0x51, 0xca, 0x86, 0xe6, 0x8f, 0xc8, 0x42,
			0xa8, 0x90, 0xaa, 0x11, 0x0a, 0xdc, 0x87, 0x84, 0x52, 0xdf, 0xbc, 0x78, 0x4f, 0x44,
			0x49, 0x30, 0xa5, 0xea, 0x43, 0x93, 0x11, 0x63, 0x9b, 0x58, 0xb6, 0x59, 0x39, 0xff,
			0xe3, 0x05, 0x17, 0xdb, 0xe8, 0xe2, 0x61, 0x7c, 0xb8, 0x11, 0x67, 0x0b, 0x8e, 0xf1,
			0x47, 0xe6, 0x66, 0xe0, 0x42, 0x3c, 0x47, 0xb3, 0x30, 0xc4, 0x66, 0x75, 0xf2, 0x38,
			0x65, 0x25, 0x55, 0xa8, 0x2a, 0xe1, 0x45, 0x9b, 0x77, 0x64, 0xe2, 0x4b, 0xe8, 0x38,
			0x73, 0xbc, 0x84, 0x73, 0x8d, 0xee, 0x3a, 0x05, 0x4b, 0x12, 0xd6, 0xb8, 0x87, 0xba,
			0x87, 0x72, 0x93, 0x64, 0x73, 0xb0, 0x46,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 666);
	}
	// endregion

	// region: ft_memcpy_27
	#[test]
	fn ft_memcpy_27() {
		const SRC: [u8; 1234] = [
			// region: SRC
			0x19, 0x1a, 0x0a, 0xc8, 0x27, 0xd3, 0xfb, 0x57, 0xaf, 0x06, 0x3e, 0xad, 0x0b, 0x6b,
			0x9f, 0x1b, 0xe5, 0x4b, 0x05, 0x04, 0xe6, 0xbe, 0x18, 0x05, 0x05, 0x8d, 0x05, 0x51,
			0xd1, 0xc8, 0x56, 0x90, 0x21, 0xdb, 0x07, 0xa6, 0x4e, 0xd0, 0x6a, 0x6c, 0x69, 0xb2,
			0x21, 0x65, 0xb4, 0xae, 0x27, 0xd9, 0x07, 0x07, 0xa4, 0x11, 0xa1, 0x4d, 0x32, 0x34,
			0x78, 0x9e, 0x88, 0x14, 0x13, 0x6e, 0xec, 0x42, 0xcc, 0xdf, 0x0a, 0x7d, 0x9e, 0xb0,
			0x80, 0x1b, 0x40, 0xce, 0x69, 0xfc, 0x15, 0x6c, 0xc4, 0x26, 0xe5, 0x9f, 0x3d, 0x08,
			0x61, 0x80, 0x3f, 0x7d, 0xeb, 0x02, 0x56, 0x9a, 0x3c, 0x7c, 0x38, 0x04, 0x0a, 0x80,
			0x52, 0xc3, 0xbf, 0x76, 0xc6, 0xfd, 0xa7, 0x97, 0x4e, 0xce, 0x69, 0x80, 0x36, 0x8c,
			0xec, 0xbb, 0x6e, 0x6f, 0x64, 0xee, 0x03, 0x33, 0xfe, 0x15, 0xb9, 0x15, 0xb7, 0xa9,
			0x96, 0x8b, 0xa7, 0xec, 0x55, 0x79, 0x47, 0x15, 0x47, 0x1d, 0x1c, 0xb1, 0x6e, 0xa2,
			0xef, 0x53, 0xa6, 0xd4, 0xad, 0x96, 0x71, 0xf9, 0x39, 0xbc, 0xf9, 0x3d, 0x4e, 0x1a,
			0x30, 0x20, 0x4f, 0xa2, 0x87, 0x4c, 0x57, 0xee, 0x05, 0xe0, 0x43, 0x35, 0x2f, 0x9b,
			0x91, 0x6a, 0x56, 0x1f, 0x6a, 0x23, 0x14, 0x90, 0x67, 0xb6, 0x91, 0xde, 0xdc, 0x63,
			0xc8, 0xbf, 0x2e, 0xa5, 0xa2, 0x77, 0x68, 0xee, 0x7d, 0x31, 0xd4, 0x89, 0xba, 0x4b,
			0xc9, 0x45, 0x55, 0x66, 0x3e, 0xc0, 0x31, 0xaa, 0x93, 0xae, 0xb7, 0xfb, 0xfb, 0xe7,
			0x7a, 0x0b, 0xa2, 0x02, 0xbd, 0xf5, 0x92, 0xe0, 0xd2, 0xdb, 0x89, 0x7e, 0xdc, 0x70,
			0x05, 0xe0, 0x63, 0x0d, 0xaa, 0x21, 0x40, 0xfe, 0x03, 0x94, 0xf5, 0x0b, 0x52, 0x13,
			0xff, 0x2c, 0x47, 0x14, 0x68, 0xd6, 0x21, 0x81, 0x46, 0x0c, 0xeb, 0x4f, 0xc6, 0x0f,
			0xef, 0x45, 0x1c, 0x14, 0xe4, 0x4a, 0x8b, 0x7b, 0xef, 0xb2, 0xe4, 0x5a, 0x9b, 0x48,
			0xd1, 0xda, 0x4b, 0x73, 0x6a, 0xa9, 0xc0, 0x93, 0x1b, 0x5e, 0xb7, 0xb3, 0xb7, 0xff,
			0xab, 0x6d, 0x3a, 0xdb, 0xf0, 0x7e, 0xd4, 0x14, 0x48, 0xf8, 0x05, 0xf8, 0x21, 0x5f,
			0xd7, 0x5f, 0x47, 0xfb, 0xd3, 0x00, 0xe0, 0xa0, 0x17, 0x1d, 0x9c, 0x8e, 0x39, 0xba,
			0x8f, 0x6b, 0xcf, 0x0f, 0x7b, 0x33, 0x45, 0x8c, 0x65, 0x12, 0x81, 0x55, 0x19, 0xe7,
			0xd0, 0xf4, 0xc9, 0x23, 0x07, 0x6f, 0x1c, 0xf5, 0xba, 0xe6, 0xe1, 0xc3, 0x7a, 0x42,
			0x15, 0xbe, 0xba, 0xe5, 0xec, 0xb7, 0xd7, 0x99, 0xa7, 0xdb, 0x60, 0x08, 0x32, 0x2c,
			0x2a, 0x91, 0xab, 0x5a, 0xc8, 0xe7, 0xdc, 0x52, 0xb4, 0x75, 0x4a, 0xbe, 0x60, 0xdc,
			0x41, 0xcb, 0x4f, 0xf4, 0xe6, 0xea, 0x0b, 0x97, 0x9d, 0xb9, 0xf7, 0xbd, 0xe9, 0xf6,
			0x9a, 0x0a, 0xeb, 0xa3, 0xaf, 0x7d, 0x06, 0xcd, 0xad, 0x1e, 0x65, 0x25, 0xe4, 0x5f,
			0x05, 0x74, 0x1b, 0xe0, 0x00, 0x64, 0x8b, 0x07, 0x50, 0xfb, 0x3a, 0x0a, 0xb3, 0x9f,
			0xec, 0x91, 0xe2, 0x49, 0x6b, 0x45, 0x53, 0xe6, 0xff, 0x3d, 0x88, 0xc6, 0xd8, 0xea,
			0xa9, 0x68, 0x7c, 0x62, 0x69, 0x1c, 0xef, 0xa4, 0xfd, 0x32, 0x27, 0x33, 0x8f, 0xb2,
			0x18, 0x73, 0xb2, 0x8b, 0x0a, 0x80, 0xea, 0xc8, 0xdc, 0x89, 0x85, 0xb6, 0xa6, 0x0a,
			0x40, 0x77, 0x90, 0x57, 0x4f, 0x3b, 0xfa, 0x89, 0x6b, 0xcf, 0xc5, 0x97, 0x57, 0x29,
			0x64, 0xce, 0x98, 0xf6, 0x9b, 0x98, 0x3d, 0x6d, 0xf8, 0x4f, 0x2c, 0xba, 0xab, 0xb9,
			0xdc, 0x17, 0x5a, 0x1e, 0x05, 0x9b, 0xc3, 0x7c, 0xc8, 0x12, 0xba, 0x5a, 0x82, 0x47,
			0xae, 0x9f, 0x87, 0x52, 0x70, 0xaf, 0x6c, 0x3f, 0xaf, 0x8e, 0x5b, 0xcc, 0xe2, 0x44,
			0x86, 0xfe, 0x41, 0x3c, 0x71, 0xca, 0xeb, 0x9f, 0x99, 0x74, 0xea, 0x85, 0xd7, 0xe1,
			0x86, 0x5a, 0x7a, 0x72, 0x44, 0x1b, 0x92, 0x64, 0xe3, 0xd5, 0x9b, 0xe7, 0xbe, 0x8b,
			0x9c, 0xdd, 0x08, 0x4d, 0x15, 0x86, 0xa9, 0x53, 0x3c, 0x4d, 0xe9, 0x3a, 0xea, 0xae,
			0xcd, 0x4b, 0x40, 0x7d, 0x6e, 0x6d, 0x64, 0x25, 0xac, 0x71, 0x9e, 0x07, 0xec, 0x38,
			0x1a, 0xd5, 0x55, 0x28, 0xaa, 0xa1, 0x4b, 0xaf, 0xcd, 0xfc, 0x3b, 0xa0, 0x96, 0xac,
			0x8f, 0xde, 0x65, 0xae, 0x34, 0x2b, 0xea, 0x1a, 0xb3, 0xf9, 0x3e, 0x44, 0xac, 0x99,
			0x22, 0x2e, 0xf6, 0x4e, 0xbc, 0x80, 0x92, 0x08, 0x29, 0xfc, 0xf7, 0xc7, 0xdb, 0xfc,
			0x44, 0x0e, 0xe2, 0x25, 0xa4, 0x8b, 0x27, 0x90, 0xc9, 0x78, 0x43, 0x30, 0x61, 0xaa,
			0xcc, 0x40, 0x95, 0x90, 0x03, 0x2c, 0xd9, 0x9e, 0xe1, 0x3b, 0x9d, 0x41, 0xe0, 0xef,
			0x32, 0x26, 0x90, 0xa3, 0x8d, 0x88, 0xd5, 0x7e, 0xf4, 0x5b, 0x85, 0xa5, 0x1c, 0x66,
			0x36, 0xa8, 0x85, 0x09, 0x0b, 0xeb, 0x04, 0xa3, 0x6b, 0x9f, 0x0e, 0x25, 0x26, 0xc3,
			0x97, 0xed, 0x97, 0x15, 0xd2, 0x32, 0xd1, 0x89, 0x93, 0xce, 0x78, 0xa6, 0x71, 0xbf,
			0x4e, 0xd0, 0x91, 0x5e, 0xb3, 0x80, 0x5b, 0xbd, 0x1a, 0x32, 0x60, 0xef, 0xe9, 0x03,
			0xbb, 0xfc, 0xcf, 0xf4, 0xb3, 0x17, 0xd2, 0xee, 0x9c, 0x11, 0x37, 0x6a, 0x86, 0x5d,
			0xdd, 0x9f, 0x33, 0xbb, 0x1a, 0x84, 0xeb, 0xe7, 0x6b, 0xc5, 0xe1, 0xa8, 0xf6, 0x44,
			0x9d, 0xf1, 0x3b, 0x92, 0xa3, 0xf1, 0xe4, 0xa5, 0x3e, 0xe9, 0xe8, 0x94, 0xc7, 0xe0,
			0x27, 0xfe, 0xf8, 0xae, 0xb7, 0x38, 0x02, 0xeb, 0xc2, 0x9c, 0x26, 0xf3, 0x6b, 0x3e,
			0x91, 0x42, 0xf5, 0xb9, 0x66, 0x9a, 0x1a, 0xcc, 0x78, 0xea, 0xe9, 0x70, 0x2f, 0xa5,
			0x4c, 0xe1, 0xea, 0xc9, 0x4e, 0x29, 0x1f, 0x06, 0x19, 0x06, 0xad, 0x65, 0x15, 0x86,
			0xef, 0xbf, 0x85, 0xfc, 0x97, 0xb8, 0xd0, 0x84, 0x78, 0x04, 0xea, 0x42, 0x20, 0xf5,
			0x11, 0x62, 0x1d, 0xbd, 0x9e, 0xbc, 0xc4, 0x77, 0x8e, 0x81, 0xb6, 0x46, 0x7a, 0x8c,
			0xf1, 0x06, 0x86, 0xbb, 0x47, 0x40, 0x8e, 0xb4, 0x27, 0x1f, 0xcc, 0x15, 0x5a, 0x33,
			0xa7, 0xac, 0xfd, 0x47, 0xb6, 0x13, 0x96, 0xc7, 0xf7, 0xa9, 0xdb, 0xed, 0xf3, 0xc9,
			0x3e, 0x80, 0x25, 0xfa, 0x05, 0xfc, 0xc7, 0x0b, 0x32, 0x22, 0xbb, 0x78, 0x2d, 0x4a,
			0xb5, 0x6a, 0xce, 0xcb, 0x6c, 0x5d, 0x8c, 0x62, 0x0a, 0x74, 0x02, 0xf3, 0x26, 0xa3,
			0x08, 0xc8, 0x1d, 0xc7, 0xc3, 0x37, 0x19, 0xbc, 0xc9, 0xf4, 0x36, 0x0c, 0xf6, 0xd9,
			0xdb, 0x27, 0xf2, 0x37, 0x05, 0xf0, 0xcb, 0x2c, 0x7e, 0x71, 0xf0, 0xd9, 0x43, 0x7f,
			0x5f, 0x98, 0x49, 0x33, 0x6e, 0x46, 0xfc, 0x2f, 0x79, 0x58, 0x9e, 0xd0, 0x71, 0x8c,
			0xcb, 0x92, 0x7d, 0x1b, 0x45, 0x3e, 0xf7, 0x51, 0x65, 0x5e, 0x7c, 0xa7, 0xae, 0x27,
			0xd0, 0x79, 0x43, 0x48, 0xe8, 0x17, 0x00, 0xa2, 0x5a, 0x90, 0x97, 0x72, 0x54, 0x9d,
			0x85, 0x7d, 0xf6, 0xaf, 0x82, 0xc9, 0x7f, 0xa3, 0x10, 0xca, 0xc2, 0xcd, 0xd9, 0x4e,
			0xf0, 0x1d, 0x0a, 0xdd, 0x86, 0x4c, 0xdb, 0x63, 0xaf, 0xd6, 0xc8, 0x61, 0xe5, 0x3a,
			0x70, 0x0b, 0x19, 0xe8, 0x3c, 0xe1, 0xc8, 0x2a, 0xd7, 0xf1, 0xca, 0xec, 0xa0, 0x8f,
			0x65, 0x79, 0xdc, 0x62, 0xc2, 0x82, 0xa1, 0x9d, 0xf4, 0x15, 0xf8, 0x80, 0x9f, 0xaf,
			0x40, 0x61, 0x0f, 0xe8, 0x6e, 0x90, 0xab, 0x10, 0x08, 0x07, 0x3a, 0xa1, 0x9f, 0xbb,
			0x33, 0xe9, 0xaf, 0x63, 0xfc, 0x29, 0x06, 0x78, 0x10, 0x8c, 0xc2, 0x65, 0x55, 0xa3,
			0xb7, 0x79, 0xbd, 0xbd, 0x81, 0x42, 0xe6, 0xd0, 0x93, 0x22, 0xb5, 0x0e, 0x25, 0xc3,
			0x7f, 0x4e, 0x7d, 0x31, 0x37, 0x8b, 0x4f, 0x9e, 0x18, 0x84, 0xac, 0x32, 0xbf, 0xdc,
			0x19, 0xde, 0x3f, 0x1f, 0xb4, 0xe2, 0x01, 0xc8, 0x6e, 0x12, 0x26, 0xca, 0xfb, 0x68,
			0xc5, 0x08, 0xcb, 0xc4, 0x02, 0x68, 0x4d, 0xd6, 0xf2, 0x97, 0x7e, 0x2f, 0x71, 0xe7,
			0x4c, 0x4d, 0x24, 0x92, 0x33, 0x70, 0xb7, 0x83, 0x18, 0x0a, 0x1c, 0xb6, 0xed, 0x3e,
			0x4f, 0x55, 0xf9, 0x25, 0x57, 0x87, 0x10, 0xa8, 0x28, 0x59, 0xeb, 0xd9, 0x3c, 0x7c,
			0x89, 0x71, 0x7e, 0x88, 0xb6, 0x1b, 0x57, 0x03, 0x31, 0x54, 0x7d, 0xb4, 0x28, 0x56,
			0xa1, 0x6c, 0xe8, 0x6d, 0x35, 0xb6, 0x05, 0xae, 0x82, 0x7a, 0xb2, 0xdf, 0xcb, 0x65,
			0xa3, 0x29, 0x4c, 0x3b, 0xfc, 0xaa, 0x6d, 0x5d, 0x0c, 0x75, 0x90, 0xf1, 0xf3, 0x03,
			0xc1, 0xd0, 0x59, 0xf3, 0x6e, 0x53, 0x8c, 0x49, 0xb0, 0x62, 0xad, 0xd4, 0x23, 0x19,
			0xbb, 0x32, 0x35, 0xe8, 0xef, 0x38, 0xab, 0x89, 0x80, 0xe4, 0x05, 0x86, 0x02, 0x40,
			0xcc, 0xe0, 0xf4, 0x16, 0x91, 0x15, 0x15, 0x2e, 0x07, 0x75, 0x86, 0xba, 0x59, 0x9f,
			0x12, 0xe0, 0x5e, 0x1b, 0xf5, 0xc5, 0x28, 0x7a, 0xcf, 0x3b, 0x8b, 0xcb, 0xa9, 0xa9,
			0xdb, 0xf0, 0xd3, 0xf4, 0xce, 0x49, 0x6e, 0xf7, 0x57, 0x58, 0x4d, 0x4c, 0xa9, 0x0c,
			0x35, 0x50, 0xb4, 0x7c, 0x34, 0x72, 0x3d, 0xda, 0x70, 0x2d, 0xff, 0x45, 0xe2, 0x6e,
			0x3e, 0x5f, 0xdd, 0x3e, 0xe9, 0x53, 0x60, 0x44, 0x39, 0x60, 0xc3, 0x99, 0x57, 0x7b,
			0xee, 0xd4,
			// endregion
		];

		let mut dst: [u8; 1234] = [
			// region: dst
			0x38, 0xa1, 0x38, 0x44, 0x00, 0xc6, 0xfd, 0xed, 0x20, 0x7f, 0x1b, 0xdd, 0xb3, 0x9e,
			0x81, 0xbb, 0x1e, 0xd4, 0xac, 0x2a, 0x5b, 0xed, 0x5a, 0x06, 0x63, 0x01, 0x47, 0xb2,
			0xb5, 0x4b, 0x02, 0xf4, 0x3e, 0x57, 0xcb, 0xdd, 0xaf, 0x15, 0x57, 0xc1, 0xa7, 0xb0,
			0x0e, 0x0a, 0x04, 0x21, 0x83, 0xde, 0x9b, 0xc1, 0xaf, 0x46, 0x18, 0x0c, 0x20, 0x7e,
			0x02, 0xeb, 0x02, 0xd4, 0x36, 0xd0, 0xb1, 0x52, 0x61, 0x17, 0x78, 0x3c, 0xd5, 0xfc,
			0x2d, 0xd6, 0xf7, 0xf2, 0xd7, 0x6d, 0x27, 0xe6, 0xab, 0x84, 0x82, 0x08, 0x1d, 0xcb,
			0x55, 0x32, 0x8f, 0x17, 0x34, 0x11, 0xb3, 0x5a, 0x54, 0x38, 0x29, 0x6b, 0xaf, 0xf5,
			0x6a, 0x14, 0xfa, 0xb9, 0x95, 0x99, 0xdf, 0xfc, 0x47, 0x7a, 0xe8, 0xd3, 0xfa, 0xd6,
			0xd1, 0xd7, 0x1b, 0xd4, 0x64, 0x27, 0x98, 0x16, 0xc8, 0x08, 0x68, 0x96, 0x66, 0x90,
			0x8c, 0x9e, 0x30, 0x19, 0x48, 0x23, 0x44, 0x2d, 0xbf, 0x53, 0x3c, 0xd2, 0xf8, 0x41,
			0x41, 0x67, 0x6e, 0xac, 0x29, 0x7c, 0x2f, 0x8d, 0xd2, 0x56, 0xfe, 0x8c, 0x80, 0xa5,
			0xda, 0xa9, 0x3f, 0x45, 0x6f, 0x7b, 0xf1, 0x6e, 0x12, 0x04, 0x1a, 0xf1, 0xdf, 0x61,
			0x6f, 0x1b, 0xe3, 0x39, 0x67, 0x18, 0x17, 0xf0, 0xaf, 0xa7, 0xeb, 0x1e, 0x3c, 0xbb,
			0x89, 0x25, 0x44, 0x18, 0x92, 0xfa, 0x2d, 0x00, 0x8c, 0x3a, 0xdd, 0xf8, 0x83, 0x64,
			0x65, 0xe0, 0xec, 0x39, 0xec, 0x9e, 0x1c, 0x10, 0xcd, 0xcb, 0xcb, 0x25, 0x01, 0x44,
			0xf4, 0x56, 0x3b, 0x44, 0xac, 0x15, 0x6d, 0x16, 0x4e, 0xbc, 0x20, 0xc7, 0xbe, 0xfa,
			0x2f, 0x61, 0x6a, 0x01, 0xe7, 0x31, 0xc7, 0x46, 0xed, 0x10, 0xbc, 0x64, 0xe3, 0x3c,
			0x14, 0x90, 0x47, 0x6d, 0xd9, 0xf8, 0x12, 0x13, 0xd2, 0xf9, 0x69, 0x0f, 0xc7, 0x26,
			0x37, 0xec, 0x9c, 0x64, 0x9d, 0xa8, 0xb3, 0x04, 0xbf, 0xb0, 0x4b, 0xe1, 0xfa, 0x63,
			0x1c, 0x80, 0xc0, 0x3c, 0xa3, 0x67, 0xa8, 0x62, 0x85, 0x23, 0x05, 0xa5, 0xd0, 0x3a,
			0x17, 0x6f, 0xe5, 0x73, 0x8a, 0x3b, 0xa1, 0x3d, 0x7f, 0xc0, 0x78, 0xa8, 0x62, 0x40,
			0x3c, 0xc0, 0x2c, 0xe6, 0x1e, 0x4e, 0x8c, 0x7e, 0xd4, 0xc7, 0xa8, 0x20, 0x34, 0x53,
			0x59, 0x6c, 0xb4, 0x6e, 0xef, 0x6f, 0x86, 0xe7, 0x7a, 0xc1, 0x30, 0xe8, 0x47, 0x44,
			0xd6, 0x4e, 0xdb, 0xb3, 0xb3, 0x4f, 0x65, 0x26, 0x97, 0x16, 0x3f, 0x57, 0x04, 0x20,
			0xa9, 0xfe, 0x2e, 0x56, 0x59, 0x85, 0x0d, 0x68, 0xcb, 0x41, 0x23, 0x25, 0x0a, 0x43,
			0x24, 0xd9, 0x7c, 0xe2, 0x46, 0x54, 0xd1, 0xe7, 0xc6, 0x57, 0xc8, 0xf5, 0x2e, 0x2e,
			0x33, 0xdf, 0x68, 0xab, 0xea, 0x7a, 0xaf, 0x76, 0xdf, 0xce, 0x15, 0x1d, 0x4e, 0x5a,
			0x3b, 0x45, 0xce, 0xf1, 0xba, 0x56, 0xae, 0x3a, 0x90, 0xb5, 0x6c, 0xd1, 0x39, 0x54,
			0x7e, 0xc5, 0xec, 0xef, 0xaa, 0x96, 0xf5, 0x60, 0x40, 0x7a, 0x0d, 0x37, 0xce, 0x8e,
			0x40, 0x61, 0x44, 0x26, 0xe3, 0x88, 0x90, 0xed, 0x1a, 0xed, 0x46, 0x29, 0x27, 0xcc,
			0x03, 0xc6, 0xf9, 0x33, 0x79, 0x38, 0xd2, 0x3e, 0x31, 0x14, 0x6a, 0x43, 0xa6, 0xe1,
			0x1a, 0x18, 0x39, 0xc6, 0x56, 0x1b, 0x03, 0x1e, 0xee, 0xf8, 0xd3, 0xd5, 0xf0, 0xc8,
			0x38, 0xb9, 0x60, 0x5f, 0x1a, 0xfc, 0x20, 0xef, 0xed, 0x35, 0x9e, 0x5e, 0x64, 0x8a,
			0x89, 0xf1, 0xd7, 0x84, 0xc3, 0xd7, 0x9b, 0x74, 0x9a, 0xc9, 0x34, 0x3f, 0xb2, 0x77,
			0xd5, 0x3b, 0x06, 0x0e, 0x12, 0x57, 0x8b, 0xcd, 0x8a, 0x48, 0xbc, 0x20, 0x6c, 0x45,
			0x94, 0x94, 0x71, 0x02, 0x8b, 0xcd, 0x94, 0x94, 0x67, 0x3b, 0x18, 0x4a, 0x81, 0x87,
			0x5a, 0x7e, 0xb2, 0xc8, 0x6f, 0x2e, 0x23, 0xc1, 0xec, 0x8d, 0x5a, 0xb6, 0x46, 0x4a,
			0xc5, 0x58, 0xd3, 0xea, 0x42, 0x67, 0x89, 0xfa, 0x15, 0x91, 0x21, 0xbb, 0x4d, 0xe3,
			0x6b, 0xc0, 0xf4, 0xf0, 0x96, 0xf4, 0xbe, 0x1d, 0x02, 0x55, 0xf5, 0x40, 0x19, 0x7f,
			0xc7, 0x4d, 0x27, 0x0b, 0xff, 0xc6, 0xca, 0xd0, 0xc9, 0x11, 0x67, 0xd7, 0x3f, 0x80,
			0x57, 0x10, 0x8f, 0x1a, 0xd4, 0x7d, 0x00, 0x19, 0xc8, 0x7f, 0xe8, 0x0b, 0x35, 0x05,
			0x53, 0x71, 0xe0, 0xe5, 0x20, 0xd0, 0xe9, 0x1b, 0x89, 0x99, 0x01, 0x14, 0x50, 0xa5,
			0x90, 0x95, 0xef, 0x02, 0x7a, 0x4e, 0x05, 0x8b, 0xd6, 0xfa, 0x97, 0xa9, 0xfd, 0xd6,
			0x1b, 0x42, 0x30, 0x4e, 0x90, 0x6e, 0x4d, 0x9b, 0xad, 0x95, 0xec, 0xb1, 0x09, 0x50,
			0x78, 0x49, 0xd3, 0x93, 0xc1, 0x62, 0x55, 0xd5, 0x7f, 0x1b, 0x82, 0x6c, 0x91, 0x0b,
			0xaa, 0x31, 0xbb, 0x06, 0x9e, 0xd6, 0x6d, 0x5f, 0xf2, 0x6b, 0xac, 0x9e, 0xe0, 0x4f,
			0xd3, 0xa4, 0x17, 0x61, 0xc8, 0xd7, 0xf2, 0xe5, 0x8f, 0xa8, 0xd2, 0x62, 0x0a, 0xe2,
			0xc9, 0x56, 0x7d, 0x0a, 0x43, 0x9d, 0x08, 0x78, 0x25, 0x93, 0x59, 0x8e, 0xfa, 0x33,
			0x3b, 0xc1, 0x36, 0x15, 0x81, 0xe4, 0xc0, 0xe1, 0x5a, 0x71, 0xba, 0x73, 0xd4, 0x5b,
			0x92, 0x63, 0x61, 0x56, 0xcb, 0xc4, 0x6d, 0x52, 0xc5, 0xf7, 0x25, 0xb4, 0x76, 0xe1,
			0xbd, 0xe8, 0x4b, 0x36, 0xd3, 0xe0, 0x8a, 0xe2, 0x93, 0x33, 0xda, 0xaa, 0xf3, 0x37,
			0xa8, 0xbf, 0x84, 0xb5, 0xfa, 0xc6, 0xbb, 0xdd, 0xa2, 0x98, 0x1e, 0xf6, 0x27, 0xb0,
			0x7b, 0xe3, 0x63, 0x11, 0x21, 0xb5, 0x96, 0xe3, 0xe0, 0x2d, 0xb8, 0xe1, 0xb1, 0x27,
			0x36, 0xc0, 0x9c, 0x44, 0x0e, 0xe6, 0xa9, 0x14, 0xa6, 0xb6, 0xce, 0xd1, 0xf0, 0x0d,
			0x9d, 0x56, 0xb8, 0x62, 0x3a, 0x83, 0x1f, 0x39, 0xc4, 0xb5, 0x47, 0xa6, 0xe1, 0x3b,
			0xa4, 0x7f, 0x80, 0x21, 0x14, 0x2c, 0xd5, 0xf9, 0xce, 0xac, 0xda, 0xe5, 0x1a, 0x9c,
			0xd1, 0x43, 0x1d, 0x63, 0x33, 0x64, 0xe3, 0x32, 0x01, 0x0e, 0x40, 0x8a, 0x27, 0x26,
			0xbd, 0x99, 0x52, 0xab, 0xce, 0x0b, 0x0c, 0x23, 0x51, 0xec, 0x41, 0xb2, 0x4f, 0xc0,
			0x62, 0x92, 0x7c, 0x67, 0x88, 0xe6, 0xbe, 0x3a, 0xfe, 0x8b, 0x73, 0xb0, 0x18, 0x48,
			0x1d, 0x60, 0xb4, 0xe8, 0x76, 0x1d, 0x6d, 0x02, 0x18, 0x8a, 0xbd, 0x4c, 0x40, 0xe1,
			0x88, 0x42, 0x59, 0xfc, 0x55, 0x4e, 0x32, 0x56, 0x51, 0xe8, 0x4b, 0x30, 0x56, 0x70,
			0x21, 0xce, 0x7e, 0x94, 0xce, 0x3d, 0x0a, 0x46, 0x01, 0xf4, 0xf9, 0x12, 0x0f, 0x08,
			0x93, 0xd8, 0xd5, 0xc0, 0x0d, 0x8f, 0x7b, 0xb3, 0x62, 0x80, 0xb1, 0xad, 0x8f, 0x7e,
			0xb7, 0x14, 0xf9, 0x46, 0x27, 0x08, 0xad, 0xe2, 0x31, 0xe5, 0x25, 0x28, 0xd6, 0x95,
			0xd3, 0x42, 0x03, 0xc4, 0x8d, 0x87, 0xda, 0xc9, 0x4e, 0x8b, 0x81, 0x33, 0xde, 0x28,
			0xf4, 0xbb, 0x11, 0xf7, 0x45, 0xe4, 0x2b, 0x7b, 0x22, 0xf8, 0x8a, 0xf0, 0x4f, 0x0f,
			0x97, 0x34, 0xd3, 0x82, 0x0d, 0xb8, 0x29, 0xff, 0xca, 0xe3, 0x8b, 0xd2, 0x9e, 0x11,
			0xd1, 0x79, 0xdf, 0x3f, 0xf7, 0xb3, 0x2f, 0x57, 0xd3, 0x40, 0x0d, 0x93, 0x57, 0xd1,
			0x66, 0x96, 0x17, 0xc5, 0x08, 0xb4, 0x5f, 0x25, 0xc3, 0xae, 0x27, 0x5f, 0x32, 0xd5,
			0x84, 0xef, 0x11, 0xea, 0x28, 0x9a, 0x2a, 0x0d, 0xc1, 0xa8, 0xc8, 0x29, 0xb0, 0x12,
			0x14, 0x87, 0xe7, 0xf4, 0x26, 0xa8, 0x12, 0xa9, 0x42, 0x38, 0x93, 0xb2, 0xd6, 0xd8,
			0xe7, 0x97, 0x60, 0x97, 0xd1, 0xc5, 0x12, 0x31, 0xcf, 0x13, 0x19, 0xf4, 0x80, 0x70,
			0x6a, 0xd1, 0x8f, 0xa7, 0x14, 0x6b, 0x30, 0xc2, 0xaa, 0xbe, 0xa4, 0x70, 0x04, 0xfc,
			0x40, 0x45, 0x10, 0x5c, 0x27, 0xed, 0xd2, 0x26, 0xc4, 0xb9, 0x63, 0x71, 0x79, 0xf8,
			0x74, 0x97, 0x01, 0x5f, 0xfc, 0x69, 0xfb, 0xbd, 0x1f, 0xda, 0x8b, 0x54, 0x1a, 0x09,
			0x02, 0x96, 0xa9, 0xd8, 0x81, 0xfc, 0xf1, 0x98, 0x10, 0x80, 0xa8, 0x15, 0xe9, 0x4f,
			0xfd, 0x17, 0x54, 0x3b, 0xb9, 0xd4, 0x3c, 0x83, 0xb2, 0x18, 0x5a, 0x48, 0xcd, 0xca,
			0x06, 0xf7, 0x12, 0x1d, 0x41, 0x0e, 0x9e, 0x16, 0x8f, 0x2e, 0x3f, 0x8d, 0x1f, 0xd6,
			0x66, 0x29, 0xc9, 0xda, 0x28, 0xec, 0xb9, 0x82, 0x5d, 0x83, 0x72, 0x0a, 0x7d, 0x20,
			0x4e, 0xe2, 0x99, 0x1a, 0x2e, 0xb4, 0x5d, 0x5a, 0x76, 0x30, 0x60, 0x3a, 0x27, 0x36,
			0xf3, 0xbc, 0x9d, 0xf9, 0xde, 0xe8, 0xf7, 0x7e, 0x02, 0x9e, 0xb5, 0xd8, 0x39, 0xa1,
			0x20, 0xca, 0xfe, 0x58, 0xc2, 0xc1, 0xc2, 0x08, 0xd7, 0x0a, 0xe8, 0xc6, 0x63, 0xe0,
			0x22, 0x6f, 0x18, 0x91, 0x11, 0xd3, 0x84, 0x54, 0x2f, 0x96, 0x21, 0x2a, 0x09, 0x21,
			0xd3, 0x00, 0xe0, 0x4c, 0x46, 0xc4, 0xa3, 0xb0, 0xbb, 0x14, 0xf1, 0xea, 0x1f, 0x58,
			0x57, 0x06, 0x3d, 0xf5, 0x51, 0x18, 0x9e, 0x60, 0x1d, 0x57, 0xce, 0x7b, 0x59, 0x3f,
			0x67, 0x26, 0x9f, 0xce, 0x82, 0x90, 0xa4, 0xfb, 0x54, 0x05, 0x47, 0x02, 0x35, 0xa8,
			0x01, 0x0b, 0xf1, 0xb7, 0x63, 0xf6, 0x48, 0x07, 0xa1, 0x74, 0x05, 0xa5, 0x5a, 0x35,
			0x09, 0x6c, 0x1f, 0xd8, 0x84, 0xdf, 0x1b, 0x95, 0xbd, 0x95, 0x80, 0x52, 0xcb, 0x5c,
			0x92, 0x9c,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 1234);
	}
	// endregion

	// region: ft_memcpy_28
	#[test]
	fn ft_memcpy_28() {
		const SRC: [u8; 144] = [
			// region: SRC
			0xe4, 0x58, 0x01, 0xf3, 0x75, 0x68, 0xc7, 0xf4, 0x59, 0xc0, 0x8b, 0x91, 0xe5, 0x70,
			0xce, 0x63, 0x4d, 0x5d, 0x2c, 0xae, 0x0e, 0x6b, 0xaf, 0x45, 0x3c, 0xee, 0xe5, 0x96,
			0x94, 0x80, 0x0e, 0x93, 0x02, 0xb2, 0xf2, 0x21, 0xaa, 0x0d, 0x41, 0xaa, 0x14, 0x31,
			0x19, 0x96, 0xd9, 0x1e, 0xe5, 0x99, 0xa1, 0xae, 0xa9, 0x02, 0x66, 0x56, 0x43, 0x0a,
			0x5d, 0xb8, 0xbf, 0xdb, 0xff, 0x58, 0x82, 0xac, 0x38, 0x40, 0xd7, 0xb1, 0x98, 0x05,
			0xea, 0x0c, 0xcf, 0x57, 0xe5, 0xd8, 0x6b, 0xc3, 0x55, 0x0f, 0xcb, 0xb0, 0x03, 0xd2,
			0xe7, 0x11, 0x53, 0x68, 0x1b, 0x38, 0x5a, 0x7a, 0xbe, 0x67, 0xf8, 0x8d, 0x79, 0xbb,
			0xfb, 0x07, 0xc0, 0x01, 0x44, 0xda, 0x0a, 0x57, 0xdf, 0x72, 0x31, 0xd9, 0x56, 0xb0,
			0x09, 0xbc, 0x37, 0x7b, 0xaa, 0x97, 0x31, 0x39, 0xe8, 0xd0, 0xf9, 0x30, 0x5b, 0x7d,
			0xb3, 0x11, 0xf6, 0xcc, 0x55, 0x01, 0xfb, 0xe0, 0xd5, 0x0b, 0xfe, 0xbf, 0xde, 0x83,
			0xb9, 0x42, 0x22, 0x41,
			// endregion
		];

		let mut dst: [u8; 91] = [
			// region: dst
			0x17, 0x12, 0x8d, 0x45, 0xce, 0xdf, 0xe7, 0xcb, 0x4f, 0x84, 0x7f, 0x0c, 0xfc, 0xce,
			0xc5, 0x10, 0x54, 0x98, 0x1f, 0x67, 0x8c, 0x92, 0xf6, 0xb4, 0x93, 0xd8, 0x14, 0xe0,
			0xa9, 0x68, 0x64, 0xc7, 0xe9, 0x48, 0x26, 0x06, 0x06, 0x74, 0xa8, 0x32, 0xb8, 0x4a,
			0x94, 0x41, 0xc4, 0xd5, 0x19, 0xf1, 0xf9, 0xeb, 0x34, 0x1b, 0x18, 0x19, 0xcf, 0xb3,
			0x9c, 0xf9, 0xab, 0x9f, 0x4a, 0x2e, 0x1d, 0x11, 0xad, 0xc4, 0xc7, 0x7e, 0x4c, 0x9e,
			0x99, 0xf0, 0x48, 0x89, 0x4a, 0x34, 0x1d, 0x85, 0xea, 0x31, 0xf0, 0xb9, 0x4c, 0xe2,
			0xa9, 0x94, 0x74, 0x2b, 0xf1, 0xc2, 0x7a,
			// endregion
		];

		unit_test_helper(&mut dst, &SRC, 91);
	}
	// endregion
}
